
_________________________________________________________________________________
>>> TABLE OF CONTENTS:

  - Quick start
  - Organization of the code
  - Building packages
  - System packages
    - Debian GNU Linux 6.x
    - Fedora 15
    - OpenSuSE 11.4
    - Ubuntu Linux 10.04 LTS
    - Ubuntu Linux 11.10

_________________________________________________________________________________
>>> Quick start

Once checkout from the repository is complete, first set up your environment:

  # csh, tcsh
  setenv LOFARSOFT <root directory of code tree>
  source $LOFARSOFT/devel_common/scripts/init.csh
  # sh, bash
  export LOFARSOFT=<root directory of code tree>
  . $LOFARSOFT/devel_common/scripts/init.sh

Then change into the "build" directory to run the bootstrap script:

  cd build
  ./bootstrap

The the main job of the bootstrap script is to check whether or not a recent
enough version of CMake (www.cmake.org) is installed on your system; if the found
installation is too old or not available at all, a build from the provided
sources is triggered and the resulting executables will be installed into
"release/bin" (which of course then should be in your PATH).

In order to get a list of possible build targets, type

  make help

Running 

  make <target>

will try to build the selected target -- including, where required, required
packages.


_________________________________________________________________________________
>>> Organization of the code

Once the check-out is completed, you will find the following directory structure
on your disk:

  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |   |-- cmake
  |   |-- scripts
  |   `-- templates
  |-- external
  |   |-- cfitsio
  |   |-- casacore
  |   |-- hdf5
  |   |-- plplot
  |   |-- swig
  |   `-- wcslib
  `-- src
      |-- contrib
      |-- CR-Tools
      |-- DAL
      |-- LASA
      |-- pipeline
      |-- pybdsm
      `-- RM

In this:

 - lofarsoft    : Root of the User Software code tree - go there if you want to
                  synchronize your local working version against the repository.
 - build        : Directory used for building individual packages in the code
                  distribution; using a separate directory for this purpose makes
                  it easy to simply erase all compile and link attempts and start
                  again from a clean plate.
 - devel_common : Directory holding common tools for development; this includes 
                  e.g. the find scripts for CMake or file templates for creating
                  new C++ classes. Unless you consider collaborating on the
                  framework, you will not need to touch this (but you will need it).
 - doc          : Local version of the Doxygen-based source code documentation.
 - external     : Hosts the various external 3rd-party packages which will be
                  required to build parts of the LOFAR User Software.
 - src          : Contains the source code of the various projects andpackages
                  developed and written within the framework of the LUS.


_________________________________________________________________________________
>>> Building packages

High-level build targets are available for a number of packages, which are build
on top of other external components:

  * anaamika : Blob detection and source modeling
  * cr       : CR-Tools
  * dal      : Data Access Library
  * rm       : Rotation Measure Synthesis 

Once completing the check-out of the source code from the LUS repository, the
following steps are required:

  cd $LOFARSOFT/build
  ./bootstrap
  make <package>

So in order to e.g. build the DAL, run

  make dal

from within the "build" directory.


_________________________________________________________________________________
>>> System packages

Most of the required external software packages can be installed via the
respective package manager:

== Debian GNU Linux 6.x ==

  apt-get install build-essential gfortran git-svn cmake subversion flex bison swig
  apt-get install libblas-dev liblapack-dev libboost-all-dev libfftw3-dev
  apt-get install libcfitsio3-dev libgsl0-dev

== Fedora 15 ==

  yum install cmake git-svn subversion gcc-gfortran libgfortran flex bison swig
  yum install blas-devel lapack-devel boost-devel fftw-devel hdf5-devel
  yum install cfitsio-devel gsl-devel

== OpenSuSE 11.4 ==

  yast2 --install cmake git-svn subversion bison flex
  yast2 --install blas lapack boost-devel
  yast2 --install libcfitsio-devel gsl-devel

If you'd rather work from the terminal only:

  zypper install cmake git-svn subversion bison flex
  zypper install blas lapack boost-devel
  zypper install libcfitsio-devel gsl-devel

== Ubuntu Linux 10.04 LTS ==
== Ubuntu Linux 11.10     ==

  apt-get install build-essential gfortran git-svn cmake subversion flex bison swig
  apt-get install libblas-dev liblapack-dev libboost-all-dev libfftw3-dev
  apt-get install libcfitsio3-dev libgsl0-dev

