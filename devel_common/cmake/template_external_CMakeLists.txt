
## Name of the project
project (<PROJECT>)

## Minimum required version of CMake to configure the project
cmake_minimum_required (VERSION 2.8)

## -----------------------------------------------------------------------------
## Only force rebuild of the library from the provided source code, if no system
## installation can be found. In order to handle this properly, we use the CMake
## find script

option (<PROJECT>_FORCE_BUILD       "Force rebuild and local installation?"    NO  )
option (<PROJECT>_VERBOSE_CONFIGURE "Be verbose during configuration?"         NO  )
option (<PROJECT>_VERBOSE_BUILD     "Be verbose during build process?"         NO  )

## ------------------------------------------------------------------------------
## Set CMAKE_MODULE_PATH to load custom CMake modules

if (NOT LUS_ROOT)
  find_path (LUS_ROOT devel_common/cmake/CMakeSettings.cmake
    PATHS 
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/..
    ${CMAKE_CURRENT_SOURCE_DIR}/../..
    ${CMAKE_CURRENT_SOURCE_DIR}/../../..
    $ENV{LOFARSOFT}
    )
endif (NOT LUS_ROOT)

if (LUS_ROOT)
  include (${LUS_ROOT}/devel_common/cmake/CMakeSettings.cmake)
else (LUS_ROOT)
  message (FATAL_ERROR "Unable to locate additional CMake scripts!")
endif (LUS_ROOT)

## ------------------------------------------------------------------------------
## Check if the program/package/library is already available

if (NOT <PROJECT>_VERBOSE_CONFIGURE)
  set (<PROJECT>_FIND_QUIETLY     YES )
endif (NOT <PROJECT>_VERBOSE_CONFIGURE)

include (Find<PROJECT>)

## <-- begin build condition --------------------------------------------------->

if (NOT HAVE_<PROJECT> OR <PROJECT>_FORCE_BUILD)
  
  set (<PROJECT>_VERSION     "" )
  set (<PROJECT>_TAR_ARCHIVE "" )
  set (<PROJECT>_URL         "" )

  ##__________________________________________________________________
  ## Build the project
  
  include (ExternalProject)
  
  find_file (HAVE_<project>_SOURCE ${<PROJECT>_TAR_ARCHIVE}  ${<PROJECT>_SOURCE_DIR})
  
  if (NOT HAVE_<project>_SOURCE)
    set (HAVE_<project>_SOURCE ${<PROJECT>_URL})
  endif (NOT HAVE_<project>_SOURCE)
  
  ExternalProject_Add (<project>
    PREFIX ${PROJECT_BINARY_DIR}
    DOWNLOAD_DIR ${PROJECT_BINARY_DIR}/download
    SOURCE_DIR ${PROJECT_BINARY_DIR}/source
    URL ${HAVE_<project>_SOURCE}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/source/configure --prefix=${CMAKE_INSTALL_PREFIX}
    )
  
  ## <-- end build condition ----------------------------------------------------->
  
else (NOT HAVE_<PROJECT> OR <PROJECT>_FORCE_BUILD)
  add_custom_target (<project>
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMENT "[<PROJECT>] Found system-wide installation; skipping rebuild!"
    )
endif (NOT HAVE_<PROJECT> OR <PROJECT>_FORCE_BUILD)
