/*!

	\page configure_build Configuration, build and installation
	
	- \ref configure_build_code
	- \ref configure_build_install
	- Targets provided by the top-level configuration script
	  - \ref configure_build_usg
	  - \ref configure_build_external
	  - \ref configure_build_testdata
	  - \ref configure_build_doc
	  - \ref configure_build_clean
	- \ref configure_build_dependencies
	
	<hr>
	
	\section configure_build_code Organization of the code
	
	Once the check-out is completed, you will find the following directory structure
	on your disk:
	\verbatim
	lofarsoft
	|-- data
	|-- doc
	|-- release
	|-- build
	|-- devel_common
	|   |-- cmake
	|   |-- scripts
	|   `-- templates
	|-- external
	|   |-- cfitsio
	|   |-- casacore
	|   |-- hdf5
	|   |-- plplot
	|   |-- swig
	|   `-- wcslib
	`-- src
	    |-- contrib
	    |-- CR-Tools
	    |-- DAL
	    |-- pybdsm
	    `-- RM
	\endverbatim
	In this:
	<ul>
	  <li>\b lofarsoft is the root of the User Software code tree - go there if you
	  want to synchronize your local working version against the repository.
	  <li>\b build is used for building individual packages in the code
	  distribution; using a separate directory for this purpose makes it easy to
	  simply erase all compile and link attempts and start again from a clean plate.
	  <li>\b devel_common hold common tools for development; this includes e.g.
	  the find scripts for CMake or file templates for creating new C++ classes. Unless
	  you consider collaborating on the framework, you will not need to touch this
	  (but you will need it).
	  <li>\b doc contains a local version of the Doxygen-based source code
	  documentation; just go in there, fire up Doxygen and get an up-to-date version
	  of the source code documentation.
	  <li>\b external hosts the various external packages which will be required
	  to build parts of the LOFAR User Software.
	  <li>\b src contains the source code of the various projects and packages 
	  developed and written within the framework of the USG. The main components are:
	  <ul>
    	<li><a href="group__DAL.html">DAL</a> - The <i>Data Access Library</i> is the interface for the creation of
    	and access to LOFAR's standard data products.
    	<li><a href="group__CR.html">CR-Tools</a> - Tools for the analysis of cosmic ray data.
    	<li><a href="group__pybdsm.html">pybdsm</a> - <i>Blob detection and source modelling</i> package developed by the
    	Surveys KSP.
    	<li><a href="group__RM.html">RM</a> - Rotation-measure synthesis imaging package developed by the
		Cosmic Magnetism KSP.
	  </ul>
	</ul>

	<hr>
	
	\section configure_build_install Basic installation from source
	
	In order to install modules/packages the following simple steps are required:
	<ol>
	  <li><b>Get a working copy of the source code</b> from the USG Subversion
	  repository:
	  \verbatim
	  svn co http://usg.lofar.org/svn/code/trunk lofarsoft
	  \endverbatim
	  <li><b>Set up your environment</b>: Add the location of the new
	  executables to your PATH variable:
	  \code
	  # csh, tcsh
	  setenv LOFARSOFT <root directory of code tree>
	  source $LOFARSOFT/devel_common/scripts/init.csh
	  
	  # sh, bash
	  export LOFARSOFT=<root directory of code tree>
	  . $LOFARSOFT/devel_common/scripts/init.sh
	  \endcode
	  If you want this information to be persistent, you should add the setting
	  to the configuration file of your shell; for \e bash users this is
	  done in either <tt>$HOME/.profile</tt> or <tt>$HOME/.bashrc</tt> -- users
	  of \e tcsh or \e csh need to add the appropriate statement to
	  <tt>$HOME/.cshrc</tt>.
	  <li>Change into the \e build directory and run the \e bootstrap script:
	  \code
	  cd build
	  ./bootstrap
	  \endcode
	  The script will check if there is a recent enough version of CMake available
	  <li>Run \e make for the package/module in question, e.g. for the
	  <a href="group__DAL.html">Data Access Library</a>
	  \code
	  make dal
	  \endcode
	  Typing
	  \code
	  make help
	  \endcode
	  will provide you with a list of available build targets.
	</ol>

	<hr>
	
	\section configure_build_usg Targets to build User Software packages
	
	The following targets can be used to build one (or multiple, in case of
	dependencies) of the package developed and written by the User Software
	Group:
	
	<table border=0>
	  <tr>
	    <td class="indexkey">Target</td>
		<td class="indexkey">Description</td>
	  </tr>
	  <tr>
	    <td bgcolor="dddddd">\b dal</td>
		<td bgcolor="eeeeee">The <a href="group__DAL.html">Data Access Library</a> (DAL).</td>
	  </tr>
	  <tr>
	    <td bgcolor="dddddd">\b cr</td>
		<td bgcolor="eeeeee">The <a href="group__CR.html">CR-Tools</a> package. The configuration
		script enables selection of the following features from the top-level
		directory: \e CR_WITH_GUI and \e CR_WITH_STARTOOLS - both of
		which are disabled by default. See the page \ref crtools_build_parameters
		for further description.</td>
	  </tr>
	  <tr>
	    <td bgcolor="dddddd">\b pybdsm</td>
		<td bgcolor="eeeeee">Python version of the <i>Blob detection and source modelling</i>
		package developed by the Surveys KSP.</td>
	  </tr>
	  <tr>
	    <td bgcolor="dddddd">\b rm</td>
		<td bgcolor="eeeeee">Rotation-measure synthesis imaging package developed by the Cosmic
		Magnetism KSP.</td>
	  </tr>
	</table>
		
	\section configure_build_external Targets to build external packages

	<table border=0>
	  <tr>
	    <td class="indexkey">Target</td>
	    <td class="indexkey">Availability</td>
		<td class="indexkey">Description</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b bison</td>
		<td>[optional]</td>
		<td>GNU Project parser generator (yacc replacement)</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b blitz</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b boost</td>
		<td></td>
		<td>A free peer-reviewed portable C++ source libraries. Amongst many
		other things it contains \e Boost.Python, a C++ library which enables
		seamless interoperability between C++ and the Python programming
		language.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b casacore</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b cfitsio</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b flex</td>
		<td>[optional]</td>
		<td>Fast lexical analyzer generator</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b hdf5</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b mathgl</td>
		<td></td>
		<td>Library for the generation of scientific plots</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b plplot</td>
		<td></td>
		<td>Library for the generation of scientific plots</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b pyrap</td>
		<td></td>
		<td>Python bindings for casacore</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b python</td>
		<td></td>
		<td>A collection of Python packages: NumPy, Num_util, matplotlib</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b qt</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b root</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b sip</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b startools</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b szip</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b swig</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b wcslib</td>
		<td></td>
		<td>Library implementing the WCS standard, central to a number of
		astronomical data reduction packages.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b wcstools</td>
		<td></td>
		<td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b wget</td>
		<td>[optional]</td>
		<td>Non-interactive network downloader. GNU Wget is a
	free utility for non-interactive download of files from the Web. It supports
	HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP proxies.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b zlib</td>
		<td></td>
		<td>Compression/decompression library.</td>
	  </tr>
	</table>
	
	\b Note: Some of the above listed targets may not be present in your setup;
	if this is the case, then the related system package is installed already.
	
	\section configure_build_testdata Installation of test data sets
	
	There is a single target available which allows to download and install a
	collection of small test data sets:
	
	<table border=0>
	  <tr>
	    <td class="indexkey">Target</td>
		<td class="indexkey">Description</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b test-data</td>
		<td>Retrieve a collection of small test data sets from the USG server
		and install them into $LOFARSOFT/data/test</td>
	  </tr>
	</table>
	
	Once installed the following files/sub-directories will be contained in 
	$LOFARSOFT/data/test:
	
	\verbatim
	drwxr-xr-x   39 lars  lars        1326 Sep 24  2008 L2007_01810_SB18-20_OB20.MS
	-rw-r--r--    1 lars  lars       35872 Nov 17 13:25 L2007_01810_SB18-20_OB20.MS.h5
	-rw-r--r--    1 lars  lars     4204800 Sep 27  2008 WN65341H.fits
	-rw-r--r--    1 lars  lars  1016092752 Jul  9  2008 bf_20080604_121337.cor
	-rw-r--r--    1 lars  lars  1019864744 Nov 17 13:26 bf_20080604_121337.cor.h5
	-rw-r--r--    1 lars  lars    10584488 Nov 17 13:26 rw_20071024_090656.h5
	-rw-r--r--    1 lars  lars     2191360 Oct 22 11:55 rw_20071024_090656_0101.dat
	-rw-r--r--    1 lars  lars     2191360 Oct 22 11:56 rw_20071024_090656_0102.dat
	-rw-r--r--    1 lars  lars     2191360 Oct 22 11:56 rw_20071024_090656_0103.dat
	\endverbatim
	
	This collection contains the following datasets:
	<ul>
	  <li><b>L2007_01810_SB18-20_OB20.MS</b> -- A casacore MeasurementSet as
	  being created in the standard imaging pipeline.
	  <li><b>L2007_01810_SB18-20_OB20.MS.h5</b> -- HDF5 version of the above
	  MeasurementSet, containing the most significant tables (i.e. a subset of the
	  original structure).
	</ul>
	
	\section configure_build_doc Targets for documentation generation
	
	The following targets can be used to generate various sorts of
	documentation:
	
	<table border=0>
	  <tr>
	    <td class="indexkey">Target</td>
	    <td class="indexkey">Availability</td>
		<td class="indexkey">Description</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b doc</td>
		<td>[optional; requires Doxygen]</td>
		<td>Create documentation for the source code using Doxygen.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b doc-cmake</td>
		<td></td>
		<td>Create documentation for CMake; the resulting HTML file
		\e CMake.html will be placed into $LOFARSOFT/doc.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b doc-ctest</td>
		<td></td>
		<td>Create documentation for CTest; the resulting HTML file
		\e CTest.html will be placed into $LOFARSOFT/doc.</td>
	  </tr>
	</table>

	\section configure_build_clean Targets for cleaning up directories
	
	<table border=0>
	  <tr>
	    <td class="indexkey">Target</td>
	    <td class="indexkey">Availability</td>
		<td class="indexkey">Description</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b clean-build</td>
		<td></td>
		<td>Clean up the build directory; this will remove everything except the
		original files obatined with a fresh check-out (which of course means
		you will need to again run <tt>./bootstrap</tt> before any
		further action).</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b clean-doc</td>
		<td></td>
		<td>Clean up the documentation directory; this will remove all the
		created HTML files and images created by Doxygen.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b clean-release</td>
		<td></td>
		<td>Clean up the \e release directory and put it back into the state it
		was right after check-out of your working copy. \b Caution: If your
		version of CMake is taken from \e release/bin you will need to run
		<tt>./bootstrap</tt>.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b clean-src</td>
		<td></td>
		<td></td>
	  </tr>
	</table>

	<hr>
	
	\section configure_build_dependencies Dependencies of the targets
	
	\verbatim	
	mathgl
	|-- hdf5
	|   `-- szip
	|-- python
	|   `-- boost
	`-- swig
	
	pyrap
	|-- casacore
	|   |-- hdf5
	|   |   `-- szip
	|   |-- cfitsio
	|   |-- boost
	|   |-- wcslib
	|   |   |-- boost
	|   |   `-- flex
	|   `-- bison
	`-- python
	
	startools
	`-- root
	
	dal
	|-- plplot
	`-- casacore
	    |-- hdf5
	    |   `-- szip
	    |-- cfitsio
	    |-- boost
	    |-- wcslib
	    |   |-- boost
	    |   `-- flex
	    `-- bison

	cr
	|-- dal
	|   |-- plplot
	|   |   |-- python
	|   |   |   `-- boost
	|   |   `-- swig
	|   `-- casacore
	|       |-- hdf5
	|       |   `-- szip
	|       |-- cfitsio
	|       |-- boost
	|       |-- wcslib
	|       |   |-- boost
	|       |   `-- flex
	|       `-- bison
	|-- startools
	|   `-- root
	|-- mathgl
	|   |-- hdf5
	|   |   `-- szip
	|   |-- python
	|   |   `-- boost
	|   `-- swig
	`-- PyQt
	    `-- SIP
	\endverbatim

 */
