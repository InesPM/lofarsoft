#-----------------------------------------------------------------------------
# makedefs: Installation-specific definitions used by AIPS++ makefiles
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1997,1998,1999,2000,2003
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# This GNU makefile is read in by the makedefs file in the directory above
# this.  That "default makedefs" file defines default values of each and
# every variable required by the AIPS++ makefiles.  Those default values are
# overridden where necessary by redefining them in this file.
#
# Installation instructions:
#
#    A template version of this file was copied from the "install/linux_egcs"
#    directory into the site-specific AIPS++ system directory for this
#    architecture (this directory) by the 'configure' script as part of the
#    AIPS++ installation.
#
#    While default definitions are made in the default makedefs file in the
#    directory above this, certain platform-specific redefinitions may have
#    been included here to help make the installation easier.
#
#    You must carefully check all of the definitions made in the default
#    makedefs file (as well as the redefinitions made here) and if necessary,
#    correct them by making an overriding definition (or correction) here.
#    However,
#
#                  DO NOT MODIFY THE DEFAULT MAKEDEFS FILE -
#
#                         MODIFY THIS FILE INSTEAD
#
#    Certain of the defaults in the default makedefs file are expressed in
#    terms of another default using "recursively expanded" variables (defined
#    with '=') rather than "simply expanded" (defined with ':=').  For
#    example the TeX variables are defined in terms of "TEXROOT".  This may
#    allow this makedefs file to redefine a whole set of variables, for
#    example all of the TeX variables, simply by redefining one, TEXROOT.
#    However,
#
#           ALWAYS USE "SIMPLY EXPANDED" VARIABLES WITHIN THIS FILE
#
#    That is, always use ":=" to make the assignments.
#
# Original: 1996/08/30 by Mark Calabretta, ATNF
# $Id: makedefs.template,v 1.1 2004/02/01 17:03:18 wyoung Exp $
#=============================================================================

#-----------------------------------------------------------------------------
# This file should work on RedHat Linux 5.2 systems without
# modification and with a bit of tweaking on RedHat-5.1 system
# assuming that the additional software (lapack, pgplot etc.)
# available on the AIPS++ ftp site has been installed. It uses egcs as
# the compiler for C,C++ and Fortran (ie g77).
#-----------------------------------------------------------------------------

# Libraries and include paths.
#-----------------------------------------------------------------------------

# QT - for graphics work
QT4ROOT  := /usr/local/Trolltech/Qt-4.1.3
QT4LIB   := -F$(QT4ROOT)/lib -framework QtCore -framework QtGui -framework QtXML

# The C++ compiler.
#------------------
C++ROOT := /usr
CC := $(C++ROOT)/bin/gcc
C++ := $(C++ROOT)/bin/g++ -Wno-deprecated

PYTHONVER := 2.5
PYVERSION := 25
PYTHONROOT := /opt/local/Library/Frameworks/Python.framework/Versions/$(PYTHONVER)
PYTHONINCD := $(PYTHONROOT)/Headers
PYTHON := /opt/local/bin/pythonw
PYTHONLIBD := $(PYTHONROOT)
#PYTHONLIB := -Wl,-framework,Python
PYTHONLIB := $(PYTHONROOT)/Python
#PYTHONDEFS := -DAIPSROOT=\"$(AIPSROOT)\" -DAIPSARCH=\"$(word 2, $(AIPSPATH))\" -DAIPSSITE=\"$(word 3, $(AIPSPATH))\"
PYTHONDEFS := -DAIPSROOT=\"$(AIPSROOT)\" -DAIPSARCH=\"$(word 2, $(AIPSPATH))\" -DAIPSSITE=\"$(word 3, $(AIPSPATH))\" -DPYTHONROOT=\"$(PYTHONROOT)\" -DPYTHONVER=\"$(PYTHONVER)\" -DPYVERSION=$(PYVERSION)

CCMTOOLSROOT := /opt/local
CCMTOOLSINCD := $(CCMTOOLSROOT)/include
CCMTOOLSLIBD := $(CCMTOOLSROOT)/lib
CCMTOOLSLIB := -lCCM_Python -lWX_Utils_error -lWX_Utils_code -lWX_Utils_types
#
# these variables go into the setup.py file for building the casac.so. The single quotes (') are important
# for the setup.py script.

SETUPLIBS := '/opt/casa/darwin/lib', '/opt/local/lib', '/opt/local'
SETUPPYTHONLIB := 'python'
SETUPEXTRALINK := '/opt/local/lib/libCCM_Local_HomeFinder.a', '/opt/local/lib/libWX_Utils_types.a', '/usr/lib/libSystemStubs.a'

# lapack and blas are packaged together in vecLib framework
LAPACKROOT=/opt/local
LAPACKLIB := -Wl,-framework,Accelerate
BLASLIB :=  -Wl,-framework,Accelerate

# General external libraries. 
#---------------------------- 
PGPLOTROOT := /opt/local
PGPLOTINCD := $(PGPLOTROOT)/include
PGPLOTLIBD := $(PGPLOTROOT)/lib
XmPGPLOTINCD := $(PGPLOTROOT)/include
XmPGPLOTLIBD := $(PGPLOTROOT)/lib
XmPGPLOTLIB := -lcpgplot -lpgplot
TCLROOT  := /System/Library/Frameworks/Tcl.framework/
TCLINCD  := $(TCLROOT)/Headers
TCLLIB   := -Wl,-framework,Tcl
TKROOT   := /System/Library/Frameworks/Tk.framework/
TKINCD   := $(TKROOT)/Headers
TKLIB    := -Wl,-framework,Tk
TKROOT  := /System/Library/Frameworks/Tk.framework/
CFITSIOROOT := /opt/local
CFITSIOINCD := $(CFITSIOROOT)/include
CFITSIOLIBD := $(CFITSIOROOT)/lib
RPFITSROOT := /opt/local

CPATHROOT := /opt/casa/java/lib
JCLASSPATH := $(CPATHROOT)/freehep-j3d.jar
JCLASSPATH += $(JCLASSPATH):$(CPATHROOT)/xml-writer.jar:$(CPATHROOT)/jcommon-1.0.0.jar

# TCL (version 7.6 or later).
#TCLLIB  :=

# X11.
X11ROOT := /usr/X11R6

# Motif.
MotifROOT := /opt/local

# XPM (X Pixmap) library
XPMROOT  := $(X11ROOT)

# FORTRAN compiler.
# using native g77
F77ROOT := /opt/local/
F77 := $(F77ROOT)/bin/g77
FC := $(F77)
F77LIBD  :=  $(F77ROOT)/lib
F77LIB   := -lg2c

# Platform-specific libraries - always added.
ARCHLIBS := -L$(C++LIBD) -lstdc++ -L$(PYTHONLIBD) $(PYTHONLIB) -L$(CCMTOOLSLIBD) $(CCMTOOLSLIB) -L$(AIPSARCH)/lib -lSystemStubs -lwcs -lm  -Wl,-framework,Accelerate -L$(F77LIBD) $(F77LIB)

# External libraries required by particular AIPS++ packages.
#-----------------------------------------------------------
# RPFITS (required by ATNF).
RPFITSLIB := -lrpfits

#-----------------------------------------------------------------------------
# Compilation and linkage variables (Intel Mac)
#-----------------------------------------------------------------------------

# Preprocessor flags for system debug/optimized compilations.
CPPDBG   := -DAIPS_STDLIB  -DAIPS_LITTLE_ENDIAN -DAIPS_AUTO_STL -DAIPS_NO_LEA_MALLOC -DAIPS_DARWIN -DMACOSXBUILT -DAIPS_USEMATPLOTLIB
CPPSTD   := -DAIPS_STDLIB  -DAIPS_LITTLE_ENDIAN -DAIPS_AUTO_STL -DAIPS_NO_LEA_MALLOC -DAIPS_DARWIN -DMACOSXBUILT -DAIPS_USEMATPLOTLIB 

# C compiler flags for system debug/optimized compilations.
CC       := $(C++ROOT)/bin/gcc
CSTD    := -DAIPS_DARWIN -Wall -fPIC -pipe
COPTLVL := -g -O2
CDBGLVL := -ggdb
CPPDBG := $(CPPSTD) -pg

# C++ compiler flags for system debug/optimized compilations.
C++       := $(C++ROOT)/bin/g++ -Wno-deprecated
C++OPTLVL := -g -O2
C++STD    += -dynamic -pipe -fPIC -Wall -Wno-non-template-friend -Woverloaded-virtual -Wcast-align -Wno-comment
C++DBGLVL := -ggdb
C++DBG    += $(C++OPT)

# Use do-it-yourself template instantiation.
#TEMPLATES := diy

# FORTRAN compiler flags for system debug/optimized compilations.
FCDBG    += -fPIC
FCOPTLVL := -g -O2
FCOPT    += -fPIC

# Link flags for system debug/optimized compilations; these are passed to
# the C++ compiler.
# LDDBG := -Xlinker -rpath -Xlinker $(AIPSARCH)/lib
LDOPT := $(LDDBG)

LDSOPTS := -single_module -dynamiclib -undefined dynamic_lookup
SFXSHAR := dylib
#MKSO := $(C++ROOT)/bin/g++ -dynlib

# Object library utilities.
RANLIB := ranlib

# Control table for building AIPS++ libraries.  Four keywords are recognized:
#    defeat:  The library will not be built (and if an old version exists it
#             will be deleted).
#    static:  The static library is built and is the one linked to.
#    shatic:  The static and shared libraries are built but the static library
#             is the one linked to.
#    shared:  The static and shared libraries are built and the shared library
#             is the one linked to.
#
#                    C++            C          FORTRAN
#                 dbg    opt    dbg    opt    dbg    opt
#               ------------- ------------- -------------
#LIBcasac       := defeat shatic defeat defeat defeat defeat
#LIBcasa        := defeat shatic defeat defeat defeat defeat
#LIBtools       := defeat shatic defeat defeat defeat defeat
#LIBscimath     := defeat shatic defeat defeat defeat defeat
#LIBtables      := defeat shatic defeat defeat defeat defeat
#LIBmeasures    := defeat shatic defeat defeat defeat shatic
#LIBmsfits      := defeat shatic defeat defeat defeat defeat
#LIBfits        := defeat shatic defeat defeat defeat defeat
#LIBgraphics    := defeat shatic defeat defeat defeat defeat
#LIBlattices    := defeat shatic defeat defeat defeat defeat
#LIBcoordinates := defeat shatic defeat defeat defeat defeat
#LIBcomponents  := defeat shatic defeat defeat defeat defeat
#LIBimages      := defeat shatic defeat defeat defeat defeat
#LIBms          := defeat shatic defeat defeat defeat defeat
#LIBmsvis       := defeat shatic defeat defeat defeat defeat
#LIBcalibration := defeat shatic defeat defeat defeat defeat
#LIBionosphere  := defeat shatic defeat defeat defeat static
#LIBflagging    := defeat shatic defeat defeat defeat defeat
#LIBdish        := defeat shatic defeat defeat defeat defeat
#LIBsimulators  := defeat shatic defeat defeat defeat defeat
#LIBsynthesis   := defeat shatic defeat defeat defeat shatic
#LIBtasking     := defeat defeat defeat defeat defeat defeat
#LIBtrialdisplay  := defeat shatic defeat defeat defeat defeat
LIBnrao          := defeat shatic defeat defeat defeat defeat
#LIBnpoi          := defeat defeat defeat defeat defeat defeat
#LIBalma          := defeat shatic defeat defeat defeat defeat
#LIBatnf          := defeat defeat defeat defeat defeat defeat
#LIBnfra          := defeat defeat defeat defeat defeat defeat
#LIBbima          := defeat defeat defeat defeat defeat defeat
#LIBhia           := defeat defeat defeat defeat defeat defeat

AUXILIARY := display nrao
#LINKsynthesis   := synthesis synthesis_f calibration graphics ms msfits msvis images components coordinates lattices fits measures tables scimath casac casa
LINKnrao   := nrao calibration graphics ms msfits msvis images components coordinates lattices fits measures tables scimath scimath_f casac casa
#LINKms          := ms msfits measures tables scimath scimath_f casac casa
#LINKmsfits      := msfits ms msfits fits measures tables scimath scimath_f casac casa
#LINKmsvis       := msvis msfits ms fits measures tables scimath casac casa

LINKtables += graphics
LINKimages += graphics
LINKflagging += graphics
LINKms += graphics
LINKmeasures += graphics
LINKtools += graphics
LINKcalibration += graphics
LINKatnf += graphics


XLIBLIST_shared_display := WCSLIB X11 MIRLIB LAPACK F77
XLIBLIST_shared_synthesis += PGPLOT X11
XLIBLIST_shared_graphics += PGPLOT X11
XLIBLIST_shared_scimath += CCMTOOLS PGPLOT X11
XLIBLIST_shared_graphics += PGPLOT X11
XLIBLIST_shared_tables += PYTHON CCMTOOLS
XLIBLIST_shared_tools += PYTHON CCMTOOLS
XLIBLIST_shared_casac += PYTHON CCMTOOLS

WCSLIBINCD  := $(AIPSROOT)/code/casa
WCSLIBLIB := -lwcs

# Absolute pathnames of perl-4 and perl-5 executables (if available).
PERL4 := /usr/bin/perl
PERL5 := /usr/bin/perl

# TeX, dvips, and MetaFont paths.
#--------------------------------
TEXROOT    := /usr/local/teTeX/
TEXLROOT   := /usr/local/teTeX/share/texmf.tetex
TEXFONTS   := $(TEXLROOT)/fonts
TEXFORMATS := $(TEXLROOT)/web2c
TEXINPUTS  := $(TEXLROOT)/tex
TEXPOOL    := $(TEXLROOT)/web2c
TEXPKS     := $(TEXFONTS)/pk
MFBASES    := $(TEXLROOT)/web2c
MFINPUTS   := $(TEXLROOT)/metafont:$(TEXFONTS)/source
MFPOOL     := $(TEXLROOT)/web2c

LATEX2HTML := $(TEXROOT)/bin/i386-apple-darwin-current/tex4ht -init_file $(AIPSROOT)/code/install/docutils/latex2html-init

# Set these variables to get local icons in the html files generated by
# latex2html
ICONSERVER := http://www.nrao.edu/icons/latex2html
ICONS2LOCAL := $(AIPSARCH)/bin/redoicons.sh              

# Variables which tell the makefiles what to do and how to do it
#-----------------------------------------------------------------------------
# Command for benchmarking the rebuild (usually 'adate -l').
TIMER := adate -l

# Unset this to defeat document compilation.
DOCSYS :=

# Unset this to defeat document extraction from C++ sources.
DOCEXTR :=

# What consortium packages to build (atnf bima hia nfra nral nrao tifr).
CONSORTIA := 

#-----------------------------------------------------------------------------
# The remaining definitions are programmer variables for code development.
# These are not required for production-line systems.
#-----------------------------------------------------------------------------
ifeq "$(MAKEMODE)" "programmer"
   # Alternate definitions for CPPFLAGS.
   ifeq "$(CPPFLAGS)" "alt1"
      override CPPFLAGS := $(CPPOPT) $(EXTRA_CPPFLAGS)
   endif

   # C++ compiler flags for programmer compilations.
   ifdef OPT
      C++FLAGS := $(C++OPT) -Wall
   else
      C++FLAGS := $(C++DBG) -Wall
   endif

   # Where to put binaries for programmer compilations.
   ifdef OPT
      PGMRLIBD := $(wildcard $(PGMRARCH)/lib)
      PGMRBIND := $(wildcard $(PGMRARCH)/bin)
   else
      PGMRLIBD := $(wildcard $(PGMRARCH)/libdbg)
      PGMRBIND := $(wildcard $(PGMRARCH)/bindbg)
   endif

   # Alternate definitions for C++FLAGS.
   ifeq "$(C++FLAGS)" "alt1"
      override CPPFLAGS := $(CPPOPT) $(EXTRA_CPPFLAGS)
      PGMRBIND := $(wildcard $(PGMRARCH)/bin)
      PGMRLIBD := $(wildcard $(PGMRARCH)/lib)
      override C++FLAGS := $(C++OPT) -Wall
   endif

   # Extra compiler flags.
   C++FLAGS += $(EXTRA_C++FLAGS)
endif
