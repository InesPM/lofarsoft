/*-------------------------------------------------------------------------*
 | $Id:: templates.h 391 2007-06-13 09:25:11Z baehren                    $ |
 *-------------------------------------------------------------------------*
 ***************************************************************************
 *   Copyright (C) 2007                                                    *
 *   Lars B"ahren (bahren@astron.nl)                                       *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

// ==============================================================================
//
//  Main page of the Doxygen documentation
//
// ==============================================================================

/*!
  \mainpage LOFAR User Software

  <ul>
    <li>\ref configure_build_code
    <li>\ref configure_build_install
    <li>\ref build_targets_usg
    <li>\ref build_targets_external
    <li>\ref build_targets_doc
    <li>\ref build_targets_clean
    <li>\ref external_packages
    <li>\ref faq
  </ul>

  <hr>

  \section configure_build_code Organization of the code
	
  Once the check-out is completed, you will find the following directory structure
  on your disk:

  \verbatim
  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |   |-- cmake
  |   |-- scripts
  |   `-- templates
  |-- external
  |   |-- cfitsio
  |   |-- casacore
  |   |-- hdf5
  |   |-- plplot
  |   |-- swig
  |   `-- wcslib
  `-- src
      |-- contrib
      |-- CR-Tools
      |-- DAL
      |-- pybdsm
      `-- RM
   \endverbatim

   In this:
   <ul>
     <li>\b lofarsoft is the root of the User Software code tree - go there if you
     want to synchronize your local working version against the repository.
     <li>\b build is used for building individual packages in the code
     distribution; using a separate directory for this purpose makes it easy to
     simply erase all compile and link attempts and start again from a clean plate.
     <li>\b devel_common hold common tools for development; this includes e.g.
     the find scripts for CMake or file templates for creating new C++ classes. Unless
     you consider collaborating on the framework, you will not need to touch this
     (but you will need it).
     <li>\b doc contains a local version of the Doxygen-based source code
     documentation; just go in there, fire up Doxygen and get an up-to-date version
     of the source code documentation.
     <li>\b external hosts the various external packages which will be required
     to build parts of the LOFAR User Software.
     <li>\b src contains the source code of the various projects and packages 
     developed and written within the framework of the USG. The main components are:
     <ul>
       <li><a href="group__DAL.html">DAL</a> - The <i>Data Access Library</i> is the
       interface for the creation of and access to LOFAR's standard data products.
       <li><a href="group__CR.html">CR-Tools</a> - Tools for the analysis of cosmic
       ray data.
       <li><a href="group__pybdsm.html">pybdsm</a> - <i>Blob detection and source
       modelling</i> package developed by the Surveys KSP.
       <li><a href="group__RM.html">RM</a> - Rotation-measure synthesis imaging
       package developed by the Cosmic Magnetism KSP.
     </ul>
   </ul>

   <hr>

   \section configure_build_install Basic installation from source

   In order to install modules/packages the following simple steps are required:
   <ol>
     <li><b>Get a working copy of the source code</b> from the USG Subversion
     repository:
     \verbatim
     svn co http://usg.lofar.org/svn/code/trunk lofarsoft
     \endverbatim
     <li><b>Set up your environment</b>: Add the location of the new
     executables to your PATH variable:
     \code
     # csh, tcsh
     setenv LOFARSOFT <root directory of code tree>
     source $LOFARSOFT/devel_common/scripts/init.csh

     # sh, bash
     export LOFARSOFT=<root directory of code tree>
     . $LOFARSOFT/devel_common/scripts/init.sh
     \endcode
     If you want this information to be persistent, you should add the setting
     to the configuration file of your shell; for \e bash users this is
     done in either <tt>$HOME/.profile</tt> or <tt>$HOME/.bashrc</tt> -- users
     of \e tcsh or \e csh need to add the appropriate statement to
     <tt>$HOME/.cshrc</tt>.
     <li>Change into the \e build directory and run the \e bootstrap script:
     \code
     cd build
     ./bootstrap
     \endcode
     The script will check if there is a recent enough version of CMake available
     <li>Run \e make for the package/module in question, e.g. for the
     <a href="group__DAL.html">Data Access Library</a>
     \code
     make dal
     \endcode
     Typing
     \code
     make help
     \endcode
     will provide you with a list of available build targets.
   </ol>

   <hr>

   \section build_targets_usg Targets to build User Software packages

   The following targets can be used to build one (or multiple, in case of
   dependencies) of the package developed and written by the User Software
   Group:

   <table border=0>
     <tr>
	<td class="indexkey" width="20%">Target</td>
	<td class="indexkey" width="80%">Description</td>
     </tr>
     <tr valign="top">
	<td bgcolor="dddddd">\b dal</td>
     	<td bgcolor="eeeeee">The <a href="group__DAL.html">Data Access Library</a>
	(DAL).</td>
     </tr>
     <tr valign="top">
        <td bgcolor="dddddd">\b cr</td>
     	<td bgcolor="eeeeee">The <a href="group__CR.html">CR-Tools</a> package.
	The configuration script enables selection of the following features from
	the top-level directory: \e CR_WITH_GUI and \e CR_WITH_STARTOOLS - both
	of which are disabled by default. See the page \ref crtools_build_parameters
	for further description.</td>
     </tr>
     <tr valign="top">
	<td bgcolor="dddddd">\b lasa</td>
     	<td bgcolor="eeeeee">The <a href="group___l_a_s_a.html">LOFAR Air Shower
	Array</a> (LASA).</td>
     </tr>
     <tr valign="top">
       <td bgcolor="dddddd">\b pybdsm</td>
       <td bgcolor="eeeeee">Python version of the <i>Blob detection and source
       modelling</i> package developed by the Surveys KSP.</td>
     </tr>
     <tr valign="top">
	<td bgcolor="dddddd">\b rm</td>
     	<td bgcolor="eeeeee">Rotation-measure synthesis imaging package developed
	by the Cosmic Magnetism KSP.</td>
     </tr>
   </table>

   <hr>

   \section build_targets_external Targets to build external packages

   <table border=0>
     <tr>
	<td class="indexkey" width="20%">Target</td>
	<td class="indexkey" width="80%">Description</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b armadillo</td>
       <td>C++ linear algebra library</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b bison</td>
       <td>GNU Project parser generator (yacc replacement)</td>
     </tr>
     <tr bgcolor="eeeeee">
     	 <td bgcolor="dddddd">\b blitz</td>
     	 <td></td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b boost</td>
       <td>A free peer-reviewed portable C++ source libraries. Amongst many
       other things it contains \e Boost.Python, a C++ library which enables
       seamless interoperability between C++ and the Python programming
       language.</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b casacore</td>
       <td></td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b cfitsio</td>
       <td></td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b flex</td>
       <td>Fast lexical analyzer generator</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b hdf5</td>
       <td></td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b mathgl</td>
       <td>Library for the generation of scientific plots</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b plplot</td>
       <td>Library for the generation of scientific plots</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b pyrap</td>
       <td>Python bindings for casacore</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b qt</td>
       <td>A cross-platform application and UI framework</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b root</td>
       <td>A set of OO frameworks with all the functionality needed to handle
       and analyze large amounts of data in a very efficient way.</td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b sip</td>
       <td></td>
     </tr>
     <tr bgcolor="eeeeee">
       <td bgcolor="dddddd">\b </td>
       <td></td>
     </tr>

	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b startools</td>
	    <td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b szip</td>
	    <td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b swig</td>
	    <td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b wcslib</td>
	    <td>Library implementing the WCS standard, central to a number of
		astronomical data reduction packages.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b wcstools</td>
	    <td></td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b wget</td>
	    <td>[optional] Non-interactive network downloader. GNU Wget is a
	free utility for non-interactive download of files from the Web. It supports
	HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP proxies.</td>
	  </tr>
	  <tr bgcolor="eeeeee">
	    <td bgcolor="dddddd">\b zlib</td>
	    <td>Compression/decompression library.</td>
	  </tr>
	</table>
	
	\b Note: Some of the above listed targets may not be present in your setup;
	if this is the case, then the related system package is installed already.

   <hr>

   \section build_targets_doc Targets for generation of documentation

   <table border=0>
     <tr>
	<td class="indexkey" width="20%">Target</td>
	<td class="indexkey" width="80%">Description</td>
     </tr>
     <tr bgcolor="eeeeee" valign="top">
       <td bgcolor="dddddd">\b doc</td>
       <td>Extract source code documentation using Doxygen (the pages you are
       looking at right now), generate documentation for CMake and CTest.</td>
     </tr>
   </table>

   <hr>

   \section build_targets_clean Targets for cleaning up directories

   <table border=0>
     <tr>
	<td class="indexkey" width="20%">Target</td>
	<td class="indexkey" width="80%">Description</td>
     </tr>
     <tr bgcolor="eeeeee" valign="top">
       <td bgcolor="dddddd">\b clean</td>
       <td></td>
     </tr>
     <tr bgcolor="eeeeee" valign="top">
       <td bgcolor="dddddd">\b clean-build</td>
       <td>Clean up the build directory; this will remove everything except the
       original files obatined with a fresh check-out (which of course means
       you will need to again run <tt>./bootstrap</tt> before any further
       action).</td>
     </tr>
     <tr bgcolor="eeeeee" valign="top">
       <td bgcolor="dddddd">\b clean-doc</td>
       <td>Clean up the documentation directory; this will remove all the
       created HTML files and images created by Doxygen.</td>
     </tr>
     <tr bgcolor="eeeeee" valign="top">
       <td bgcolor="dddddd">\b clean-release</td>
       <td>Clean up the \e release directory and put it back into the state it
       was right after check-out of your working copy. \b Caution: If your
       version of CMake is taken from \e release/bin you will need to again
       run <tt>./bootstrap</tt>.</td>
     </tr>
   </table>
*/

// ==============================================================================
//
//  Group definitions
//
// ==============================================================================

//_______________________________________________________________________________
//                                                                         pyBDSM

/*!
  \defgroup pybdsm pyBDSM : Python version of the BDSM software
	
  \verbatim
  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |-- external
  `-- src
      |-- contrib
      |-- CR-Tools
      |-- DAL
      `-- pybdsm      <-- you are here
  \endverbatim
*/

//_______________________________________________________________________________
//                                                                        contrib

/*!
  \defgroup contrib Collection of user contributed code
	
  \verbatim
  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |-- external
  `-- src
      |-- contrib        <-- you are here
      |   |-- shapelets
      |   |-- testing
      |   `-- utilities
      |-- CR-Tools
      |-- DAL
      `-- pybdsm
  \endverbatim
*/

//_______________________________________________________________________________
//                                                                     Star-Tools

/*!
  \defgroup startools Star-Tools function collection

  \verbatim
  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |-- external
  |   |-- casacore
  |   |-- hdf5
  |   `-- startools   <-- you are here
  `-- src
  \endverbatim
*/

//_______________________________________________________________________________
//                                                                   RM Synthesis

/*!
  \defgroup RM RM-Synthesis package

  \verbatim
  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |-- external
  `-- src
      `-- RM          <-- you are here
  \endverbatim

  <h3>External packages</h3>

  - \ref external_packages_armadillo
  - \ref external_packages_itpp
*/

//_______________________________________________________________________________
//                                                                           LASA

/*!
  \defgroup LASA LOFAR Air-Shower Array (LASA)

  - \ref lasa_setup
  - \ref lasa_build
  - \ref lasa_update
  - \ref lasa_commit

  \section lasa_setup Setting up your working copy

  \b Note: This essentially is the  same procedure as already described in the
  \ref configure_build_install.

  <ol>
    <li>For the initial checkout of your working copy run:
    \verbatim
    svn co http://usg.lofar.org/svn/code/trunk lofarsoft
    \endverbatim
    Once the checkout is complete, you will find a new directory \b lofarsoft
    with the following sub-structure:
    \verbatim
    lofarsoft
    |-- data
    |-- doc
    |-- release
    |-- build
    |-- devel_common
    |-- external
    `-- src
        `-- LASA
            |-- analysis
	    `-- test
    \endverbatim
    The source code is in \b src/LASA, while the compile and installation is done
    from \b build.

    <li>Set up your environment: Add the location of the new executables to your
    PATH variable:
    \verbatim
    # csh, tcsh
    setenv LOFARSOFT <root directory of code tree>
    source $LOFARSOFT/devel_common/scripts/init.csh

    # sh, bash
    export LOFARSOFT=<root directory of code tree>
    . $LOFARSOFT/devel_common/scripts/init.sh
    \endverbatim
    If you want this information to be persistent, you should add the setting to
    the configuration file of your shell; for bash users this is done in either
    $HOME/.profile or $HOME/.bashrc – users of tcsh or csh need to add the 
    appropriate statement to $HOME/.cshrc. 
  </ol>

  \section lasa_build Compile the software

  <ol>
    <li>Change into the \b build directory and run the \e bootstrap script:
    \verbatim
    cd build
    ./bootstrap
    \endverbatim
    The major job of the script is to check whether or not a recent version of
    CMake is available on your system; if this is not the case, CMake will be
    build from the provided sources and installed into \b release/bin (which 
    means that of course you should have that directory in your PATH).

    <li>Build the components  of the LASA software package:
    \verbatim
    make lasa
    \endverbatim

    <li>Once the initial build of the package is done -- which also includes
    checking the presence (and if required  build) of external packages, the
    fastest route to build the LASA software while developing and writing new
    code, is by running \e make within the \b build/lasa directory:
    \verbatim
    cd build/lasa
    make
    \endverbatim
  </ol>

  \section lasa_update Update your working copy

  <ol>
    <li>The savest way to update your existing working copy is to run
    \verbatim
    cd build
    make update
    \endverbatim
    from the \e build directory; this will ensure, that not only you will be
    picking up changes in the source code, but also adjustments to the build
    environment.
  </ol>

  \section lasa_commit Committing changes

  Once  you have made changes to the source code, checking them back into the
  repository works as follows:

  <ol>
    <li>Change into the directory holding the source code:
    \verbatim
    cd src/LASA
    \endverbatim

    <li>Commit the changes by typing
    \verbatim
    svn commit
    \endverbatim
    or
    \verbatim
    svn commit -m "Your short comment about the changes made."
    \endverbatim
    While the first variant will open an editor window for you to type in a
    short commit report, the second variant allows you to directly provide such
    a short statement -- describing what changes were done to the code -- from
    the command line.
  </ol>
*/

