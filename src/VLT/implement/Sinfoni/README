$Id: README,v 1.5 2006/05/22 12:24:30 loose Exp $

Introduction
============
This file contains useful information for building the Sinfoni/PSF
software.


Requirements
============
In order to build the software, you will first need to install the following
software packages.

* GCC (version 3.2.2 or higher)
* cfitsio library (version 2.490 or higher)
    http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html
* CCfits libary (version 1.2 or higher) 
    http://heasarc.gsfc.nasa.gov/docs/software/fitsio/CCfits/
* Blitz++ library (version 0.7 or higher) 
    http://www.oonumerics.org/blitz/
* FFTW library (version 3.0.1 or higher)
    http://www.fftw.org/

Note: You need to build both the single and double precision library of
      FFTW. To do so, you must run `configure; make; make install' twice;
      once using the configure option `--enable-single'.

The code was built and tested successfully with the versions that are
mentioned here explicitly. We assume that it will also compile and run with
newer versions of the different software packages.


Optional requirements
=====================
* GNU libtool (version 1.4 or higher)
* GNU autoconf (version 2.57 or higher)
* GNU automake (version 1.6 or higher)

These tools are only needed when you want to use configure.

* Doxygen (version 1.2.18 or higher)
* Latex2e plus the packages `amsmath' and `euscript'

These tools are only needed when you want to rebuild the documentation.


Building the software
=====================
In what follows, we will assume that you will use the GNU autotools to create
machine specific Makefiles. You should take the following steps:

1. From the directory where you extracted the source tar ball, issue the
   following command:

      setenv SINFONI_ROOT $PWD/LOFAR/VLT/Sinfoni

2. Create a symbolic link `external' that points to where the external
   packages were installed. For example:

      ln -s /usr/local $SINFONI_ROOT/external

   Please note that the current `configure.in' file assumes that the external
   packages are installed in the directory $SINFONI_ROOT/external/<package>. 
   So, for example, `cfitsio' should be installed in `/usr/local/cfitsio'.

3. If you installed the Sinfoni data files in a directory other than
   `LOFAR/VLT/Sinfoni/data', you should also create a symbolic link `data':

      ln -s <where/you/installed/Sinfoni/data/files> $SINFONI_ROOT/data

4. Change directory to $SINFONI_ROOT and type 

      ./bootstrap

5. Create a directory `build/<compiler>_<debug|opt>', where <compiler> denotes
   the compiler you are using, and `debug' or `opt' denote whether you want to
   build a debug or optimized version. For example:

      mkdir -p build/gnu_opt

   Currently, only GNU gcc is supported, but you can add your favorite
   compiler by editing the file `LOFAR/autoconf_share/variants'.

6. Change directory to `build/gnu_opt' and run `lofarconf', using at least the
   following command line options

      ../../lofarconf --without-threads

   Enter `../../lofarconf --help' for an extensive list of options.

7. Build the software by typing 

      make

8. Optionally build and run the test programs by typing

      make check

   Note that most test programs will fail due to rounding errors, if you've
   built Sinfoni using single precision floating point numbers (i.e. by
   uncommenting `#define USE_SINGLE_PRECISION' in the file `Config.h').
