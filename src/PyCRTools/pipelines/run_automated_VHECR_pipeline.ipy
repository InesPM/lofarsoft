"""
On Altair this can be doen with a single line:

sudo chmod a+x $LOFARSOFT/src/PyCRTools/pipelines/cr_event.py

$LOFARSOFT/src/PyCRTools/pipelines/cr_event.py /data/VHECR/LORAtriggered/data/VHECR_LORA-*.h5 --lofarmode=LBA_OUTER --outputdir=/data/VHECR/LORAtriggered/results/20100704 --loradir /data/VHECR/LORAtriggered/LORA --lora_logfile LORAtime4 --max_data_length=12289024 --min_data_length=1 --search_window_width=5000 --nsigma=3 -R >& logfile.txt &

tail -f logfile.txt

Just for the good guys:

$LOFARSOFT/src/PyCRTools/pipelines/cr_event.py 'VHECR_LORA-20110716T094509.665Z*.h5' 'VHECR_LORA-20110716T025339.597Z*.h5' 'VHECR_LORA-20110714T174749.986Z*.h5' 'VHECR_LORA-20110612T231913.199Z*.h5' 'VHECR_LORA-20110612T235954.184Z*.h5' 'VHECR_LORA-20110626T221820.368Z*.h5' --datadir=/data/VHECR/LORAtriggered/data --lofarmode=LBA_OUTER --outputdir=/data/VHECR/LORAtriggered/newresults --loradir /data/VHECR/LORAtriggered/LORA --lora_logfile LORAtime4 --max_data_length=12289024 --min_data_length=1 --search_window_width=5000 --nsigma=3 -R >& logfile-good-b.txt &

$LOFARSOFT/src/PyCRTools/pipelines/cr_event.py 'VHECR_LORA-20110716T094509.665Z*.h5' 'VHECR_LORA-20110716T025339.597Z*.h5' 'VHECR_LORA-20110714T174749.986Z*.h5' 'VHECR_LORA-20110626T221820.368Z*.h5' --datadir=/data/VHECR/LORAtriggered/data --lofarmode=LBA_OUTER --outputdir=/data/VHECR/LORAtriggered/newresults --loradir /data/VHECR/LORAtriggered/LORA --lora_logfile LORAtime4 --max_data_length=12289024 --min_data_length=1 --search_window_width=5000 --nsigma=3 -R >& logfile-good-b.txt &


$LOFARSOFT/src/PyCRTools/pipelines/cr_event.py 'VHECR_LORA-20110613T051515.914Z*.h5' --datadir=/data/VHECR/LORAtriggered/data --lofarmode=LBA_INNER --outputdir=/data/VHECR/LORAtriggered/newresults --loradir /data/VHECR/LORAtriggered/LORA --lora_logfile LORAtime4 --max_data_length=12289024 --min_data_length=1 --search_window_width=5000 --nsigma=3 -R >& logfile-good.txt &

Interactive plotting of LDF in python (or use trun):

tload "ldf"
tpar topdir="/data/VHECR/LORAtriggered/newresults"
tpar events=["VHECR_LORA-20110714T174749.986Z"]
go


VHECR_LORA-20110612T231913.199Z
VHECR_LORA-20110612T235954.184Z
VHECR_LORA-20110613T051515.914Z
VHECR_LORA-20110626T221820.368Z
VHECR_LORA-20110714T174749.986Z
VHECR_LORA-20110716T025339.597Z
VHECR_LORA-20110716T094509.665Z

"""
nogui=True
from pycrtools import *
from pycrtools import lora
from pycrtools import xmldict
import os


processall=False
processnew=True
reprocesslora=False
includefilter=[""]
# Add problematic eventto extrude list (this should eventually be put into a database/external list,
# i.e. not hardcoded in pipeline)
excludefilter=["20110610T","VHECR_LORA-1969","killed","test","temp","dump","manual","trash"]
excludefilter.append("L31774")
excludefilter.append("CS013") # Exclude this as no antenna array configuration is available yet.
excludefilter.append("CS028") # Exclude this as no antenna array configuration is available yet.
excludefilter.append("20110613T051515.914")
excludefilter.append("20111019T") # Long event, (MSSS event?) Eventually crashed due to indexing error new_badantennalist cr_event.py:668
excludefilter.append("20110813T190822.655") # Zero values cause exception when executing logplot
excludefilter.append("20110821T151958.145Z-002") # Zero values cause exception when executing logplot
excludefilter.append("20111023T193814.232Z")
excludefilter.append("20111024T014841.773Z") # LORA trigger comes too late


def get_file_metadata(filename):
    """Get metadata from a LOFAR data file.

    This function returns the project name, the station id and the
    timestamp of the LOFAR data file.

    =========== ====================
    Parameter   Description
    =========== ====================
    *filename*  Full filename of the LOFAR datafile.
    =========== ====================
    """
    project_name = "VHECR_LORA"
    station_id = "UNDEFINED"
    time_stamp = "UNDEFINED"

    try:
        datafile=open(filename);
    except RuntimeError:
        print "ERROR opening file - skipping this file!"
        return (project_name, station_id, time_stamp)

    if datafile:

        timesec=datafile["TIME"][0]
        timestr=time.strftime("%Y%m%dT%H%M%S",time.gmtime(timesec))

        timems = int(datafile["SAMPLE_INTERVAL"][0]*datafile["SAMPLE_NUMBER"][0]*1000)
        timems = str(timems).zfill(3) # make 3 digits with leading zeros if needed.
        # NOTE: chosen to take int part of time in ms; i.e. not rounding to nearest ms.

        time_stamp=timestr+"."+timems+"Z"

        station_id = "%03d" %(datafile["CHANNEL_ID"][0]/1000000)

        datafile = 0

    return (project_name, station_id, time_stamp)


def get_results(filename,outputdir,pol=0):
    current_polarization=pol
    station=""
    timestamp=""
    time_stamp=""
    (rootfilename,fileextensions)=os.path.splitext(filename)

    # Get metadata from file
    (project_name, station_name, time_stamp) = get_file_metadata(filename)

    outputdir_expanded=os.path.expandvars(os.path.expanduser(outputdir))
    topdir_name=project_name+"-"+time_stamp
    reldir_from_event = os.path.join("pol"+str(current_polarization),station_name)
    outputdir_event=os.path.join(outputdir_expanded,topdir_name)
    outputdir_with_subdirectories=os.path.join(outputdir_event,reldir_from_event)

    result_xml_file=os.path.join(outputdir_with_subdirectories,"results.xml")
    result_html_file=os.path.join(outputdir_with_subdirectories,"index.html")

    # print "result XML file: ", result_xml_file

    if os.path.isfile(result_xml_file):
        res=xmldict.load(result_xml_file)
        return [True, res]
    if os.path.isfile(result_html_file):
        return [True, None]
    else:
        return [False, None]


def isprocessed(filename,outputdir):
    """Check if a data file is already processed.

    This function returns *True* if a results file already exists,
    i.e. the file is already processed.  Otherwise *False* is
    returned.

    =========== ====================
    Parameter   Description
    =========== ====================
    *filename*  Name of the LOFAR datafile.
    *outputdir* Path of the output directory.
    =========== ====================
    """
    if get_results(filename,outputdir,0)[0] and get_results(filename,outputdir,1)[0]:
        return True
    else:
        return False


def isLORAdata(filename,outputdir):
    """Check if LORA data is available for the LOFAR data file.

    If LORA data is available for the provided LOFAR data file this
    method returns *True*, if not *False* is returned.

    =========== ====================
    Parameter   Description
    =========== ====================
    *filename*  Name of the LOFAR datafile.
    *outputdir* Path of the output directory.
    =========== ====================
    """
    res=get_results(filename,outputdir,0)[1]
    if res: #already processed
        if not res["pulse_direction_lora"]: #No lora direction given
             if lora.loraInfo(res["TIME"]): #lora data available
                 return True
    return False


def infilter(filename,filters):
    """Check if the filename matches any of the provided filters.

    This function returns *True* if the filename matches at least one
    filter in the filter list. Otherwise *False* is returned.

    =========== ====================
    Parameter   Description
    =========== ====================
    *filename*  Name of the LOFAR datafile.
    *filters*   List of filters
    =========== ====================
    """
    if not isinstance(filters,type([])):
        if filter in filename:
            return True
    else:
        return True in [f in filename for f in filters if len(f)>0]


datadir="/data/VHECR/LORAtriggered/data/"
#candidates=["VHECR_LORA-20110716T094509.665Z","VHECR_LORA-20110716T025339.597Z","VHECR_LORA-20110714T174749.986Z","VHECR_LORA-20110612T231913.199Z","VHECR_LORA-20110612T235954.184Z","VHECR_LORA-20110626T221820.368Z"]
blocksize=65536
myoutputdir="/data/VHECR/LORAtriggered/results/"
fname=""
fname2=""
files = filter(lambda f:"h5" in f, os.listdir(datadir))

for f in files:
    if infilter(f,excludefilter):
        continue
    if processall:
        fname+=f+" "
        continue
    if infilter(f,includefilter):
        fname+=f+" "
        continue
    else:
        if isprocessed(datadir+f,myoutputdir):
            if reprocesslora:
                if isLORAdata(datadir+f,myoutputdir):
                    fname+=f+" "
                    continue
        else:
            if processnew:
                print "new", f
                fname+=f+" "
                continue


lofarmode="LBA_OUTER"

run $PYP/pipelines/cr_event.py $fname -d $datadir --lofarmode=$lofarmode --outputdir=$myoutputdir --blocksize=$blocksize --search_window_width=5000 --nsigma=3  --nopause --max_data_length=12289024

#lofarmode="LBA_INNER"
#fname=datadir+"VHECR_LORA-20110613T051515.914Z*.h5"
#run $PYP/pipelines/cr_event.py $fname --lofarmode=$lofarmode --outputdir=$myoutputdir --nopause --blocksize=$blocksize --search_window_width=5000 --nsigma=3 y-q

