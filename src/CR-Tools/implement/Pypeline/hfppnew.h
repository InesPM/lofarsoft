/*
To try the preprocessing and get some minimal documentation see hfppnew-test.h

To run a file with our system, first get the compile flags:

cd $LOFARSOFT/build/cr; export HFLAGS="`make -n hfget | grep hfanalysis | gawk '/^* /{next}/-I/{match($0," -I"); s=substr($0,RSTART); match(s," -o"); s2=substr(s,0,RSTART); print s2}'`"; cd $GUI

export HFLAGS="-I$LOFARSOFT/build/cr -I$LOFARSOFT/src/CR-Tools/implement -I$LOFARSOFT/release/lib/python2.6/site-packages/numpy/core/include -I$LOFARSOFT/release/include/python/num_util -I/sw/include -I$LOFARSOFT/release/include -I$LOFARSOFT/release/include/cfitsio -I$LOFARSOFT/release/include/dal -I$LOFARSOFT/release/include/hdf5 -I/opt/local/include -I/sw/include/python2.6 -I$LOFARSOFT/release/include/casacore -I/opt/local/include/qt4-mac -I/opt/local/include/qt4-mac/QtGui -I$LOFARSOFT/build/cr/implement -F/sw/lib/qt4-mac/lib -pipe -g -D_REENTRANT -w -fpermissive -DQT_GUI_LIB -DQT_CORE_LIB -I$LOFARSOFT/src/CR-Tools/implement/GUI -I/sw/include/gtk-2.0 -I$LOFARSOFT/release/include -I$LOFARSOFT/build/external/boost/boost"

Then call gcc, just executing the preprocessor and leaving comments in
place (works for the test file also without the HFLAGS if one adds
-I$LOFARSOFT/release/include):

gcc -E -C -P -D H_DEBUG_CPP $HFLAGS -I. $LOFARSOFT/src/CR-Tools/implement/Pypeline/hfppnew-test.cc | gawk '{gsub(" *\\<_H_NL_\\> *","\n"); print}' > hfppnew.doc.txt
*/

#ifndef HFPP_H
#define HFPP_H

//This allows one to generate an output where newlines are inserted by another preprocessor
#ifndef H_DEBUG_CPP
#define _H_NL_
#endif

#include <boost/preprocessor/seq.hpp>
#include <boost/preprocessor/enum.hpp>
#include <boost/preprocessor/tuple.hpp>
#include <boost/preprocessor/list.hpp>
#include <boost/preprocessor/repeat.hpp>
#include <boost/preprocessor/comparison.hpp>
#include <boost/preprocessor/facilities/expand.hpp>
#include <boost/preprocessor/stringize.hpp>

//Definitions of Operators
#define HFPP_OPERATOR_Mul *
#define HFPP_OPERATOR_INPLACE_Mul *=
#define HFPP_OPERATOR_Add +
#define HFPP_OPERATOR_INPLACE_Add +=
#define HFPP_OPERATOR_Div /
#define HFPP_OPERATOR_INPLACE_Div /=
#define HFPP_OPERATOR_Sub -
#define HFPP_OPERATOR_INPLACE_Sub -=
#define HFPP_OPERATOR_GreaterThan >
#define HFPP_OPERATOR_GreaterEqual >=
#define HFPP_OPERATOR_LessThan <
#define HFPP_OPERATOR_LessEqual <=

//Some convenience definitions
#define HFPP_TRUE 1
#define HFPP_FALSE 0
#define HFPP_NONE -1

//Defines datatypes to iterate wrappers over
#define HFPP_REAL_NUMERIC_TYPES (HInteger)(HNumber)
#define HFPP_STRING_TYPES (HString)
#define HFPP_COMPLEX_TYPES (HComplex)
#define HFPP_NUMERIC_TYPES HFPP_REAL_NUMERIC_TYPES HFPP_COMPLEX_TYPES 
#define HFPP_LOGICAL_TYPES (HBool)
#define HFPP_POINTER_TYPES (HPointer)
#define HFPP_NON_NUMERIC_TYPES HFPP_STRING_TYPES HFPP_POINTER_TYPES
#define HFPP_ALL_TYPES HFPP_NUMERIC_TYPES HFPP_NON_NUMERIC_TYPES
#define HFPP_ALL_PYTHONTYPES HFPP_NUMERIC_TYPES HFPP_LOGICAL_TYPES HFPP_STRING_TYPES

#define HFPP_DEFAULT_TEMPLATE_PARAMETER_NAMES ()(T)(S)(U)(V)(W)(X)(Y)(Z)
#define HFPP_DEFAULT_WRAPPER_CLASSES  HFPP_CLASS_STL HFPP_CLASS_CASA HFPP_CLASS_hARRAY HFPP_CLASS_hARRAYALL
#define HFPP_DEFAULT_WRAPPER_CLASSES_SLICED HFPP_CLASS_STL HFPP_CLASS_CASA
#define HFPP_DEFAULT_PYTHON_WRAPPER_CLASSES HFPP_CLASS_STL HFPP_CLASS_hARRAY HFPP_CLASS_hARRAYALL
#define HFPP_DEFAULT_PYTHON_WRAPPER_CLASSES_SLICED HFPP_CLASS_STL
#define HFPP_DEFAULT_WRAPPER_TYPES HFPP_NUMERIC_TYPES

//Used for nicer source code to determine how a parameter is passed and whether its type is templated
#define HFPP_VOID -1
#define HFPP_PASS_AS_VALUE 0
#define HFPP_PASS_AS_REFERENCE 1
#define HFPP_NON_TEMPLATED_TYPE 0
#define HFPP_TEMPLATED 1
#define HFPP_TEMPLATED_TYPE 1
#define HFPP_TEMPLATED_1 1
#define HFPP_TEMPLATED_2 2
#define HFPP_TEMPLATED_3 3
#define HFPP_TEMPLATED_4 4
#define HFPP_TEMPLATED_5 5
#define HFPP_TEMPLATED_6 6
#define HFPP_TEMPLATED_7 7
#define HFPP_TEMPLATED_8 8

#define HFPP_TEMPLATED_TYPE_1 1
#define HFPP_TEMPLATED_TYPE_2 2
#define HFPP_TEMPLATED_TYPE_3 3
#define HFPP_TEMPLATED_TYPE_4 4
#define HFPP_TEMPLATED_TYPE_5 5
#define HFPP_TEMPLATED_TYPE_6 6
#define HFPP_TEMPLATED_TYPE_7 7
#define HFPP_TEMPLATED_TYPE_8 8

#define HFPP_PAR_IS_SCALAR 0
#define HFPP_PAR_IS_VECTOR 1
#define HFPP_PAR_IS_MATRIX 2

//Tell the GUI how the return value of the library function is returned
#define HFPP_GUI_RETURN_SCALAR 0      //Function returns a scalar as return value
#define HFPP_GUI_RETURN_VECTOR_IN_PLACE 1 //Function takes vector as input and returns it modified (pass by reference)
#define HFPP_GUI_RETURN_NEW_VECTOR 2 //Functions takes an input vector and returns a new vectors as second argument


/*

Now come a number of index lists that are used by HFPP_LOOP to
generate all permuatattions of lists with multiple indices. The index
lists are generated with the following Python code.
------------------

def make_list(n,m):
    l=[]
    for i in range(m): l.append(0)
    s="("+format_list(l)+",BOOST_PP_NIL)"
    while increment_list(n,l):
        s="("+format_list(l)+","+s+")"
    print "#define HFPP_INDEXLIST_"+str(n)+"x"+str(m)+" "+s


def increment_list(maxn,l):
    return increment_list_element(maxn,len(l)-1,l)

def increment_list_element(maxn,i,l):
    l[i]+=1
    if l[i]>=maxn:
        if i==0: return False
        else:
            l[i]=0
            return increment_list_element(maxn,i-1,l)
    else: return True


def format_list(l):
    s=""
    for x in l: s+="("+str(x)+")"
    return s


 */

#define HFPP_INDEXLIST_1x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_2x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_3x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_4x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_5x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_6x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_7x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_8x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_9x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_10x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_11x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_12x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_13x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_14x0 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_15x0 ((0),BOOST_PP_NIL)

#define HFPP_INDEXLIST_1x1 ((0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_2x1 ((1),((0),BOOST_PP_NIL))
#define HFPP_INDEXLIST_3x1 ((2),((1),((0),BOOST_PP_NIL)))
#define HFPP_INDEXLIST_4x1 ((3),((2),((1),((0),BOOST_PP_NIL))))
#define HFPP_INDEXLIST_5x1 ((4),((3),((2),((1),((0),BOOST_PP_NIL)))))
#define HFPP_INDEXLIST_6x1 ((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))
#define HFPP_INDEXLIST_7x1 ((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))
#define HFPP_INDEXLIST_8x1 ((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))
#define HFPP_INDEXLIST_9x1 ((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))
#define HFPP_INDEXLIST_10x1 ((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))
#define HFPP_INDEXLIST_11x1 ((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))
#define HFPP_INDEXLIST_12x1 ((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))
#define HFPP_INDEXLIST_13x1 ((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))
#define HFPP_INDEXLIST_14x1 ((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))
#define HFPP_INDEXLIST_15x1 ((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))
#define HFPP_INDEXLIST_16x1 ((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))
#define HFPP_INDEXLIST_17x1 ((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))
#define HFPP_INDEXLIST_18x1 ((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))))
#define HFPP_INDEXLIST_19x1 ((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))))
#define HFPP_INDEXLIST_20x1 ((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))))))
#define HFPP_INDEXLIST_21x1 ((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))))))
#define HFPP_INDEXLIST_22x1 ((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))))))))
#define HFPP_INDEXLIST_23x1 ((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))))))))
#define HFPP_INDEXLIST_24x1 ((23),((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))))))))))
#define HFPP_INDEXLIST_25x1 ((24),((23),((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))))))))))
#define HFPP_INDEXLIST_26x1 ((25),((24),((23),((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))))))))))))
#define HFPP_INDEXLIST_27x1 ((26),((25),((24),((23),((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))))))))))))
#define HFPP_INDEXLIST_28x1 ((27),((26),((25),((24),((23),((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_29x1 ((28),((27),((26),((25),((24),((23),((22),((21),((20),((19),((18),((17),((16),((15),((14),((13),((12),((11),((10),((9),((8),((7),((6),((5),((4),((3),((2),((1),((0),BOOST_PP_NIL)))))))))))))))))))))))))))))

#define HFPP_INDEXLIST_1x2 ((0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x3 ((0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x4 ((0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x5 ((0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x6 ((0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x7 ((0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x8 ((0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x9 ((0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x10 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x11 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x12 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x13 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x14 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x15 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x16 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x17 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x18 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x19 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x20 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x21 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x22 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x23 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x24 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x25 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x26 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x27 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x28 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)
#define HFPP_INDEXLIST_1x29 ((0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0),BOOST_PP_NIL)


#define HFPP_INDEXLIST_2x2 ((1)(1),((1)(0),((0)(1),((0)(0),BOOST_PP_NIL))))
#define HFPP_INDEXLIST_2x3 ((1)(1)(1),((1)(1)(0),((1)(0)(1),((1)(0)(0),((0)(1)(1),((0)(1)(0),((0)(0)(1),((0)(0)(0),BOOST_PP_NIL))))))))
#define HFPP_INDEXLIST_2x4 ((1)(1)(1)(1),((1)(1)(1)(0),((1)(1)(0)(1),((1)(1)(0)(0),((1)(0)(1)(1),((1)(0)(1)(0),((1)(0)(0)(1),((1)(0)(0)(0),((0)(1)(1)(1),((0)(1)(1)(0),((0)(1)(0)(1),((0)(1)(0)(0),((0)(0)(1)(1),((0)(0)(1)(0),((0)(0)(0)(1),((0)(0)(0)(0),BOOST_PP_NIL))))))))))))))))
#define HFPP_INDEXLIST_2x5 ((1)(1)(1)(1)(1),((1)(1)(1)(1)(0),((1)(1)(1)(0)(1),((1)(1)(1)(0)(0),((1)(1)(0)(1)(1),((1)(1)(0)(1)(0),((1)(1)(0)(0)(1),((1)(1)(0)(0)(0),((1)(0)(1)(1)(1),((1)(0)(1)(1)(0),((1)(0)(1)(0)(1),((1)(0)(1)(0)(0),((1)(0)(0)(1)(1),((1)(0)(0)(1)(0),((1)(0)(0)(0)(1),((1)(0)(0)(0)(0),((0)(1)(1)(1)(1),((0)(1)(1)(1)(0),((0)(1)(1)(0)(1),((0)(1)(1)(0)(0),((0)(1)(0)(1)(1),((0)(1)(0)(1)(0),((0)(1)(0)(0)(1),((0)(1)(0)(0)(0),((0)(0)(1)(1)(1),((0)(0)(1)(1)(0),((0)(0)(1)(0)(1),((0)(0)(1)(0)(0),((0)(0)(0)(1)(1),((0)(0)(0)(1)(0),((0)(0)(0)(0)(1),((0)(0)(0)(0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_3x2 ((2)(2),((2)(1),((2)(0),((1)(2),((1)(1),((1)(0),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))
#define HFPP_INDEXLIST_3x3 ((2)(2)(2),((2)(2)(1),((2)(2)(0),((2)(1)(2),((2)(1)(1),((2)(1)(0),((2)(0)(2),((2)(0)(1),((2)(0)(0),((1)(2)(2),((1)(2)(1),((1)(2)(0),((1)(1)(2),((1)(1)(1),((1)(1)(0),((1)(0)(2),((1)(0)(1),((1)(0)(0),((0)(2)(2),((0)(2)(1),((0)(2)(0),((0)(1)(2),((0)(1)(1),((0)(1)(0),((0)(0)(2),((0)(0)(1),((0)(0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))
#define HFPP_INDEXLIST_3x4 ((2)(2)(2)(2),((2)(2)(2)(1),((2)(2)(2)(0),((2)(2)(1)(2),((2)(2)(1)(1),((2)(2)(1)(0),((2)(2)(0)(2),((2)(2)(0)(1),((2)(2)(0)(0),((2)(1)(2)(2),((2)(1)(2)(1),((2)(1)(2)(0),((2)(1)(1)(2),((2)(1)(1)(1),((2)(1)(1)(0),((2)(1)(0)(2),((2)(1)(0)(1),((2)(1)(0)(0),((2)(0)(2)(2),((2)(0)(2)(1),((2)(0)(2)(0),((2)(0)(1)(2),((2)(0)(1)(1),((2)(0)(1)(0),((2)(0)(0)(2),((2)(0)(0)(1),((2)(0)(0)(0),((1)(2)(2)(2),((1)(2)(2)(1),((1)(2)(2)(0),((1)(2)(1)(2),((1)(2)(1)(1),((1)(2)(1)(0),((1)(2)(0)(2),((1)(2)(0)(1),((1)(2)(0)(0),((1)(1)(2)(2),((1)(1)(2)(1),((1)(1)(2)(0),((1)(1)(1)(2),((1)(1)(1)(1),((1)(1)(1)(0),((1)(1)(0)(2),((1)(1)(0)(1),((1)(1)(0)(0),((1)(0)(2)(2),((1)(0)(2)(1),((1)(0)(2)(0),((1)(0)(1)(2),((1)(0)(1)(1),((1)(0)(1)(0),((1)(0)(0)(2),((1)(0)(0)(1),((1)(0)(0)(0),((0)(2)(2)(2),((0)(2)(2)(1),((0)(2)(2)(0),((0)(2)(1)(2),((0)(2)(1)(1),((0)(2)(1)(0),((0)(2)(0)(2),((0)(2)(0)(1),((0)(2)(0)(0),((0)(1)(2)(2),((0)(1)(2)(1),((0)(1)(2)(0),((0)(1)(1)(2),((0)(1)(1)(1),((0)(1)(1)(0),((0)(1)(0)(2),((0)(1)(0)(1),((0)(1)(0)(0),((0)(0)(2)(2),((0)(0)(2)(1),((0)(0)(2)(0),((0)(0)(1)(2),((0)(0)(1)(1),((0)(0)(1)(0),((0)(0)(0)(2),((0)(0)(0)(1),((0)(0)(0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

#define HFPP_INDEXLIST_4x2 ((3)(3),((3)(2),((3)(1),((3)(0),((2)(3),((2)(2),((2)(1),((2)(0),((1)(3),((1)(2),((1)(1),((1)(0),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))
#define HFPP_INDEXLIST_4x3 ((3)(3)(3),((3)(3)(2),((3)(3)(1),((3)(3)(0),((3)(2)(3),((3)(2)(2),((3)(2)(1),((3)(2)(0),((3)(1)(3),((3)(1)(2),((3)(1)(1),((3)(1)(0),((3)(0)(3),((3)(0)(2),((3)(0)(1),((3)(0)(0),((2)(3)(3),((2)(3)(2),((2)(3)(1),((2)(3)(0),((2)(2)(3),((2)(2)(2),((2)(2)(1),((2)(2)(0),((2)(1)(3),((2)(1)(2),((2)(1)(1),((2)(1)(0),((2)(0)(3),((2)(0)(2),((2)(0)(1),((2)(0)(0),((1)(3)(3),((1)(3)(2),((1)(3)(1),((1)(3)(0),((1)(2)(3),((1)(2)(2),((1)(2)(1),((1)(2)(0),((1)(1)(3),((1)(1)(2),((1)(1)(1),((1)(1)(0),((1)(0)(3),((1)(0)(2),((1)(0)(1),((1)(0)(0),((0)(3)(3),((0)(3)(2),((0)(3)(1),((0)(3)(0),((0)(2)(3),((0)(2)(2),((0)(2)(1),((0)(2)(0),((0)(1)(3),((0)(1)(2),((0)(1)(1),((0)(1)(0),((0)(0)(3),((0)(0)(2),((0)(0)(1),((0)(0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_5x2 ((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))
#define HFPP_INDEXLIST_5x3 ((4)(4)(4),((4)(4)(3),((4)(4)(2),((4)(4)(1),((4)(4)(0),((4)(3)(4),((4)(3)(3),((4)(3)(2),((4)(3)(1),((4)(3)(0),((4)(2)(4),((4)(2)(3),((4)(2)(2),((4)(2)(1),((4)(2)(0),((4)(1)(4),((4)(1)(3),((4)(1)(2),((4)(1)(1),((4)(1)(0),((4)(0)(4),((4)(0)(3),((4)(0)(2),((4)(0)(1),((4)(0)(0),((3)(4)(4),((3)(4)(3),((3)(4)(2),((3)(4)(1),((3)(4)(0),((3)(3)(4),((3)(3)(3),((3)(3)(2),((3)(3)(1),((3)(3)(0),((3)(2)(4),((3)(2)(3),((3)(2)(2),((3)(2)(1),((3)(2)(0),((3)(1)(4),((3)(1)(3),((3)(1)(2),((3)(1)(1),((3)(1)(0),((3)(0)(4),((3)(0)(3),((3)(0)(2),((3)(0)(1),((3)(0)(0),((2)(4)(4),((2)(4)(3),((2)(4)(2),((2)(4)(1),((2)(4)(0),((2)(3)(4),((2)(3)(3),((2)(3)(2),((2)(3)(1),((2)(3)(0),((2)(2)(4),((2)(2)(3),((2)(2)(2),((2)(2)(1),((2)(2)(0),((2)(1)(4),((2)(1)(3),((2)(1)(2),((2)(1)(1),((2)(1)(0),((2)(0)(4),((2)(0)(3),((2)(0)(2),((2)(0)(1),((2)(0)(0),((1)(4)(4),((1)(4)(3),((1)(4)(2),((1)(4)(1),((1)(4)(0),((1)(3)(4),((1)(3)(3),((1)(3)(2),((1)(3)(1),((1)(3)(0),((1)(2)(4),((1)(2)(3),((1)(2)(2),((1)(2)(1),((1)(2)(0),((1)(1)(4),((1)(1)(3),((1)(1)(2),((1)(1)(1),((1)(1)(0),((1)(0)(4),((1)(0)(3),((1)(0)(2),((1)(0)(1),((1)(0)(0),((0)(4)(4),((0)(4)(3),((0)(4)(2),((0)(4)(1),((0)(4)(0),((0)(3)(4),((0)(3)(3),((0)(3)(2),((0)(3)(1),((0)(3)(0),((0)(2)(4),((0)(2)(3),((0)(2)(2),((0)(2)(1),((0)(2)(0),((0)(1)(4),((0)(1)(3),((0)(1)(2),((0)(1)(1),((0)(1)(0),((0)(0)(4),((0)(0)(3),((0)(0)(2),((0)(0)(1),((0)(0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_6x2 ((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_6x3 ((5)(5)(5),((5)(5)(4),((5)(5)(3),((5)(5)(2),((5)(5)(1),((5)(5)(0),((5)(4)(5),((5)(4)(4),((5)(4)(3),((5)(4)(2),((5)(4)(1),((5)(4)(0),((5)(3)(5),((5)(3)(4),((5)(3)(3),((5)(3)(2),((5)(3)(1),((5)(3)(0),((5)(2)(5),((5)(2)(4),((5)(2)(3),((5)(2)(2),((5)(2)(1),((5)(2)(0),((5)(1)(5),((5)(1)(4),((5)(1)(3),((5)(1)(2),((5)(1)(1),((5)(1)(0),((5)(0)(5),((5)(0)(4),((5)(0)(3),((5)(0)(2),((5)(0)(1),((5)(0)(0),((4)(5)(5),((4)(5)(4),((4)(5)(3),((4)(5)(2),((4)(5)(1),((4)(5)(0),((4)(4)(5),((4)(4)(4),((4)(4)(3),((4)(4)(2),((4)(4)(1),((4)(4)(0),((4)(3)(5),((4)(3)(4),((4)(3)(3),((4)(3)(2),((4)(3)(1),((4)(3)(0),((4)(2)(5),((4)(2)(4),((4)(2)(3),((4)(2)(2),((4)(2)(1),((4)(2)(0),((4)(1)(5),((4)(1)(4),((4)(1)(3),((4)(1)(2),((4)(1)(1),((4)(1)(0),((4)(0)(5),((4)(0)(4),((4)(0)(3),((4)(0)(2),((4)(0)(1),((4)(0)(0),((3)(5)(5),((3)(5)(4),((3)(5)(3),((3)(5)(2),((3)(5)(1),((3)(5)(0),((3)(4)(5),((3)(4)(4),((3)(4)(3),((3)(4)(2),((3)(4)(1),((3)(4)(0),((3)(3)(5),((3)(3)(4),((3)(3)(3),((3)(3)(2),((3)(3)(1),((3)(3)(0),((3)(2)(5),((3)(2)(4),((3)(2)(3),((3)(2)(2),((3)(2)(1),((3)(2)(0),((3)(1)(5),((3)(1)(4),((3)(1)(3),((3)(1)(2),((3)(1)(1),((3)(1)(0),((3)(0)(5),((3)(0)(4),((3)(0)(3),((3)(0)(2),((3)(0)(1),((3)(0)(0),((2)(5)(5),((2)(5)(4),((2)(5)(3),((2)(5)(2),((2)(5)(1),((2)(5)(0),((2)(4)(5),((2)(4)(4),((2)(4)(3),((2)(4)(2),((2)(4)(1),((2)(4)(0),((2)(3)(5),((2)(3)(4),((2)(3)(3),((2)(3)(2),((2)(3)(1),((2)(3)(0),((2)(2)(5),((2)(2)(4),((2)(2)(3),((2)(2)(2),((2)(2)(1),((2)(2)(0),((2)(1)(5),((2)(1)(4),((2)(1)(3),((2)(1)(2),((2)(1)(1),((2)(1)(0),((2)(0)(5),((2)(0)(4),((2)(0)(3),((2)(0)(2),((2)(0)(1),((2)(0)(0),((1)(5)(5),((1)(5)(4),((1)(5)(3),((1)(5)(2),((1)(5)(1),((1)(5)(0),((1)(4)(5),((1)(4)(4),((1)(4)(3),((1)(4)(2),((1)(4)(1),((1)(4)(0),((1)(3)(5),((1)(3)(4),((1)(3)(3),((1)(3)(2),((1)(3)(1),((1)(3)(0),((1)(2)(5),((1)(2)(4),((1)(2)(3),((1)(2)(2),((1)(2)(1),((1)(2)(0),((1)(1)(5),((1)(1)(4),((1)(1)(3),((1)(1)(2),((1)(1)(1),((1)(1)(0),((1)(0)(5),((1)(0)(4),((1)(0)(3),((1)(0)(2),((1)(0)(1),((1)(0)(0),((0)(5)(5),((0)(5)(4),((0)(5)(3),((0)(5)(2),((0)(5)(1),((0)(5)(0),((0)(4)(5),((0)(4)(4),((0)(4)(3),((0)(4)(2),((0)(4)(1),((0)(4)(0),((0)(3)(5),((0)(3)(4),((0)(3)(3),((0)(3)(2),((0)(3)(1),((0)(3)(0),((0)(2)(5),((0)(2)(4),((0)(2)(3),((0)(2)(2),((0)(2)(1),((0)(2)(0),((0)(1)(5),((0)(1)(4),((0)(1)(3),((0)(1)(2),((0)(1)(1),((0)(1)(0),((0)(0)(5),((0)(0)(4),((0)(0)(3),((0)(0)(2),((0)(0)(1),((0)(0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

#define HFPP_INDEXLIST_7x2 ((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_8x2 ((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_9x2 ((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_10x2 ((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_11x2 ((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_12x2 ((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_13x2 ((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_14x2 ((13)(13),((13)(12),((13)(11),((13)(10),((13)(9),((13)(8),((13)(7),((13)(6),((13)(5),((13)(4),((13)(3),((13)(2),((13)(1),((13)(0),((12)(13),((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(13),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(13),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(13),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(13),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(13),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(13),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(13),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(13),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(13),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(13),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(13),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(13),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_15x2 ((14)(14),((14)(13),((14)(12),((14)(11),((14)(10),((14)(9),((14)(8),((14)(7),((14)(6),((14)(5),((14)(4),((14)(3),((14)(2),((14)(1),((14)(0),((13)(14),((13)(13),((13)(12),((13)(11),((13)(10),((13)(9),((13)(8),((13)(7),((13)(6),((13)(5),((13)(4),((13)(3),((13)(2),((13)(1),((13)(0),((12)(14),((12)(13),((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(14),((11)(13),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(14),((10)(13),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(14),((9)(13),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(14),((8)(13),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(14),((7)(13),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(14),((6)(13),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(14),((5)(13),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(14),((4)(13),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(14),((3)(13),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(14),((2)(13),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(14),((1)(13),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(14),((0)(13),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_16x2 ((15)(15),((15)(14),((15)(13),((15)(12),((15)(11),((15)(10),((15)(9),((15)(8),((15)(7),((15)(6),((15)(5),((15)(4),((15)(3),((15)(2),((15)(1),((15)(0),((14)(15),((14)(14),((14)(13),((14)(12),((14)(11),((14)(10),((14)(9),((14)(8),((14)(7),((14)(6),((14)(5),((14)(4),((14)(3),((14)(2),((14)(1),((14)(0),((13)(15),((13)(14),((13)(13),((13)(12),((13)(11),((13)(10),((13)(9),((13)(8),((13)(7),((13)(6),((13)(5),((13)(4),((13)(3),((13)(2),((13)(1),((13)(0),((12)(15),((12)(14),((12)(13),((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(15),((11)(14),((11)(13),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(15),((10)(14),((10)(13),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(15),((9)(14),((9)(13),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(15),((8)(14),((8)(13),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(15),((7)(14),((7)(13),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(15),((6)(14),((6)(13),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(15),((5)(14),((5)(13),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(15),((4)(14),((4)(13),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(15),((3)(14),((3)(13),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(15),((2)(14),((2)(13),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(15),((1)(14),((1)(13),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(15),((0)(14),((0)(13),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_17x2 ((16)(16),((16)(15),((16)(14),((16)(13),((16)(12),((16)(11),((16)(10),((16)(9),((16)(8),((16)(7),((16)(6),((16)(5),((16)(4),((16)(3),((16)(2),((16)(1),((16)(0),((15)(16),((15)(15),((15)(14),((15)(13),((15)(12),((15)(11),((15)(10),((15)(9),((15)(8),((15)(7),((15)(6),((15)(5),((15)(4),((15)(3),((15)(2),((15)(1),((15)(0),((14)(16),((14)(15),((14)(14),((14)(13),((14)(12),((14)(11),((14)(10),((14)(9),((14)(8),((14)(7),((14)(6),((14)(5),((14)(4),((14)(3),((14)(2),((14)(1),((14)(0),((13)(16),((13)(15),((13)(14),((13)(13),((13)(12),((13)(11),((13)(10),((13)(9),((13)(8),((13)(7),((13)(6),((13)(5),((13)(4),((13)(3),((13)(2),((13)(1),((13)(0),((12)(16),((12)(15),((12)(14),((12)(13),((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(16),((11)(15),((11)(14),((11)(13),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(16),((10)(15),((10)(14),((10)(13),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(16),((9)(15),((9)(14),((9)(13),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(16),((8)(15),((8)(14),((8)(13),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(16),((7)(15),((7)(14),((7)(13),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(16),((6)(15),((6)(14),((6)(13),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(16),((5)(15),((5)(14),((5)(13),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(16),((4)(15),((4)(14),((4)(13),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(16),((3)(15),((3)(14),((3)(13),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(16),((2)(15),((2)(14),((2)(13),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(16),((1)(15),((1)(14),((1)(13),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(16),((0)(15),((0)(14),((0)(13),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_18x2 ((17)(17),((17)(16),((17)(15),((17)(14),((17)(13),((17)(12),((17)(11),((17)(10),((17)(9),((17)(8),((17)(7),((17)(6),((17)(5),((17)(4),((17)(3),((17)(2),((17)(1),((17)(0),((16)(17),((16)(16),((16)(15),((16)(14),((16)(13),((16)(12),((16)(11),((16)(10),((16)(9),((16)(8),((16)(7),((16)(6),((16)(5),((16)(4),((16)(3),((16)(2),((16)(1),((16)(0),((15)(17),((15)(16),((15)(15),((15)(14),((15)(13),((15)(12),((15)(11),((15)(10),((15)(9),((15)(8),((15)(7),((15)(6),((15)(5),((15)(4),((15)(3),((15)(2),((15)(1),((15)(0),((14)(17),((14)(16),((14)(15),((14)(14),((14)(13),((14)(12),((14)(11),((14)(10),((14)(9),((14)(8),((14)(7),((14)(6),((14)(5),((14)(4),((14)(3),((14)(2),((14)(1),((14)(0),((13)(17),((13)(16),((13)(15),((13)(14),((13)(13),((13)(12),((13)(11),((13)(10),((13)(9),((13)(8),((13)(7),((13)(6),((13)(5),((13)(4),((13)(3),((13)(2),((13)(1),((13)(0),((12)(17),((12)(16),((12)(15),((12)(14),((12)(13),((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(17),((11)(16),((11)(15),((11)(14),((11)(13),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(17),((10)(16),((10)(15),((10)(14),((10)(13),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(17),((9)(16),((9)(15),((9)(14),((9)(13),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(17),((8)(16),((8)(15),((8)(14),((8)(13),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(17),((7)(16),((7)(15),((7)(14),((7)(13),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(17),((6)(16),((6)(15),((6)(14),((6)(13),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(17),((5)(16),((5)(15),((5)(14),((5)(13),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(17),((4)(16),((4)(15),((4)(14),((4)(13),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(17),((3)(16),((3)(15),((3)(14),((3)(13),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(17),((2)(16),((2)(15),((2)(14),((2)(13),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(17),((1)(16),((1)(15),((1)(14),((1)(13),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(17),((0)(16),((0)(15),((0)(14),((0)(13),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
#define HFPP_INDEXLIST_19x2 ((18)(18),((18)(17),((18)(16),((18)(15),((18)(14),((18)(13),((18)(12),((18)(11),((18)(10),((18)(9),((18)(8),((18)(7),((18)(6),((18)(5),((18)(4),((18)(3),((18)(2),((18)(1),((18)(0),((17)(18),((17)(17),((17)(16),((17)(15),((17)(14),((17)(13),((17)(12),((17)(11),((17)(10),((17)(9),((17)(8),((17)(7),((17)(6),((17)(5),((17)(4),((17)(3),((17)(2),((17)(1),((17)(0),((16)(18),((16)(17),((16)(16),((16)(15),((16)(14),((16)(13),((16)(12),((16)(11),((16)(10),((16)(9),((16)(8),((16)(7),((16)(6),((16)(5),((16)(4),((16)(3),((16)(2),((16)(1),((16)(0),((15)(18),((15)(17),((15)(16),((15)(15),((15)(14),((15)(13),((15)(12),((15)(11),((15)(10),((15)(9),((15)(8),((15)(7),((15)(6),((15)(5),((15)(4),((15)(3),((15)(2),((15)(1),((15)(0),((14)(18),((14)(17),((14)(16),((14)(15),((14)(14),((14)(13),((14)(12),((14)(11),((14)(10),((14)(9),((14)(8),((14)(7),((14)(6),((14)(5),((14)(4),((14)(3),((14)(2),((14)(1),((14)(0),((13)(18),((13)(17),((13)(16),((13)(15),((13)(14),((13)(13),((13)(12),((13)(11),((13)(10),((13)(9),((13)(8),((13)(7),((13)(6),((13)(5),((13)(4),((13)(3),((13)(2),((13)(1),((13)(0),((12)(18),((12)(17),((12)(16),((12)(15),((12)(14),((12)(13),((12)(12),((12)(11),((12)(10),((12)(9),((12)(8),((12)(7),((12)(6),((12)(5),((12)(4),((12)(3),((12)(2),((12)(1),((12)(0),((11)(18),((11)(17),((11)(16),((11)(15),((11)(14),((11)(13),((11)(12),((11)(11),((11)(10),((11)(9),((11)(8),((11)(7),((11)(6),((11)(5),((11)(4),((11)(3),((11)(2),((11)(1),((11)(0),((10)(18),((10)(17),((10)(16),((10)(15),((10)(14),((10)(13),((10)(12),((10)(11),((10)(10),((10)(9),((10)(8),((10)(7),((10)(6),((10)(5),((10)(4),((10)(3),((10)(2),((10)(1),((10)(0),((9)(18),((9)(17),((9)(16),((9)(15),((9)(14),((9)(13),((9)(12),((9)(11),((9)(10),((9)(9),((9)(8),((9)(7),((9)(6),((9)(5),((9)(4),((9)(3),((9)(2),((9)(1),((9)(0),((8)(18),((8)(17),((8)(16),((8)(15),((8)(14),((8)(13),((8)(12),((8)(11),((8)(10),((8)(9),((8)(8),((8)(7),((8)(6),((8)(5),((8)(4),((8)(3),((8)(2),((8)(1),((8)(0),((7)(18),((7)(17),((7)(16),((7)(15),((7)(14),((7)(13),((7)(12),((7)(11),((7)(10),((7)(9),((7)(8),((7)(7),((7)(6),((7)(5),((7)(4),((7)(3),((7)(2),((7)(1),((7)(0),((6)(18),((6)(17),((6)(16),((6)(15),((6)(14),((6)(13),((6)(12),((6)(11),((6)(10),((6)(9),((6)(8),((6)(7),((6)(6),((6)(5),((6)(4),((6)(3),((6)(2),((6)(1),((6)(0),((5)(18),((5)(17),((5)(16),((5)(15),((5)(14),((5)(13),((5)(12),((5)(11),((5)(10),((5)(9),((5)(8),((5)(7),((5)(6),((5)(5),((5)(4),((5)(3),((5)(2),((5)(1),((5)(0),((4)(18),((4)(17),((4)(16),((4)(15),((4)(14),((4)(13),((4)(12),((4)(11),((4)(10),((4)(9),((4)(8),((4)(7),((4)(6),((4)(5),((4)(4),((4)(3),((4)(2),((4)(1),((4)(0),((3)(18),((3)(17),((3)(16),((3)(15),((3)(14),((3)(13),((3)(12),((3)(11),((3)(10),((3)(9),((3)(8),((3)(7),((3)(6),((3)(5),((3)(4),((3)(3),((3)(2),((3)(1),((3)(0),((2)(18),((2)(17),((2)(16),((2)(15),((2)(14),((2)(13),((2)(12),((2)(11),((2)(10),((2)(9),((2)(8),((2)(7),((2)(6),((2)(5),((2)(4),((2)(3),((2)(2),((2)(1),((2)(0),((1)(18),((1)(17),((1)(16),((1)(15),((1)(14),((1)(13),((1)(12),((1)(11),((1)(10),((1)(9),((1)(8),((1)(7),((1)(6),((1)(5),((1)(4),((1)(3),((1)(2),((1)(1),((1)(0),((0)(18),((0)(17),((0)(16),((0)(15),((0)(14),((0)(13),((0)(12),((0)(11),((0)(10),((0)(9),((0)(8),((0)(7),((0)(6),((0)(5),((0)(4),((0)(3),((0)(2),((0)(1),((0)(0),BOOST_PP_NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))



//------------------------------------------------------------------------
//Function Defintion
//------------------------------------------------------------------------
#define HFPP_GET_TEMPLATE_PARAMETER_NAME(N) BOOST_PP_IF(BOOST_PP_EQUAL(N,0),BOOST_PP_EMPTY(),BOOST_PP_SEQ_ELEM(N,HFPP_TEMPLATE_PARAMETER_NAMES))

#define HFPP_GET_FUNC_TYPE_INPUTVALUE BOOST_PP_SEQ_ELEM(0,HFPP_FUNCDEF)
#define HFPP_GET_FUNC_NAME BOOST_PP_SEQ_ELEM(1,HFPP_FUNCDEF)
#define HFPP_GET_FUNC_NAME_SLICED BOOST_PP_CAT(HFPP_GET_FUNC_NAME,_hSLICED)
#define HFPP_GET_FUNC_BASENAME BOOST_PP_CAT(BOOST_PP_SEQ_ELEM(1,HFPP_FUNCDEF),HFPP_FUNC_VARIANT)
#define HFPP_GET_FUNC_BASENAME_SLICED BOOST_PP_CAT(HFPP_GET_FUNC_NAME_SLICED,HFPP_FUNC_VARIANT)
#define HFPP_GET_FUNC_DOC BOOST_PP_SEQ_ELEM(2,HFPP_FUNCDEF)
#define HFPP_GET_FUNC_DIM BOOST_PP_SEQ_ELEM(3,HFPP_FUNCDEF)
#define HFPP_GET_FUNC_BASE_CLASS BOOST_PP_SEQ_ELEM(4,HFPP_FUNCDEF)
#define HFPP_GET_FUNC_PASSREFERENCE BOOST_PP_SEQ_ELEM(5,HFPP_FUNCDEF)

#define HFPP_GET_PAR_BASETYPE_VAL(N)  BOOST_PP_SEQ_ELEM(0,BOOST_PP_CAT(HFPP_PARDEF_,N))
#define HFPP_GET_PAR_NAME(N) BOOST_PP_SEQ_ELEM(1,BOOST_PP_CAT(HFPP_PARDEF_,N))
#define HFPP_GET_PAR_ITERNAME(N) BOOST_PP_CAT(HFPP_GET_PAR_NAME(N),_iterator)
#define HFPP_GET_PAR_DEFVAL(N) BOOST_PP_SEQ_ELEM(2,BOOST_PP_CAT(HFPP_PARDEF_,N))
#define HFPP_GET_PAR_DOC(N) BOOST_PP_SEQ_ELEM(3,BOOST_PP_CAT(HFPP_PARDEF_,N))
#define HFPP_GET_PAR_DIM(N) BOOST_PP_SEQ_ELEM(4,BOOST_PP_CAT(HFPP_PARDEF_,N))
#define HFPP_GET_PAR_BASE_CLASS(N) BOOST_PP_SEQ_ELEM(5,BOOST_PP_CAT(HFPP_PARDEF_,N))
#define HFPP_GET_PAR_PASSREFERENCE(N) BOOST_PP_SEQ_ELEM(6,BOOST_PP_CAT(HFPP_PARDEF_,N))

#define HFPP_PAR_TYPE_IS_TEMPLATED(N) BOOST_PP_CAT(HFPP_PAR_TYPE_IS_TEMPLATED_,N)
#define HFPP_GET_PAR_BASETYPE(N) BOOST_PP_IF(HFPP_PAR_TYPE_IS_TEMPLATED_##N,HFPP_GET_TEMPLATE_PARAMETER_NAME(HFPP_GET_PAR_TEMPLATE_VALUE_##N),HFPP_GET_PAR_BASETYPE_VAL(N))
#define HFPP_GET_PAR_TEMPLATED(N) BOOST_PP_IF(HFPP_PAR_TYPE_IS_TEMPLATED(N),HFPP_GET_PAR_BASETYPE_VAL(N),0)

#define HFPP_GET_WRAPPER_TYPE(N) BOOST_PP_SEQ_ELEM(N,HFPP_WRAPPER_TYPES)

#define HFPP_GET_FUNC_PAR_NAMES_MACRO(XXX,N,DATA) (HFPP_GET_PAR_NAME(N))
#define HFPP_GET_FUNC_PAR_NAMES BOOST_PP_REPEAT(HFPP_GET_FUNC_PARNUM,HFPP_GET_FUNC_PAR_NAMES_MACRO,BOOST_PP_EMPTY())
#define HFPP_GET_FUNC_PAR_TYPES_MACRO(XXX,N,DATA) (HFPP_GET_PAR_BASETYPE_VAL(N))
#define HFPP_GET_FUNC_PAR_TYPES BOOST_PP_REPEAT(HFPP_GET_FUNC_PARNUM,HFPP_GET_FUNC_PAR_TYPES_MACRO,BOOST_PP_EMPTY())
#define HFPP_GET_FUNC_PAR_CLASSES_MACRO(XXX,N,DATA) (HFPP_GET_PAR_BASE_CLASS(N))
#define HFPP_GET_FUNC_PAR_CLASSES BOOST_PP_REPEAT(HFPP_GET_FUNC_PARNUM,HFPP_GET_FUNC_PAR_CLASSES_MACRO,BOOST_PP_EMPTY())


//------------------------------------------------------------------------------
//Define parameter declarations for different dimensions and different containers
//------------------------------------------------------------------------------
#define HFPP_GET_PAR_DECLARATION_DIM0STL(TYPE) TYPE
#define HFPP_GET_PAR_DECLARATION_DIM1STL(TYPE) std::vector<TYPE>

#define HFPP_GET_PAR_DECLARATION_DIM0CASA(TYPE) TYPE
#define HFPP_GET_PAR_DECLARATION_DIM1CASA(TYPE) casa::Vector<TYPE>

#define HFPP_GET_PAR_DECLARATION_DIM0hARRAY(TYPE) TYPE
#define HFPP_GET_PAR_DECLARATION_DIM1hARRAY(TYPE) hArray<TYPE>

#define HFPP_GET_PAR_DECLARATION_DIM0hARRAYALL(TYPE) vector<TYPE> &
#define HFPP_GET_PAR_DECLARATION_DIM1hARRAYALL(TYPE) hArray<TYPE>
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Define parameter declarations for different dimensions and different containers
//------------------------------------------------------------------------------
#define HFPP_GET_FUNC_DECLARATION_DIM0(TYPE) TYPE
#define HFPP_GET_FUNC_DECLARATION_DIM0STL(TYPE) TYPE
#define HFPP_GET_FUNC_DECLARATION_DIM1STL(TYPE) std::vector<TYPE>

#define HFPP_GET_FUNC_DECLARATION_DIM0CASA(TYPE) TYPE
#define HFPP_GET_FUNC_DECLARATION_DIM1CASA(TYPE) casa::Vector<TYPE>

#define HFPP_GET_FUNC_DECLARATION_DIM0hARRAY(TYPE) BOOST_PP_IF(HFPP_FUNC_IS_VOID,TYPE,vector<TYPE >)
#define HFPP_GET_FUNC_DECLARATION_DIM1hARRAY(TYPE) hArray<TYPE>

#define HFPP_GET_FUNC_DECLARATION_DIM0hARRAYALL(TYPE) BOOST_PP_IF(HFPP_FUNC_IS_VOID,TYPE,vector<TYPE >)
#define HFPP_GET_FUNC_DECLARATION_DIM1hARRAYALL(TYPE) hArray<TYPE>
//------------------------------------------------------------------------------


//Returns the default template type name for the function, if templated (e.g., T or S)
//otherwise return base type (could be "void")
#define HFPP_GET_FUNC_TEMPLATE_NAME BOOST_PP_IF(HFPP_FUNC_TYPE_IS_TEMPLATED,HFPP_GET_TEMPLATE_PARAMETER_NAME(HFPP_FUNC_TYPE_IS_TEMPLATED),HFPP_GET_FUNC_BASETYPE)


//Returns the default function return type
#define HFPP_GET_FUNC_TYPE_TEMPLATED(BASECLASS,TEMPLATETYPE) BOOST_PP_CAT(BOOST_PP_CAT(HFPP_GET_FUNC_DECLARATION_DIM,HFPP_GET_FUNC_DIM),BOOST_PP_IF(HFPP_FUNC_KEEP_RETURN_TYPE_FIXED,HFPP_GET_FUNC_BASE_CLASS,BASECLASS))(BOOST_PP_IF(HFPP_FUNC_TYPE_IS_TEMPLATED,BOOST_PP_SEQ_ELEM(HFPP_FUNC_TYPE_IS_TEMPLATED,TEMPLATETYPE),HFPP_GET_FUNC_BASETYPE))

#define HFPP_GET_FUNC_TYPE HFPP_GET_FUNC_TYPE_TEMPLATED(HFPP_GET_FUNC_BASE_CLASS,HFPP_GET_FUNC_TEMPLATE_NAME)

#define HFPP_GET_FUNC_TYPE_DECLARATION_TEMPLATED(BASECLASS,TEMPLATETYPE) HFPP_GET_FUNC_TYPE_TEMPLATED(BASECLASS,TEMPLATETYPE) BOOST_PP_IF(HFPP_GET_FUNC_PASSREFERENCE,&,BOOST_PP_EMPTY())
#define HFPP_GET_FUNC_TYPE_DECLARATION HFPP_GET_FUNC_TYPE_DECLARATION_TEMPLATED(HFPP_GET_FUNC_BASE_CLASS,HFPP_GET_FUNC_TEMPLATE_NAME)

//Generates the full type of a parameter, i.e. including the container type, like "vector<HInteger>"
#define HFPP_GET_PAR_TYPE_TEMPLATED(N,WRAPPERTYPE,TEMPLATETYPES) BOOST_PP_CAT(BOOST_PP_CAT(HFPP_GET_PAR_DECLARATION_DIM,HFPP_GET_PAR_DIM(N)),WRAPPERTYPE)(BOOST_PP_IF(HFPP_GET_PAR_TEMPLATED(N),BOOST_PP_SEQ_ELEM(HFPP_GET_PAR_TEMPLATED(N),TEMPLATETYPES),HFPP_GET_PAR_BASETYPE(N)))

//Generate a parameter declaration, that can go into the parameter
//list of the function definition: "vector<HInteger>& vec"
#define HFPP_GET_PAR_DECLARATION_TEMPLATED(N,WRAPPERTYPE,TEMPLATETYPES) HFPP_GET_PAR_TYPE_TEMPLATED(N,WRAPPERTYPE,TEMPLATETYPES) BOOST_PP_IF(HFPP_GET_PAR_PASSREFERENCE(N),&,BOOST_PP_EMPTY()) HFPP_GET_PAR_NAME(N)

#define HFPP_GET_PAR_DECLARATION_TEMPLATED_SLICED(N,WRAPPERTYPE,TEMPLATETYPES) HFPP_GET_PAR_TYPE_TEMPLATED(N,WRAPPERTYPE,TEMPLATETYPES) BOOST_PP_IF(HFPP_GET_PAR_PASSREFERENCE(N),&,BOOST_PP_EMPTY()) HFPP_GET_PAR_NAME(N) BOOST_PP_COMMA_IF(HFPP_GET_PAR_DIM(N)) BOOST_PP_IF(HFPP_GET_PAR_DIM(N), HInteger BOOST_PP_CAT(HFPP_GET_PAR_NAME(N),slice1),BOOST_PP_EMPTY())  BOOST_PP_COMMA_IF(HFPP_GET_PAR_DIM(N)) BOOST_PP_IF(HFPP_GET_PAR_DIM(N),HInteger BOOST_PP_CAT(HFPP_GET_PAR_NAME(N),slice2),BOOST_PP_EMPTY())

#define HFPP_GET_PAR_DECLARATION_TEMPLATED_MACRO(ZZZ,N,WRAPPERTYPE_AND_TEMPLATETYPE_LIST) HFPP_GET_PAR_DECLARATION_TEMPLATED(N,BOOST_PP_SEQ_ELEM(0,WRAPPERTYPE_AND_TEMPLATETYPE_LIST),BOOST_PP_SEQ_ELEM(1,WRAPPERTYPE_AND_TEMPLATETYPE_LIST))

#define HFPP_GET_PAR_DECLARATION_TEMPLATED_MACRO_SLICED(ZZZ,N,WRAPPERTYPE_AND_TEMPLATETYPE_LIST) HFPP_GET_PAR_DECLARATION_TEMPLATED_SLICED(N,BOOST_PP_SEQ_ELEM(0,WRAPPERTYPE_AND_TEMPLATETYPE_LIST),BOOST_PP_SEQ_ELEM(1,WRAPPERTYPE_AND_TEMPLATETYPE_LIST))

//Generate the entire parameterlist that is in the function definition: "std::vector<T> & vec , std::vector<HInteger> & vec , HInteger val"
#define HFPP_GET_PARLIST_DECLARATION_TEMPLATED(WRAPPERTYPE,TEMPLATETYPES) BOOST_PP_ENUM(HFPP_GET_FUNC_PARNUM,HFPP_GET_PAR_DECLARATION_TEMPLATED_MACRO,(WRAPPERTYPE)(TEMPLATETYPES))

#define HFPP_GET_PARLIST_DECLARATION_TEMPLATED_SLICED(WRAPPERTYPE,TEMPLATETYPES) BOOST_PP_ENUM(HFPP_GET_FUNC_PARNUM,HFPP_GET_PAR_DECLARATION_TEMPLATED_MACRO_SLICED,(WRAPPERTYPE)(TEMPLATETYPES))

//Now we define the functions that actually are used to generate the parameters for calling another function of different container classes
#define HFPP_CONVERT_PAR_INPUT_STL_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_CASA_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_STDIT_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_0(VEC0) *VEC0##_iterator

#define HFPP_CONVERT_PAR_INPUT_STL_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_STL_TO_STDIT1(VEC) VEC.begin(),VEC.end()
#define HFPP_CONVERT_PAR_INPUT_STL_TO_CASA1(VEC) stl2casa(VEC)
#define HFPP_CONVERT_PAR_INPUT_STL_TO_STL1(VEC) VEC
#define HFPP_CONVERT_PAR_INPUT_STL_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_STL_TO_STDITFIXED1(VEC) VEC.begin()

#define HFPP_CONVERT_PAR_INPUT_CASA_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_CASA_TO_STDIT1(VEC) VEC.cbegin(),VEC.cend()  //or .cbegin ...??
#define HFPP_CONVERT_PAR_INPUT_CASA_TO_CASA1(VEC) VEC
#define HFPP_CONVERT_PAR_INPUT_CASA_TO_STL1(VEC) casa2stl(VEC)
#define HFPP_CONVERT_PAR_INPUT_CASA_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_CASA_TO_STDITFIXED1(VEC) VEC.cbegin() //or .cbegin ...??

#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_STDIT1(VEC) VEC.begin(),VEC.end()
#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_CASA(VEC) stl2casa(VEC.getVector())
#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_STL1(VEC) VEC.getVector()
#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_hARRAY_TO_STDITFIXED1(VEC) VEC.begin()

#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_STDIT1(VEC) VEC.begin(),VEC.end()
#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_CASA(VEC) stl2casa(VEC.getVector())
#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_STL1(VEC) VEC.getVector()
#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_hARRAYALL_TO_STDITFIXED1(VEC) VEC.begin()

////////////////////////////////////////////////////////////////////////
#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_STDIT_TO_0(VEC0) VEC0

#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_STDIT1(VEC) VEC.begin() + VEC##slice1,VEC.begin() + VEC##slice2
#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_CASA1(VEC) stl2casa(VEC)
#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_STL1(VEC) VEC
#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_STL_TO_STDITFIXED1(VEC) VEC.begin()

#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_STDIT1(VEC) VEC.cbegin() + VEC##slice1,VEC.cbegin() + VEC##slice2
#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_CASA1(VEC) VEC
#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_STL1(VEC) casa2stl(VEC)
#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_CASA_TO_STDITFIXED1(VEC) VEC.cbegin() //or .cbegin ...??

#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_STDIT1(VEC) VEC.begin(VEC##slice1),VEC.begin(VEC##slice2)
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_CASA(VEC) stl2casa(VEC.getVector())
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_STL1(VEC) VEC.getVector()
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAY_TO_STDITFIXED1(VEC) VEC.begin()

#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_STDIT0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_STDIT1(VEC) VEC.begin(VEC##slice1),VEC.begin(VEC##slice2)
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_CASA(VEC) stl2casa(VEC.getVector())
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_STL1(VEC) VEC.getVector()
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_STDITFIXED0(VEC0) VEC0
#define HFPP_CONVERT_PAR_INPUT_SLICED_hARRAYALL_TO_STDITFIXED1(VEC) VEC.begin()


#define HFPP_CODE_PRE_hARRAY \
bool iterate=true; _H_NL_ \
bool hist=HFPP_GET_PAR_NAME(HFPP_FUNC_MASTER_ARRAY_PARAMETER).isTrackingHistory();_H_NL_ \
BOOST_PP_IF(HFPP_FUNC_IS_VOID,BOOST_PP_EMPTY(),\
BOOST_PP_IF(HFPP_GET_FUNC_PASSREFERENCE,static,BOOST_PP_EMPTY())\
BOOST_PP_IF(HFPP_FUNC_KEEP_RETURN_TYPE_FIXED,BOOST_PP_EMPTY(), vector<HFPP_GET_FUNC_BASETYPE> returnvector; _H_NL_ ) \
HFPP_GET_FUNC_BASETYPE returnvalue; _H_NL_)

#define HFPP_CODE_POST_hARRAY \
iterate = HFPP_GET_PAR_NAME(HFPP_FUNC_MASTER_ARRAY_PARAMETER).doLoopAgain(); _H_NL_ \
BOOST_PP_IF(HFPP_FUNC_IS_VOID, }; , BOOST_PP_IF(HFPP_FUNC_KEEP_RETURN_TYPE_FIXED,BOOST_PP_EMPTY(),returnvector.push_back(returnvalue);) }; _H_NL_\
 BOOST_PP_IF(HFPP_FUNC_KEEP_RETURN_TYPE_FIXED, return returnvalue, return returnvector); ) _H_NL_

#define HFPP_CODE_PRE_hARRAYALL \
bool iterate=true; _H_NL_ \
bool hist=HFPP_GET_PAR_NAME(HFPP_FUNC_MASTER_ARRAY_PARAMETER).isTrackingHistory();_H_NL_ \
BOOST_PP_IF(HFPP_FUNC_IS_VOID,BOOST_PP_EMPTY(),vector<HFPP_GET_FUNC_BASETYPE> returnvector; _H_NL_ HFPP_GET_FUNC_BASETYPE returnvalue; _H_NL_)
#define HFPP_CODE_POST_hARRAYALL iterate = HFPP_GET_PAR_NAME(HFPP_FUNC_MASTER_ARRAY_PARAMETER).doLoopAgain(); _H_NL_ BOOST_PP_IF(HFPP_FUNC_IS_VOID, }; , returnvector.push_back(returnvalue); }; _H_NL_ return returnvector; ) _H_NL_
#define HFPP_CODE_PRE_CASA
#define HFPP_CODE_POST_CASA
#define HFPP_CODE_PRE_STL
#define HFPP_CODE_POST_STL

#define HFPP_CODE_RETURN_STL HFPP_GET_FUNC_RETURN
#define HFPP_CODE_RETURN_CASA HFPP_GET_FUNC_RETURN
#define HFPP_CODE_RETURN_hARRAY BOOST_PP_IF(HFPP_FUNC_IS_VOID,while(iterate) {  _H_NL_, while(iterate) {  _H_NL_ returnvalue = )
#define HFPP_CODE_RETURN_hARRAYALL BOOST_PP_IF(HFPP_FUNC_IS_VOID, while(iterate) {  _H_NL_ ,  while(iterate) {  _H_NL_ returnvalue = )

#define HFPP_CODE_RETURN_TYPE_STL HFPP_GET_FUNC_BASETYPE
#define HFPP_CODE_RETURN_TYPE_CASA HFPP_GET_FUNC_BASETYPE
#define HFPP_CODE_RETURN_TYPE_hARRAY BOOST_PP_IF(HFPP_FUNC_IS_VOID,HFPP_GET_FUNC_BASETYPE,BOOST_PP_IF(HFPP_FUNC_KEEP_RETURN_TYPE_FIXED,HFPP_GET_FUNC_BASETYPE,vector<HFPP_GET_FUNC_BASETYPE>))
#define HFPP_CODE_RETURN_TYPE_hARRAYALL BOOST_PP_IF(HFPP_FUNC_IS_VOID,HFPP_GET_FUNC_BASETYPE,BOOST_PP_IF(HFPP_FUNC_KEEP_RETURN_TYPE_FIXED,HFPP_GET_FUNC_BASETYPE,vector<HFPP_GET_FUNC_BASETYPE>))

#define HFPP_GET_PAR_STRING_NAME_AND_VAL_hARRAY(N) (HString)"  Par "+hf2string(N)+": "+BOOST_PP_STRINGIZE(HFPP_GET_PAR_NAME(N))+" = "+BOOST_PP_IF(HFPP_GET_PAR_DIM(N),"array["+BOOST_PP_STRINGIZE(HFPP_GET_PAR_BASETYPE(N))+","+hf2string(HFPP_GET_PAR_NAME(N).length())+"] : "+pretty_vec(HFPP_GET_PAR_NAME(N),3),hf2string(HFPP_GET_PAR_NAME(N)))
#define HFPP_GET_PAR_STRING_NAME_AND_VAL_hARRAYALL(N) (HString)"  Par "+hf2string(N)+": "+BOOST_PP_STRINGIZE(HFPP_GET_PAR_NAME(N))+" = "+BOOST_PP_IF(HFPP_GET_PAR_DIM(N),"array["+BOOST_PP_STRINGIZE(HFPP_GET_PAR_BASETYPE(N))+","+hf2string(HFPP_GET_PAR_NAME(N).length())+"] : "+pretty_vec(HFPP_GET_PAR_NAME(N),3),"vec("+BOOST_PP_STRINGIZE(HFPP_GET_PAR_BASETYPE(N))+hf2string((HInteger)HFPP_GET_PAR_NAME(N).size())+") : "+pretty_vec(HFPP_GET_PAR_NAME(N),3))

#define HFPP_CODE_PRE_PARLIST_STL(N)
#define HFPP_CODE_PRE_PARLIST_CASA(N)
#define HFPP_CODE_PRE_PARLIST_hARRAY(N)  if (hist) HFPP_GET_PAR_NAME(HFPP_FUNC_MASTER_ARRAY_PARAMETER).addHistory((HString)BOOST_PP_STRINGIZE(HFPP_FUNC_NAME),HFPP_GET_PAR_STRING_NAME_AND_VAL_hARRAY(N)); _H_NL_
#define HFPP_CODE_PRE_PARLIST_hARRAYALL(N) BOOST_PP_IF(HFPP_GET_PAR_DIM(N),BOOST_PP_EMPTY(),BOOST_PP_IF(HFPP_PAR_TYPE_IS_TEMPLATED_##N,typename,BOOST_PP_EMPTY()) vector< HFPP_GET_PAR_BASETYPE(N) >::iterator HFPP_GET_PAR_ITERNAME(N) = HFPP_GET_PAR_NAME(N).begin(); _H_NL_)\
 if (hist) HFPP_GET_PAR_NAME(HFPP_FUNC_MASTER_ARRAY_PARAMETER).addHistory((HString)BOOST_PP_STRINGIZE(HFPP_FUNC_NAME),HFPP_GET_PAR_STRING_NAME_AND_VAL_hARRAYALL(N)); _H_NL_
#define HFPP_CODE_POST_PARLIST_STL(N)
#define HFPP_CODE_POST_PARLIST_CASA(N)
#define HFPP_CODE_POST_PARLIST_hARRAY(N) BOOST_PP_IF(HFPP_GET_PAR_DIM(N), HFPP_GET_PAR_NAME(N).next();_H_NL_,BOOST_PP_EMPTY())
#define HFPP_CODE_POST_PARLIST_hARRAYALL(N) BOOST_PP_IF(HFPP_GET_PAR_DIM(N), \
    HFPP_GET_PAR_NAME(N).next();_H_NL_, \
    HFPP_GET_PAR_ITERNAME(N)++; \
    if (HFPP_GET_PAR_NAME(N).end()==HFPP_GET_PAR_ITERNAME(N)) HFPP_GET_PAR_ITERNAME(N) = HFPP_GET_PAR_NAME(N).begin(); _H_NL_)

//Calls the above defined converter functions
#define HFPP_CONVERT_PAR_INPUT(DIM,FROM_WRAPPERTYPE,TO_WRAPPERTYPE,VEC) BOOST_PP_CAT(BOOST_PP_CAT(BOOST_PP_CAT(BOOST_PP_CAT(HFPP_CONVERT_PAR_INPUT_,FROM_WRAPPERTYPE),_TO_),TO_WRAPPERTYPE),DIM)(VEC)
#define HFPP_CONVERT_PAR_INPUT_SLICED(DIM,FROM_WRAPPERTYPE,TO_WRAPPERTYPE,VEC) BOOST_PP_CAT(BOOST_PP_CAT(BOOST_PP_CAT(BOOST_PP_CAT(HFPP_CONVERT_PAR_INPUT_SLICED_,FROM_WRAPPERTYPE),_TO_),TO_WRAPPERTYPE),DIM)(VEC)

//delivers a form suitable to be used as input parameters for calling a function using a different container class (e.g., VEC -> VEC.begin(),VEC.end())
#define HFPP_GET_PAR_INPUT(N,FROM_WRAPPERTYPE)  HFPP_CONVERT_PAR_INPUT(HFPP_GET_PAR_DIM(N),FROM_WRAPPERTYPE,HFPP_GET_PAR_BASE_CLASS(N),HFPP_GET_PAR_NAME(N))
#define HFPP_GET_PAR_INPUT_SLICED(N,FROM_WRAPPERTYPE)  HFPP_CONVERT_PAR_INPUT_SLICED(HFPP_GET_PAR_DIM(N),FROM_WRAPPERTYPE,HFPP_GET_PAR_BASE_CLASS(N),HFPP_GET_PAR_NAME(N))

#define HFPP_CODE_PRE_PARLIST_MACRO(ZZZ,N,WRAPPERTYPE)  HFPP_CODE_PRE_PARLIST_##WRAPPERTYPE(N)
#define HFPP_CODE_POST_PARLIST_MACRO(ZZZ,N,WRAPPERTYPE)  HFPP_CODE_POST_PARLIST_##WRAPPERTYPE(N)
#define HFPP_GET_PAR_INPUT_MACRO(ZZZ,N,FROM_WRAPPERTYPE)  HFPP_GET_PAR_INPUT(N,FROM_WRAPPERTYPE)
#define HFPP_GET_PAR_INPUT_MACRO_SLICED(ZZZ,N,FROM_WRAPPERTYPE)  HFPP_GET_PAR_INPUT_SLICED(N,FROM_WRAPPERTYPE)

#define HFPP_CODE_PRE_PARLIST(WRAPPERTYPE) BOOST_PP_REPEAT(HFPP_GET_FUNC_PARNUM,HFPP_CODE_PRE_PARLIST_MACRO,WRAPPERTYPE)
#define HFPP_CODE_POST_PARLIST(WRAPPERTYPE) BOOST_PP_REPEAT(HFPP_GET_FUNC_PARNUM,HFPP_CODE_POST_PARLIST_MACRO,WRAPPERTYPE)
#define HFPP_GET_PARLIST_INPUT(WRAPPERTYPE) BOOST_PP_ENUM(HFPP_GET_FUNC_PARNUM,HFPP_GET_PAR_INPUT_MACRO,WRAPPERTYPE)
#define HFPP_GET_PARLIST_INPUT_SLICED(WRAPPERTYPE) BOOST_PP_ENUM(HFPP_GET_FUNC_PARNUM,HFPP_GET_PAR_INPUT_MACRO_SLICED,WRAPPERTYPE)

#define HFPP_GET_FUNC_TEMPLATE_TYPENAMES_MACRO(ZZZ,N,XXX) class HFPP_GET_TEMPLATE_PARAMETER_NAME(BOOST_PP_INC(N))

#define HFPP_GET_FUNC_TEMPLATE_TYPENAMES BOOST_PP_ENUM(HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_GET_FUNC_TEMPLATE_TYPENAMES_MACRO,BOOST_PP_EMPTY())

//Now generate the Wrappers of certain types and for certain file type
//wrappers for stl vectors in the .cc (actual source code) file
#define HFPP_MAKE_WRAPPERS_VEC_CC(WRAPPERTYPE) \
  HFPP_GET_FUNC_TEMPLATE_DEFINITION inline HFPP_CODE_RETURN_TYPE_##WRAPPERTYPE BOOST_PP_IF(HFPP_GET_FUNC_PASSREFERENCE,&,BOOST_PP_EMPTY()) HFPP_GET_FUNC_NAME(HFPP_GET_PARLIST_DECLARATION_TEMPLATED(WRAPPERTYPE,HFPP_TEMPLATE_PARAMETER_NAMES)) { _H_NL_ \
      HFPP_CODE_PRE \
      HFPP_CODE_PRE_##WRAPPERTYPE \
      HFPP_CODE_PRE_PARLIST(WRAPPERTYPE)  \
      HFPP_CODE_RETURN_##WRAPPERTYPE HFPP_GET_FUNC_BASENAME  (HFPP_GET_PARLIST_INPUT(WRAPPERTYPE)); _H_NL_ \
      HFPP_CODE_POST_PARLIST(WRAPPERTYPE)  \
      HFPP_CODE_POST_##WRAPPERTYPE \
      HFPP_CODE_POST \
  } _H_NL_

//This is an extra wrapper made to access slices of vectors
#define HFPP_MAKE_WRAPPERS_VEC_SLICED_CC(WRAPPERTYPE) \
  HFPP_GET_FUNC_TEMPLATE_DEFINITION inline HFPP_GET_FUNC_BASETYPE HFPP_GET_FUNC_NAME_SLICED (HFPP_GET_PARLIST_DECLARATION_TEMPLATED_SLICED(WRAPPERTYPE,HFPP_TEMPLATE_PARAMETER_NAMES)) { _H_NL_ \
      HFPP_CODE_PRE \
      HFPP_GET_FUNC_RETURN HFPP_GET_FUNC_BASENAME  (HFPP_GET_PARLIST_INPUT_SLICED(WRAPPERTYPE)); _H_NL_ \
  } _H_NL_

#define HFPP_MAKE_WRAPPERS_VEC_hFILE(WRAPPERTYPE)\
  HFPP_GET_FUNC_TEMPLATE_DEFINITION HFPP_CODE_RETURN_TYPE_##WRAPPERTYPE BOOST_PP_IF(HFPP_GET_FUNC_PASSREFERENCE,&,BOOST_PP_EMPTY()) HFPP_GET_FUNC_NAME(HFPP_GET_PARLIST_DECLARATION_TEMPLATED(WRAPPERTYPE,HFPP_TEMPLATE_PARAMETER_NAMES));
#define HFPP_MAKE_WRAPPERS_VEC_SLICED_hFILE(WRAPPERTYPE)\
  HFPP_GET_FUNC_TEMPLATE_DEFINITION HFPP_GET_FUNC_BASETYPE HFPP_GET_FUNC_NAME(HFPP_GET_PARLIST_DECLARATION_TEMPLATED_SLICED(WRAPPERTYPE,HFPP_TEMPLATE_PARAMETER_NAMES));

#define HFPP_MAKE_WRAPPERS_MACRO_VEC_CC(ZZZ,YYY,WRAPPERTYPE) HFPP_MAKE_WRAPPERS_VEC_CC(WRAPPERTYPE)
#define HFPP_MAKE_WRAPPERS_MACRO_VEC_hFILE(ZZZ,YYY,WRAPPERTYPE) HFPP_MAKE_WRAPPERS_VEC_hFILE(WRAPPERTYPE)

#define HFPP_MAKE_WRAPPERS_MACRO_VEC_SLICED_CC(ZZZ,YYY,WRAPPERTYPE) HFPP_MAKE_WRAPPERS_VEC_SLICED_CC(WRAPPERTYPE)
#define HFPP_MAKE_WRAPPERS_MACRO_VEC_SLICED_hFILE(ZZZ,YYY,WRAPPERTYPE) HFPP_MAKE_WRAPPERS_VEC_SLICED_hFILE(WRAPPERTYPE)

#define HFPP_MAKE_WRAPPERS_hARRAY_hFILE HFPP_MAKE_WRAPPERS_VEC_hFILE(hARRAY)
#define HFPP_MAKE_WRAPPERS_hARRAYALL_hFILE HFPP_MAKE_WRAPPERS_VEC_hFILE(hARRAYALL)
#define HFPP_MAKE_WRAPPERS_CASA_hFILE HFPP_MAKE_WRAPPERS_VEC_hFILE(CASA)
#define HFPP_MAKE_WRAPPERS_STL_hFILE HFPP_MAKE_WRAPPERS_VEC_hFILE(STL)
#define HFPP_MAKE_WRAPPERS_hARRAY_CC HFPP_MAKE_WRAPPERS_VEC_CC(hARRAY)
#define HFPP_MAKE_WRAPPERS_hARRAYALL_CC HFPP_MAKE_WRAPPERS_VEC_CC(hARRAYALL)
#define HFPP_MAKE_WRAPPERS_CASA_CC HFPP_MAKE_WRAPPERS_VEC_CC(CASA)
#define HFPP_MAKE_WRAPPERS_STL_CC HFPP_MAKE_WRAPPERS_VEC_CC(STL)
#define HFPP_MAKE_WRAPPERS_STL_hPYTHON
#define HFPP_MAKE_WRAPPERS_CASA_hPYTHON
#define HFPP_MAKE_WRAPPERS_hARRAY_hPYTHON
#define HFPP_MAKE_WRAPPERS_hARRAYALL_hPYTHON

#define HFPP_MAKE_WRAPPERS_SLICED_hARRAY_hFILE HFPP_MAKE_WRAPPERS_VEC_SLICED_hFILE(hARRAY)
#define HFPP_MAKE_WRAPPERS_SLICED_hARRAYALL_hFILE HFPP_MAKE_WRAPPERS_VEC_SLICED_hFILE(hARRAYALL)
#define HFPP_MAKE_WRAPPERS_SLICED_CASA_hFILE HFPP_MAKE_WRAPPERS_VEC_SLICED_hFILE(CASA)
#define HFPP_MAKE_WRAPPERS_SLICED_STL_hFILE HFPP_MAKE_WRAPPERS_VEC_SLICED_hFILE(STL)
#define HFPP_MAKE_WRAPPERS_SLICED_CASA_CC HFPP_MAKE_WRAPPERS_VEC_SLICED_CC(CASA)
#define HFPP_MAKE_WRAPPERS_SLICED_hARRAY_CC HFPP_MAKE_WRAPPERS_VEC_SLICED_CC(hARRAY)
#define HFPP_MAKE_WRAPPERS_SLICED_hARRAYALL_CC HFPP_MAKE_WRAPPERS_VEC_SLICED_CC(hARRAYALL)
#define HFPP_MAKE_WRAPPERS_SLICED_STL_CC HFPP_MAKE_WRAPPERS_VEC_SLICED_CC(STL)
#define HFPP_MAKE_WRAPPERS_SLICED_STL_hPYTHON
#define HFPP_MAKE_WRAPPERS_SLICED_CASA_hPYTHON
#define HFPP_MAKE_WRAPPERS_SLICED_hARRAY_hPYTHON
#define HFPP_MAKE_WRAPPERS_SLICED_hARRAYALL_hPYTHON

//------------------------------------------------------------------------------
//HFPP_LOOP allows one to loop over a list of index
//sequences. LOOP(3,2,FUNC, CONSTDATA) means that FUNC will be called
//with a sequence of length 2 (n1)(n2) and a constant parameter
//CONSTDATA, where n1 and n2 take all possible permumtations between
//n1/2=0 and n1/2=2. This is used to explicitly template functions
#define HFPP_LOOP_INDEXLIST(LIST,FUNC,DATA) BOOST_PP_LIST_FOR_EACH(FUNC,DATA,LIST)
#define HFPP_LOOP(N,M,FUNC,DATA) HFPP_LOOP_INDEXLIST(BOOST_PP_CAT(HFPP_INDEXLIST_,BOOST_PP_CAT(N,BOOST_PP_CAT(x,M))),FUNC,DATA)

//Creates a unique name for a pointer variable, consisting of the
//function name, the template types (provided as a sequence:
//(int)(double)(complex)), and a potential variant number to make
#define HFPP_GET_PYTHON_POINTER_VARIABLE(TYPES,CLASS) BOOST_PP_CAT(fptr_,BOOST_PP_CAT(HFPP_GET_FUNC_BASENAME,BOOST_PP_CAT(_,BOOST_PP_CAT(CLASS,BOOST_PP_CAT(_,BOOST_PP_SEQ_CAT(TYPES  (_) HFPP_GET_FUNC_PAR_NAMES (_) HFPP_GET_FUNC_PAR_TYPES  (_) HFPP_GET_FUNC_PAR_CLASSES))))))
#define HFPP_GET_PYTHON_POINTER_VARIABLE_SLICED(TYPES,CLASS) BOOST_PP_CAT(fptr_,BOOST_PP_CAT(HFPP_GET_FUNC_BASENAME_SLICED,BOOST_PP_CAT(_,BOOST_PP_CAT(CLASS,BOOST_PP_CAT(_,BOOST_PP_SEQ_CAT(TYPES (_) HFPP_GET_FUNC_PAR_NAMES (_) HFPP_GET_FUNC_PAR_TYPES (_) HFPP_GET_FUNC_PAR_CLASSES))))))

//This turns a sequence of indices (i.e., (1)(0)(2)) into a sequence
//of the corresponsing wrapper type (e.g., (double)(int)(complex))
#define HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST_MACRO(ZZZ,DATA,ELEM) (HFPP_GET_WRAPPER_TYPE(ELEM))
#define HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST) BOOST_PP_SEQ_FOR_EACH(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST_MACRO,BOOST_PP_EMPTY(),LIST)

//------------------------------------------------------------------------
//Generate the defintions of the external variables which hold the
//pointer to the functions to be exposed to Python - to be included in
//the hFILE

#define HFPP_LOOP_MAKE_WRAPPER_PYTHON_hFILE(ZZZ,DATA,LIST) HFPP_MAKE_WRAPPER_PYTHON_hFILE(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST))
#define HFPP_LOOP_MAKE_WRAPPER_PYTHON_SLICED_hFILE(ZZZ,DATA,LIST) HFPP_MAKE_WRAPPER_PYTHON_SLICED_hFILE(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST))

#define HFPP_MAKE_WRAPPERS_PYTHON_hFILE HFPP_LOOP(HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES,HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_LOOP_MAKE_WRAPPER_PYTHON_hFILE,DATA)
#define HFPP_MAKE_WRAPPERS_PYTHON_SLICED_hFILE HFPP_LOOP(HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES,HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_LOOP_MAKE_WRAPPER_PYTHON_SLICED_hFILE,DATA)

#define HFPP_MAKE_WRAPPER_PYTHON_hFILE(TYPES) BOOST_PP_SEQ_FOR_EACH(HFPP_MAKE_WRAPPER_PYTHON_hFILE_MACRO,TYPES,HFPP_PYTHON_WRAPPER_CLASSES)
#define HFPP_MAKE_WRAPPER_PYTHON_hFILE_MACRO(ZZZ,TYPES,CLASS) HFPP_MAKE_WRAPPER_PYTHON_hFILE_CLASS(TYPES,CLASS)
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_hFILE(TYPES) BOOST_PP_SEQ_FOR_EACH(HFPP_MAKE_WRAPPER_PYTHON_SLICED_hFILE_MACRO,TYPES,HFPP_PYTHON_WRAPPER_CLASSES_SLICED)
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_hFILE_MACRO(ZZZ,TYPES,CLASS) HFPP_MAKE_WRAPPER_PYTHON_SLICED_hFILE_CLASS(TYPES,CLASS)

#define HFPP_MAKE_WRAPPER_PYTHON_hFILE_CLASS(TYPES,CLASS)			\
  extern HFPP_GET_FUNC_TYPE_DECLARATION_TEMPLATED(CLASS,()TYPES) (*HFPP_GET_PYTHON_POINTER_VARIABLE(TYPES,CLASS))(HFPP_GET_PARLIST_DECLARATION_TEMPLATED(CLASS,()TYPES)); _H_NL_
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_hFILE_CLASS(TYPES,CLASS)			\
  extern HFPP_GET_FUNC_TYPE_DECLARATION_TEMPLATED(CLASS,()TYPES) (*HFPP_GET_PYTHON_POINTER_VARIABLE_SLICED(TYPES,CLASS))(HFPP_GET_PARLIST_DECLARATION_TEMPLATED_SLICED(CLASS,()TYPES)); _H_NL_

//Generate the variables which hold the pointer to the functions to be
//exposed to Python - to be included in the .cc file
#define HFPP_LOOP_MAKE_WRAPPER_PYTHON_CC(ZZZ,DATA,LIST) HFPP_MAKE_WRAPPER_PYTHON_CC(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST))
#define HFPP_MAKE_WRAPPERS_PYTHON_CC HFPP_LOOP(HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES,HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_LOOP_MAKE_WRAPPER_PYTHON_CC,DATA)
#define HFPP_LOOP_MAKE_WRAPPER_PYTHON_SLICED_CC(ZZZ,DATA,LIST) HFPP_MAKE_WRAPPER_PYTHON_SLICED_CC(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST))
#define HFPP_MAKE_WRAPPERS_PYTHON_SLICED_CC HFPP_LOOP(HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES,HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_LOOP_MAKE_WRAPPER_PYTHON_SLICED_CC,DATA)

#define HFPP_MAKE_WRAPPER_PYTHON_CC(TYPES) BOOST_PP_SEQ_FOR_EACH(HFPP_MAKE_WRAPPER_PYTHON_CC_MACRO,TYPES,HFPP_PYTHON_WRAPPER_CLASSES)
#define HFPP_MAKE_WRAPPER_PYTHON_CC_MACRO(ZZZ,TYPES,CLASS) HFPP_MAKE_WRAPPER_PYTHON_CC_CLASS(TYPES,CLASS)
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_CC(TYPES) BOOST_PP_SEQ_FOR_EACH(HFPP_MAKE_WRAPPER_PYTHON_SLICED_CC_MACRO,TYPES,HFPP_PYTHON_WRAPPER_CLASSES_SLICED)
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_CC_MACRO(ZZZ,TYPES,CLASS) HFPP_MAKE_WRAPPER_PYTHON_SLICED_CC_CLASS(TYPES,CLASS)

#define HFPP_MAKE_WRAPPER_PYTHON_CC_CLASS(TYPES,CLASS)			\
  HFPP_GET_FUNC_TYPE_DECLARATION_TEMPLATED(CLASS,()TYPES) (*HFPP_GET_PYTHON_POINTER_VARIABLE(TYPES,CLASS))(HFPP_GET_PARLIST_DECLARATION_TEMPLATED(CLASS,()TYPES)) = &HFPP_GET_FUNC_NAME; _H_NL_

#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_CC_CLASS(TYPES,CLASS)		\
  HFPP_GET_FUNC_TYPE_DECLARATION_TEMPLATED (CLASS,()TYPES) (*HFPP_GET_PYTHON_POINTER_VARIABLE_SLICED(TYPES,CLASS))(HFPP_GET_PARLIST_DECLARATION_TEMPLATED_SLICED(CLASS,()TYPES)) = &HFPP_GET_FUNC_NAME_SLICED; _H_NL_

//------------------------------------------------------------------------
//Make the wrapper to be included in the .hpp file that contains the BOOST PYTHON bindings
#define HFPP_MAKE_WRAPPER_MACRO_PYTHON_hPYTHON(ZZZ,YYY,TYPE) HFPP_MAKE_WRAPPER_PYTHON_hPYTHON(TYPE) _H_NL_
#define HFPP_LOOP_MAKE_WRAPPER_PYTHON_hPYTHON(ZZZ,DATA,LIST) HFPP_MAKE_WRAPPER_PYTHON_hPYTHON(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST))

#define HFPP_MAKE_WRAPPER_MACRO_PYTHON_SLICED_hPYTHON(ZZZ,YYY,TYPE) HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON(TYPE) _H_NL_
#define HFPP_LOOP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON(ZZZ,DATA,LIST) HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON(HFPP_GET_WRAPPER_TYPES_SEQ_FROM_INDEXLIST(LIST))

#define HFPP_MAKE_WRAPPERS_PYTHON_hPYTHON HFPP_LOOP(HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES,HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_LOOP_MAKE_WRAPPER_PYTHON_hPYTHON,DATA)
#define HFPP_MAKE_WRAPPERS_PYTHON_SLICED_hPYTHON HFPP_LOOP(HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES,HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS,HFPP_LOOP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON,DATA)

#define HFPP_MAKE_WRAPPER_PYTHON_hPYTHON(TYPES) BOOST_PP_SEQ_FOR_EACH(HFPP_MAKE_WRAPPER_PYTHON_hPYTHON_MACRO,TYPES,HFPP_PYTHON_WRAPPER_CLASSES)
#define HFPP_MAKE_WRAPPER_PYTHON_hPYTHON_MACRO(ZZZ,TYPES,CLASS) HFPP_MAKE_WRAPPER_PYTHON_hPYTHON_CLASS(TYPES,CLASS)
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON(TYPES) BOOST_PP_SEQ_FOR_EACH(HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON_MACRO,TYPES,HFPP_PYTHON_WRAPPER_CLASSES_SLICED)
#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON_MACRO(ZZZ,TYPES,CLASS) HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON_CLASS(TYPES,CLASS)

#define HFPP_MAKE_WRAPPER_PYTHON_hPYTHON_CLASS(TYPES,CLASS)			\
  def(BOOST_PP_STRINGIZE(HFPP_GET_FUNC_NAME),HFPP_GET_PYTHON_POINTER_VARIABLE(TYPES,CLASS)  BOOST_PP_COMMA_IF(HFPP_GET_FUNC_PASSREFERENCE) BOOST_PP_IF(HFPP_GET_FUNC_PASSREFERENCE,return_internal_reference<>(),BOOST_PP_EMPTY())); _H_NL_

#define HFPP_MAKE_WRAPPER_PYTHON_SLICED_hPYTHON_CLASS(TYPES,CLASS)		\
  def(BOOST_PP_STRINGIZE(BOOST_PP_CAT(HFPP_GET_FUNC_NAME,_sliced)),HFPP_GET_PYTHON_POINTER_VARIABLE_SLICED(TYPES,CLASS)  BOOST_PP_COMMA_IF(HFPP_GET_FUNC_PASSREFERENCE) BOOST_PP_IF(HFPP_GET_FUNC_PASSREFERENCE,return_internal_reference<>(),BOOST_PP_EMPTY())); _H_NL_

//========================================================================
// Choose the correct wrapper appropriate for the current type of
// file(.cc, .h, python exposer). This allows one to generate wrappers of
// different kind, depending on the file type one is using
//========================================================================
#define HFPP_GENERATE_WRAPPERS_VEC_FILE(WRAPPERCLASS,FILE) HFPP_MAKE_WRAPPERS_##WRAPPERCLASS##_##FILE
#define HFPP_GENERATE_WRAPPERS_VEC_SLICED_FILE(WRAPPERCLASS,FILE) HFPP_MAKE_WRAPPERS_SLICED_##WRAPPERCLASS##_##FILE
#define HFPP_WRAPPERCLASS_AND_FILETYPE(WRAPPERCLASS) (WRAPPERCLASS,HFPP_FILETYPE)
#define HFPP_GENERATE_WRAPPERS_VEC_MACRO(ZZZ,YYY,WRAPPERCLASS) BOOST_PP_EXPAND(HFPP_GENERATE_WRAPPERS_VEC_FILE HFPP_WRAPPERCLASS_AND_FILETYPE(WRAPPERCLASS)) _H_NL_
#define HFPP_GENERATE_WRAPPERS_VEC_SLICED_MACRO(ZZZ,YYY,WRAPPERCLASS) BOOST_PP_EXPAND(HFPP_GENERATE_WRAPPERS_VEC_SLICED_FILE HFPP_WRAPPERCLASS_AND_FILETYPE(WRAPPERCLASS)) _H_NL_

#define HFPP_GENERATE_WRAPPERS_VEC BOOST_PP_SEQ_FOR_EACH(HFPP_GENERATE_WRAPPERS_VEC_MACRO,,HFPP_WRAPPER_CLASSES)
#define HFPP_GENERATE_WRAPPERS_VEC_SLICED BOOST_PP_SEQ_FOR_EACH(HFPP_GENERATE_WRAPPERS_VEC_SLICED_MACRO,,HFPP_WRAPPER_CLASSES_SLICED)

#define HFPP_GENERATE_WRAPPERS_PYTHON_FILE(FILE) HFPP_MAKE_WRAPPERS_PYTHON_##FILE
#define HFPP_GENERATE_WRAPPERS_PYTHON_SLICED_FILE(FILE) HFPP_MAKE_WRAPPERS_PYTHON_SLICED_##FILE
#define HFPP_FILETYPE2() (HFPP_FILETYPE)
#define HFPP_GENERATE_WRAPPERS_PYTHON        BOOST_PP_IF(HFPP_MAKE_PYTHONWRAPPERS,BOOST_PP_EXPAND(HFPP_GENERATE_WRAPPERS_PYTHON_FILE        HFPP_FILETYPE2()),BOOST_PP_EMPTY())
#define HFPP_GENERATE_WRAPPERS_PYTHON_SLICED BOOST_PP_IF(HFPP_MAKE_PYTHONWRAPPERS,BOOST_PP_EXPAND(HFPP_GENERATE_WRAPPERS_PYTHON_SLICED_FILE HFPP_FILETYPE2()),BOOST_PP_EMPTY())

#define HFPP_MAKE_WRAPPERS_SLICED HFPP_GENERATE_WRAPPERS_VEC_SLICED _H_NL_ HFPP_GENERATE_WRAPPERS_PYTHON_SLICED
#define HFPP_MAKE_WRAPPERS HFPP_GENERATE_WRAPPERS_VEC _H_NL_ HFPP_GENERATE_WRAPPERS_PYTHON

#define HFPP_LOOP_CONCAT_WRAPPERTYPES_MACRO(ZZZ,DATA,ELEM) (HFPP_GET_WRAPPER_TYPE(ELEM))
#define HFPP_LOOP_CONCAT_WRAPPERTYPES(ZZZ,DATA,LIST) BOOST_PP_SEQ_CAT(BOOST_PP_SEQ_FOR_EACH(HFPP_LOOP_CONCAT_WRAPPERTYPES_MACRO,DATA,LIST))

#define HFPP_LOOP_CONCAT_INDICES(ZZZ,DATA,LIST) (DATA,LIST)


#endif /* HFPP_H */

