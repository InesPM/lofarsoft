/* hfppnew-generatewrappers.def - START ..........................................*/
//
//GENERATING WRAPPERS
//


//First set all the values to default values, if not present
//------------------------------------------------------------------------------
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS 0
#define HFPP_FUNC_HAS_VECTORS 0
#define HFPP_FUNC_HAS_SCALARS 0

#ifndef HFPP_FUNC_KEEP_RETURN_TYPE_FIXED 
#define HFPP_FUNC_KEEP_RETURN_TYPE_FIXED HFPP_FALSE
#endif
        
#ifndef HFPP_FUNC_MASTER_ARRAY_PARAMETER 
#define HFPP_FUNC_MASTER_ARRAY_PARAMETER 0
#endif


#ifndef HFPP_CLASS_STL
#define HFPP_CLASS_STL (STL)
#endif

#ifndef HFPP_CLASS_CASA
#define HFPP_CLASS_CASA (CASA)
#endif

#ifndef HFPP_CLASS_hARRAY
#define HFPP_CLASS_hARRAY (hARRAY)
#endif

#ifndef HFPP_CLASS_hARRAYALL
#define HFPP_CLASS_hARRAYALL (hARRAYALL)
#endif

#ifndef HFPP_FUNC_SLICED
#define HFPP_FUNC_SLICED HFPP_FALSE
#endif

//#ifndef HFPP_FUNC_hARRAY
//#define HFPP_FUNC_hARRAY 1
//#endif

#ifndef HFPP_FUNC_VARIANT
#define HFPP_FUNC_VARIANT
#endif

#ifndef HFPP_CODE_PRE
#define HFPP_CODE_PRE
#endif

#ifndef HFPP_CODE_POST
#define HFPP_CODE_POST
#endif

#if HFPP_BUILD_ADDITIONAL_Cpp_WRAPPERS == HFPP_NONE	
#define HFPP_WRAPPER_CLASSES	       
#define HFPP_PYTHON_WRAPPER_CLASSES (STL)
#define HFPP_PYTHON_WRAPPER_CLASSES_SLICED (STL)
#endif	

#ifndef HFPP_WRAPPER_CLASSES_SLICED
//Defines all the different types of wrappers that will be built (STL, CASA, ...)
#define HFPP_WRAPPER_CLASSES_SLICED HFPP_DEFAULT_WRAPPER_CLASSES_SLICED
#endif


#ifndef HFPP_WRAPPER_CLASSES
//Defines all the different types of wrappers that will be built (STL, CASA, ...)
#define HFPP_WRAPPER_CLASSES HFPP_DEFAULT_WRAPPER_CLASSES
#endif


#ifndef HFPP_PYTHON_WRAPPER_CLASSES
//Defines all the different types of wrappers that will be built (STL, CASA, ...)
#define HFPP_PYTHON_WRAPPER_CLASSES HFPP_DEFAULT_PYTHON_WRAPPER_CLASSES
#endif

#ifndef HFPP_PYTHON_WRAPPER_CLASSES_SLICED
#define HFPP_PYTHON_WRAPPER_CLASSES_SLICED HFPP_DEFAULT_PYTHON_WRAPPER_CLASSES_SLICED
#endif


#ifndef HFPP_MAKE_PYTHONWRAPPERS
#define  HFPP_MAKE_PYTHONWRAPPERS HFPP_TRUE
#endif

//Defines all the different base types (int, double, ...) that will be
//instantiated for template parameters. Important e.g. for pythn
//bindings
#ifndef HFPP_WRAPPER_TYPES
#define HFPP_WRAPPER_TYPES HFPP_DEFAULT_WRAPPER_TYPES
#endif

//Defines names of the template parameters (e.g., T, S) that are being
//used in templated function defintions (e.g., template <class T>)
#ifndef HFPP_TEMPLATE_PARAMETER_NAMES 
#define HFPP_TEMPLATE_PARAMETER_NAMES HFPP_DEFAULT_TEMPLATE_PARAMETER_NAMES
#endif


//Now set some definitions based on conditionals
//------------------------------------------------------------------------------
//Unless, explicitly set, yields a "return" statement if the function
//type is not void (actually, HFPP_VOID, which is = -1)
#if HFPP_GET_FUNC_TYPE_INPUTVALUE == HFPP_VOID	    
#define HFPP_FUNC_TYPE_IS_TEMPLATED HFPP_FALSE
#define HFPP_GET_FUNC_BASETYPE void	
#define HFPP_GET_FUNC_RETURN	  
#define HFPP_FUNC_IS_VOID HFPP_TRUE
#elif HFPP_GET_FUNC_TYPE_INPUTVALUE > 0
#define HFPP_FUNC_TYPE_IS_TEMPLATED HFPP_GET_FUNC_TYPE_INPUTVALUE
#define HFPP_GET_FUNC_BASETYPE BOOST_PP_SEQ_ELEM(HFPP_FUNC_TYPE_IS_TEMPLATED,HFPP_TEMPLATE_PARAMETER_NAMES) 
#define HFPP_GET_FUNC_RETURN return	  
#define HFPP_FUNC_IS_VOID HFPP_FALSE
#if HFPP_FUNC_TYPE_IS_TEMPLATED > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_FUNC_TYPE_IS_TEMPLATED
#endif
#else
#define HFPP_FUNC_TYPE_IS_TEMPLATED HFPP_FALSE
#define HFPP_GET_FUNC_BASETYPE HFPP_GET_FUNC_TYPE_INPUTVALUE
#define HFPP_GET_FUNC_RETURN return	  
#define HFPP_FUNC_IS_VOID HFPP_FALSE
#endif

/* Python code to generate the following blocks
s="""
#ifdef HFPP_PARDEF_$$$
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM %%%
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM($$$)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL($$$) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_$$$ HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_$$$  HFPP_GET_PAR_BASETYPE_VAL($$$)
#if HFPP_GET_PAR_TEMPLATE_VALUE_$$$ > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_$$$
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_$$$ HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_$$$  0
#endif
#endif
"""
for i in range(15): print s.replace("$$$",str(i)).replace("%%%",str(i+1))
*/

#ifdef HFPP_PARDEF_15
------ ATTENTION!!! NUMBER OF PARAMETERS TOO LONG FOR FUNCTION HFPP_GET_FUNC_NAME -------
#endif

#ifdef HFPP_PARDEF_0
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 1
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(0)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(0) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_0 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_0  HFPP_GET_PAR_BASETYPE_VAL(0)
#if HFPP_GET_PAR_TEMPLATE_VALUE_0 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_0
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_0 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_0  0
#endif
#endif


#ifdef HFPP_PARDEF_1
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 2
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(1)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(1) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_1 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_1  HFPP_GET_PAR_BASETYPE_VAL(1)
#if HFPP_GET_PAR_TEMPLATE_VALUE_1 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_1
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_1 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_1  0
#endif
#endif


#ifdef HFPP_PARDEF_2
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 3
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(2)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(2) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_2 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_2  HFPP_GET_PAR_BASETYPE_VAL(2)
#if HFPP_GET_PAR_TEMPLATE_VALUE_2 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_2
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_2 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_2  0
#endif
#endif


#ifdef HFPP_PARDEF_3
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 4
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(3)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(3) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_3 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_3  HFPP_GET_PAR_BASETYPE_VAL(3)
#if HFPP_GET_PAR_TEMPLATE_VALUE_3 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_3
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_3 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_3  0
#endif
#endif


#ifdef HFPP_PARDEF_4
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 5
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(4)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(4) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_4 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_4  HFPP_GET_PAR_BASETYPE_VAL(4)
#if HFPP_GET_PAR_TEMPLATE_VALUE_4 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_4
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_4 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_4  0
#endif
#endif


#ifdef HFPP_PARDEF_5
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 6
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(5)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(5) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_5 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_5  HFPP_GET_PAR_BASETYPE_VAL(5)
#if HFPP_GET_PAR_TEMPLATE_VALUE_5 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_5
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_5 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_5  0
#endif
#endif


#ifdef HFPP_PARDEF_6
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 7
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(6)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(6) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_6 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_6  HFPP_GET_PAR_BASETYPE_VAL(6)
#if HFPP_GET_PAR_TEMPLATE_VALUE_6 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_6
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_6 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_6  0
#endif
#endif


#ifdef HFPP_PARDEF_7
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 8
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(7)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(7) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_7 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_7  HFPP_GET_PAR_BASETYPE_VAL(7)
#if HFPP_GET_PAR_TEMPLATE_VALUE_7 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_7
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_7 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_7  0
#endif
#endif


#ifdef HFPP_PARDEF_8
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 9
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(8)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(8) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_8 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_8  HFPP_GET_PAR_BASETYPE_VAL(8)
#if HFPP_GET_PAR_TEMPLATE_VALUE_8 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_8
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_8 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_8  0
#endif
#endif


#ifdef HFPP_PARDEF_9
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 10
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(9)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(9) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_9 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_9  HFPP_GET_PAR_BASETYPE_VAL(9)
#if HFPP_GET_PAR_TEMPLATE_VALUE_9 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_9
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_9 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_9  0
#endif
#endif


#ifdef HFPP_PARDEF_10
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 11
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(10)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(10) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_10 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_10  HFPP_GET_PAR_BASETYPE_VAL(10)
#if HFPP_GET_PAR_TEMPLATE_VALUE_10 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_10
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_10 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_10  0
#endif
#endif


#ifdef HFPP_PARDEF_11
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 12
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(11)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(11) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_11 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_11  HFPP_GET_PAR_BASETYPE_VAL(11)
#if HFPP_GET_PAR_TEMPLATE_VALUE_11 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_11
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_11 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_11  0
#endif
#endif


#ifdef HFPP_PARDEF_12
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 13
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(12)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(12) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_12 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_12  HFPP_GET_PAR_BASETYPE_VAL(12)
#if HFPP_GET_PAR_TEMPLATE_VALUE_12 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_12
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_12 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_12  0
#endif
#endif


#ifdef HFPP_PARDEF_13
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 14
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(13)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(13) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_13 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_13  HFPP_GET_PAR_BASETYPE_VAL(13)
#if HFPP_GET_PAR_TEMPLATE_VALUE_13 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_13
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_13 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_13  0
#endif
#endif


#ifdef HFPP_PARDEF_14
#undef HFPP_GET_FUNC_PARNUM
#define HFPP_GET_FUNC_PARNUM 15
//Check if parameter is a vector
#if HFPP_GET_PAR_DIM(14)>0
#undef HFPP_FUNC_HAS_VECTORS
#define HFPP_FUNC_HAS_VECTORS 1
#else
#undef HFPP_FUNC_HAS_SCALARS
#define HFPP_FUNC_HAS_SCALARS 1
#endif // HAS_VECTORS
#if HFPP_GET_PAR_BASETYPE_VAL(14) > 0
#define HFPP_PAR_TYPE_IS_TEMPLATED_14 HFPP_TRUE
#define HFPP_GET_PAR_TEMPLATE_VALUE_14  HFPP_GET_PAR_BASETYPE_VAL(14)
#if HFPP_GET_PAR_TEMPLATE_VALUE_14 > HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#define HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS HFPP_GET_PAR_TEMPLATE_VALUE_14
#endif
#else
#define HFPP_PAR_TYPE_IS_TEMPLATED_14 HFPP_FALSE
#define HFPP_GET_PAR_TEMPLATE_VALUE_14  0
#endif
#endif

//------------------------------------------------------------------------

#define HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES BOOST_PP_SEQ_SIZE(HFPP_WRAPPER_TYPES)

#if HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS > 0
#define HFPP_GET_FUNC_TEMPLATE_DEFINITION template < HFPP_GET_FUNC_TEMPLATE_TYPENAMES >
#else
#define HFPP_GET_FUNC_TEMPLATE_DEFINITION
#endif


#ifdef HFPP_VERBOSE
/* hfppnew-generatewrappers.h - DEFAULT Values .................................*/
//
//Decide whether the return value of the function will be adapted to
//the currently wrapped container class or not (only relevant if
//container, e.g. a vector is returned)
/* HFPP_FUNC_KEEP_RETURN_TYPE_FIXED= */ HFPP_FUNC_KEEP_RETURN_TYPE_FIXED
//
//Define the base types of for the container classes will be made available (int, float, ...)
//For each container class all these types will be instantiated
/* HFPP_WRAPPER_TYPES= */ HFPP_WRAPPER_TYPES
/* HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES= */ HFPP_FUNC_NUMBER_OF_WRAPPER_TYPES
//
//Define the classes of wrappers that will be produced (STL, CASA, ....)
/* HFPP_WRAPPER_CLASSES= */ HFPP_WRAPPER_CLASSES
/* HFPP_MAKE_PYTHONWRAPPERS= */ HFPP_MAKE_PYTHONWRAPPERS
/* HFPP_TEMPLATE_PARAMETER_NAMES= */ HFPP_TEMPLATE_PARAMETER_NAMES
/* hfppnew-generatewrappers.h - Conditional Values .............................*/
/* HFPP_GET_FUNC_RETURN = */ HFPP_GET_FUNC_RETURN 
/* HFPP_GET_FUNC_BASETYPE= */ HFPP_GET_FUNC_BASETYPE
/* HFPP_PAR_TYPE_IS_TEMPLATED_0= */ HFPP_PAR_TYPE_IS_TEMPLATED_0
/* HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS = */ HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
/* HFPP_GET_FUNC_TEMPLATE_DEFINITION = */ HFPP_GET_FUNC_TEMPLATE_DEFINITION 
//
#endif

//If function has no vectors don't make multiple Python wrappers for
//different vector classes
#if HFPP_FUNC_HAS_VECTORS
#else
#undef HFPP_PYTHON_WRAPPER_CLASSES
#define HFPP_PYTHON_WRAPPER_CLASSES (STL)
#endif


//Don't do the wrapper class for hArrays, where the scalars become
//vectors, if there are no scalars ...

#if HFPP_FUNC_HAS_SCALARS
#else
#undef HFPP_CLASS_hARRAYALL
#define HFPP_CLASS_hARRAYALL
#endif

#ifndef HFPP_DONOT_MAKE_WRAPPERS
////////////////////////////////////////////////////////////////////////////////
//Generate wrappers
HFPP_MAKE_WRAPPERS
#if HFPP_FUNC_HAS_VECTORS && HFPP_FUNC_SLICED
HFPP_MAKE_WRAPPERS_SLICED
#endif
////////////////////////////////////////////////////////////////////////////////
//

//========================================================================
//--Undefine parameters
//========================================================================
#undef HFPP_FUNC_VARIANT
#undef HFPP_FUNC_NAME
#undef HFPP_FUNC_KEEP_RETURN_TYPE_FIXED
#undef HFPP_WRAPPER_CLASSES
#undef HFPP_WRAPPER_CLASSES_SLICED
#undef HFPP_WRAPPER_TYPES
#undef HFPP_TEMPLATE_PARAMETER_NAMES 
#undef HFPP_FUNC_TYPE_IS_TEMPLATED 
#undef HFPP_FUNC_NUMBER_OF_TEMPLATE_PARAMETERS
#undef HFPP_GET_FUNC_TEMPLATE_DEFINITION
#undef HFPP_GET_FUNC_BASETYPE
#undef HFPP_GET_FUNC_RETURN
#undef HFPP_CODE_PRE
#undef HFPP_CODE_POST
#undef HFPP_FUNC_HAS_VECTORS
#undef HFPP_FUNC_HAS_SCALARS
#undef HFPP_FUNC_SLICED 
#undef HFPP_PYTHON_WRAPPER_CLASSES
#undef HFPP_PYTHON_WRAPPER_CLASSES_SLICED
#undef HFPP_BUILD_ADDITIONAL_Cpp_WRAPPERS
#undef HFPP_FUNC_IS_VOID
#undef HFPP_FUNC_MASTER_ARRAY_PARAMETER
       
#undef HFPP_CLASS_STL
#undef HFPP_CLASS_CASA
#undef HFPP_CLASS_hARRAY
#undef HFPP_CLASS_hARRAYALL

//--Undefine user-defined parameters from cc file
#undef HFPP_FUNCDEF
#undef HFPP_PARDEF_0
#undef HFPP_PARDEF_1
#undef HFPP_PARDEF_2
#undef HFPP_PARDEF_3
#undef HFPP_PARDEF_4
#undef HFPP_PARDEF_5
#undef HFPP_PARDEF_6
#undef HFPP_PARDEF_7
#undef HFPP_PARDEF_8
#undef HFPP_PARDEF_9
#undef HFPP_PARDEF_10
#undef HFPP_PARDEF_11
#undef HFPP_PARDEF_12
#undef HFPP_PARDEF_13
#undef HFPP_PARDEF_14

#undef HFPP_PAR_TYPE_IS_TEMPLATED_0
#undef HFPP_PAR_TYPE_IS_TEMPLATED_1
#undef HFPP_PAR_TYPE_IS_TEMPLATED_2
#undef HFPP_PAR_TYPE_IS_TEMPLATED_3
#undef HFPP_PAR_TYPE_IS_TEMPLATED_4
#undef HFPP_PAR_TYPE_IS_TEMPLATED_5
#undef HFPP_PAR_TYPE_IS_TEMPLATED_6
#undef HFPP_PAR_TYPE_IS_TEMPLATED_7
#undef HFPP_PAR_TYPE_IS_TEMPLATED_8
#undef HFPP_PAR_TYPE_IS_TEMPLATED_9
#undef HFPP_PAR_TYPE_IS_TEMPLATED_10
#undef HFPP_PAR_TYPE_IS_TEMPLATED_11
#undef HFPP_PAR_TYPE_IS_TEMPLATED_12
#undef HFPP_PAR_TYPE_IS_TEMPLATED_13
#undef HFPP_PAR_TYPE_IS_TEMPLATED_14
#undef HFPP_PAR_TYPE_IS_TEMPLATED_15

#undef HFPP_GET_PAR_TEMPLATE_VALUE_0
#undef HFPP_GET_PAR_TEMPLATE_VALUE_1
#undef HFPP_GET_PAR_TEMPLATE_VALUE_2
#undef HFPP_GET_PAR_TEMPLATE_VALUE_3
#undef HFPP_GET_PAR_TEMPLATE_VALUE_4
#undef HFPP_GET_PAR_TEMPLATE_VALUE_5
#undef HFPP_GET_PAR_TEMPLATE_VALUE_6
#undef HFPP_GET_PAR_TEMPLATE_VALUE_7
#undef HFPP_GET_PAR_TEMPLATE_VALUE_8
#undef HFPP_GET_PAR_TEMPLATE_VALUE_9
#undef HFPP_GET_PAR_TEMPLATE_VALUE_10


#else
#undef HFPP_DONOT_MAKE_WRAPPERS	
#endif

/* hfppnew-generatewrappers.def - END ............................................*/

