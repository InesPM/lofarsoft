2010-06-07 - Heino Falcke  - rev 5064:
- added global function trackHistory(bool) - to switch history
tracking in arrays on or off

2010-06-07 - Heino Falcke  - rev 5057:
- changed downsample routines to work with fractional block sizes
- changed RFI routines to check for too large number of bins (so
smaller blocksizes will also work)

2010-06-01:
- added convenience function hInvFFTwSave to do a save fft (hftools.cc, testcr2.py)
- added hMinPos, hMaxPos - returning position of maxium or minimum (hftools.cc,testcr2.py)
- added calculation of time delays with cross-correlation from CR data (testcr2.py)
- remaining: some not-understood behaviour of invfftw

2010-08-25 - Heino Falcke:
- changed hFileRead to accept iterate input and hence to read data
into the array starting at any location

2010-08-26 - Heino Falcke - rev 5751:
- added hMulAdd2 which will loop over the second rather than the 1st
parameter in looping mode

2010-08-26 - Heino Falcke - rev 5765:
- added hFlip to reverse the order of elements in a vector

2010-08-26 - Sander ter Veen - rev 5836 +
- Corrected hMulAdd2
- Added IO and calibration module
- Added pipeline_start.py script for the first basic steps using these
modules

2010-11-03 - Heino Falcke - rev 6228
- Added hTranspose - to transpose a vector on the c++ level
- adapted hArray_tranpose to use hTranspose with hArrays
- Added Functions hDiffSum and hDiffSquaredSum to caluclate the (sum
of the (squared)) differences of two vectors
- changed hFill to allow filling one vector with a second vector of
different type
- hArrays can now be created with a copy from another vector of
different type (use the "copy=other_array"  or  "fill=other_array" keywords)
- added hDoubleFFT, hDoubleFFTPhase, hDoubleFFTPhaseMul to do a double
FFT based on Arthur's numpy example
- testDoubleFFT.py shows an example testing the douple FFT
- created a separate plot.py module in core, as this was not working
properly in the new structure
- moved the list of hftools function to be added as methods to harrays
and vectors to  type.py

2010-11-04: Pypeline - Heino Falcke - rev 6230
- Interchanged the arguments blocklen and nblocks for doubleFFT to be
in the same order as used for defining the corresponding matrix
- added  hChiSquared and hMeanChiSquared functions

2010-11-04: Pypeline - Heino Falcke - rev 6231
- changed the .read method to allow providing a block or even a list
of block numbers that are to be read sequentially into a matrix
- .read can now also read into array of different type (e.g. read Fx
data into complex arrays right away)
- fixed bugs that became obvious when running the tutorial (which is
slightly updated - figureless version only)
- deleted some unnecessary error messages in the hftools (if it
doesn't crash or hang it is not an error but a feature ...!)
- updated the preprocessor and added a keyword
HFPP_PAR_IS_UNMUTABLE_SCALAR in the wrapper definition which  ensures
that a parameter is not turned into a vector when called in looping mode

2010-11-05 - Martin van den Akker
- Module gets rebuild if *any* of the header files changes.

2010-11-08: Pypeline - Heino Falcke - rev 6257
- .read method allows so specify a block AND a single antenna
selection
- changed DoubleFFT to allow for blocks to be stored on disk (example
not yet finished!)
- several bug fixes
- got testrfi3.py to work again (testrfi2.py doesn't)
- reinserted import plot
-- modified readdump to allow reading in a chunk of data only

2010-11-08: Pypeline - Heino Falcke - rev 6257
++ modified readdump to allow reading in a chunk of data only (already
in revision 6257)

2010-11-15 - Pypeline - Sander ter Veen - rev 6304
- Added "AntennaPositions" keyword to IO.py. This gives the antennapositions in the local coordinate relative to the CS002 core.

2010-11-17: Pypeline - Heino Falcke - rev 6332
- modified preprocessor to produce forward declarations of functions
(this assumes all non pass-as-reference parameters are defined as
constant), this should allow moving fucntions from .h file back to the
.cc file
- removed the obsolete SLICED types from hfppnew.h
- deleted a number of warnings in mMath
- fixed a few bugs here and there (e.g., inconsistent hApplyFilter declaration)
- introduced HFPP_FUNC_IS_INLINE to indicate that a function is
defined as inline
- introduced HFPP_CLASS_STDIT as a type of Wrapper to be
genenerated. This is used for forward declarations and essentially now
assumes that by default all vector functions are defined using
templated iterators (which they de facto already are by convention so
far)

2010-11-17: Pypeline - Heino Falcke - rev 6340
- found a number of bugs
- added short doc string to python wrapper
- rearranged some parts of the software (moving code from .h to .cc
files)
-added testseti7.py

2010-11-22: Pypeline - Heino Falcke - rev 6350
- Added function hFindSequenceGreaterThan etc. to find sequences of
data that is above (or below) a certain value - useful for identifying
peaks in the data
- Added documentation about hFindSequence to tutorial
- Fixed a few inconsistencies in hFileRead to now allow using looping
- fixed bugs in the tutorial (no idea how they got there)
- hArray.plot() now also passes normal scipy plotting keywords to
plt.plot() like color="red"
- added philosophy and history of pycrtool presentation to doc directory for reading


2010-11-22: Pypeline - Heino Falcke - rev 6442
- work around so that the data reader works again and can read fx with selected antennas
- removed a bug in hMul2 that came in due to an accidentaly copied line
- added Pymacs to the extras, which allows one to run Python under (aqua)emacs with tab completion (etc)
- start to add highlighting to plot (not yet tested)

2010-12-03 Pypeline - Martin van den Akker
- Removed "using namespace" from headers.
- Added stringToUpper and stringToLower methods to core functionality.

2010-12-14 Pypeline - Martin van den Akker
- Added writeRaw and readRaw method for hArrays
  These create a raw string which is a memcopy of the data in the (flat) hArray vector. This can be used to write and read hArray data with pickle in Python.

2010-12-22 Pypeline - Martin van den Akker
- Added support for AERA datareader

2011-01-26 Pypeline - rev 6832 - Heino Falcke
- Added hReadTextTable to read data from a textfile
- added hSplitString (not in Python) to split a string into words.

2011-01-27 Pypeline - rev 6860 - Heino Falcke
- Added hWriteTextTable to write data to a textfile
- changed parameters in hReadTextTable

2011-02-01 Pypeline - rev 6914 - Heino Falcke
- Renamed Write/ReadDump to Write/ReadFileBinary Renamed
- Write/ReadTextTable to Write/ReadFileText Added
- WriteFileBinaryAppend to append a block of data
- Write/ReadFileBinary have a changed parameter "start" rather than
  "block", which allows one to specify the starting position in units
  of the elements in the vector rather than in unist of the vector
  size. This allows simple random access read and write.

2011-02-03 Pypeline - rev 6952 - Heino Falcke
- added hArrayRead, hArray_write, and hArray_writeheader this allows
one to write an hArray with a header file (filename.hdr) to disk that
contains dimensions and other info. It can be read in with
hArrayRead()

2011-02-03 Pypeline - rev 6957 - Heino Falcke
- added error messages to read/write functions in mIO.cc
- fixed a bug in hWriteFileBinary which would not write a block if the file
did not exist yet
- hArrays now contain a header dict, which can be assigned at creation
or is inherited upon reading from a datafile and can be extended at will
- the header information is stored with hArray_writeheader etc. (and retrieved)

2011-02-03 Pypeline - rev 6977 - Heino Falcke
- minor bug fixes, writeheader (take sliced arrays into account, allow
specifying dimensions explicitly)
- updated and tested stationspectrum

2011-02-07 Pypeline - rev7011 Sander ter Veen
- Changed calibration data path to /data/lofar/StaticMetadata/
- Cron job running on own machine to keep this synchronised with the LOFAR repository
- updated metadata.py to include the new path
- Phase calibration for most stations now also available

2011-02-15 Pypeline - rev 7103 - Heino Falcke
- major rewrite of the tasks module, now also include workspaces
- added the module averagespectrum which calculates an average station
spectrum and is implemented as a new task
-configure.py contains a number of shortcut
- added function  IO.getFilenames to retrieve a list of files in a
directory with a certain start and/or ending.
- changed hArray __repr__ to produce something one can read back in.


2011-02-17 Pypeline - rev 7108 - Heino Falcke
- finalized tasks, various bug fixes, added positional parameters
- added documentation to tasks

2011-02-20 Pypeline - rev 7128 - Heino Falcke
- minor updates and bugfixes to tasks
- added litsfiles to get a list of files, using unix-style file
patterns and evironment variables
- made averagespectrum to work on multiple files
- added spikeexcess to qualitycheck routine (the one in
qualitycheck.py), checks only for too many spikes
- allowed variables nsigma, such that sigma is fixed to give a fixe
number (e.g. one) of peaks for the given blocklength

2011-03-04 Pypeline - Martin van den Akker
- Replaced awk parser scripts by a python script
- The python script generates:
  a. the wrapper code for the python bindings.
  b. documentation in both doxygen and sphinx format.

2011-03-05 Pypeline - rev 7217 - Heino Falcke
- allowed tasks to return a value (just make .run return a value)
- implemented hMinStdDev to calculated Find the minimum standard
deviation of a vector within blocks of a certain length. Used to find
the RMS in the cleanest part of a spiky data set.
-implemented an improved version of "fitbaseline" as a task
- added hBSplineCalc to calculate a spline without having to provide
powers of x
- moved core/types.py to core/htypes.py
- move task commands from config to modules/__init__
- further rearrangements to straighten out importing
- defined tasks.set_globals which lets one manipulate variables in the
(interactive) global namespace
- the currently loaded task can now be accessed through the variable
Task
-added setHeader() and getHeader() functions to harrays
- moved FitBaseline and CalcBaseline to separate file fitbaseline.py
- averagespectrum task is named AverageSpectrum now.
- hArray:
 + changed the parameter "par" in hArray(par=) to accepte dicts
+ changed data format of hArray files to be written to a directory and
to include vectors and arrays in "par" as binary files
!!This measn you can store an entire set of hArrays in one file -
e.g., if you write ary to disk, just store another array in ary.par or
store it with ary.setHeader()

2011-03-07 Pypeline - rev 7223 - Heino Falcke
- moved tshortuts to tasks/shortcuts and adapted imports
- tget/tput now accept an additional name under which to store the
parameters
- added the fitbaseline.py task

2011-03-07 Pypeline - rev 7226 - Heino Falcke
- plot can now deal with plotting sliced arrays where xvalues are being
sliced in the same way
- averagespectrum can now also do an ordinary averagespectrum (not
using a double fft)

2011-03-08 Pypeline - rev 7230 - Heino Falcke
- Various bugfixes for averagespectrum, tasks, and plot

2011-03-08 Pypeline - rev 7231 - Heino Falcke
- added a method to update the (output) header in an array from within a task
in a definde way, applied it to averagespectrum

2011-03-11 Pypeline - rev 7266 - Heino Falcke
- further tweaks to averagespectrum:
   - more efficient read-in for smaller files
   - function qplot (method to AverageSpectrum) to quickly plot flagged
 blocks
  - new parameters antenna_star and stride to, e.g., read odd/even
antennas only
- quality check to use median instead of mean to estimate the best RMS
limit
- support of 0.10 ipython version to access global variable 'Task'

2011-03-11 Pypeline - rev 7272 - Heino Falcke
- average spectrum contains a qplot method which allows one to quickly
view blocks that were flagged
- more quality information is returned and printed,
e.g. Task.homogeneity_factor should tell one quickly whether there was
some problem with the data.
- added more input and output parameters to control quality checking

2011-03-11 Pypeline - rev 7300 - Heino Falcke
- added the filename to the header dicts of hArrays read with crfile
- writeheader will take parameter 'nbands' from the array 'par'
- array(0,3,3,[0,2,3])=value is now possple, i.e. setting elements
with an index list as last index
- fitbaseline tasks can save results to file
- added root_filename to datareader.py to get filename without ending pcr

2011-03-14 Pypeline - rev 7302 - Heino Falcke
hftools:
- added hMin/Max(val): will perform a min/max(e_i,val) for all elements e_i
- added hRandomizePhase -> to randomize phase of selected complex numbers and
set amplitude to certain value
- hMeanAbs now also for complex vectors
- added hRandomizePeaks to replace peaks in a time series data set by
random values
- tasks will automatically return its own workspace (i.e. with all
   parameters) - that gives best access to all input and output values
- added testrfi4.py to demonstrate RFI cleaning of LOFAR station data
- calcbaseline: will now create the inverse of the baseline (so you can
just multiply, which in principe is the faster operation)

2011-03-15 Pypeline - rev 7308 - Martin van den Akker
- Added autogenerated documentation from hftools to python documentation.

2011-03-16 Pypeline - rev 7321 - Heino Falcke
- fixed hArray_setitem which had indentation errors 

2011-03-16 Pypeline - rev 7321 - Heino Falcke
-added compile script again to compile hftools
- added hPrettyString to process a slice and and to print begin and
end of a vector. Replaces internals of Python VecToString
function. Old version was making copy of vector and crashed if memory
was scarce.

2011-03-16 Pypeline - rev 7331 - Heino Falcke
- further fix of hArray_setitem bug

2011-03-18  Pypeline - rev 7336 - Heino Falcke
- fixed some indentation errors ....
- renamed listfiles to listFiles
- added readParfiles to datareader.py - to return a dict from a
parameter file
- WorkSpace class definition now accepts a python parameterfile to set
variables in a workspace. Useful to control a pipeline script, eg:
ws=tasks.WorkSpace("MyPipeline",parfile="~/LOFAR/work/parameters.par")()
and the ws.x, ws.y= ...
- in workspace explicitly named paramers in call to workspace take
precedence over parfile parameters
- introduced pardict= keyword for WorkSpaces and Tasks which can
contain parameters of multiple tasks

2011-03-24 Pypeline - rev 7365 - Pim Schellart
- added FFTW module with wrappers for the fftw advanced routines including plan storage

2011-03-26  Pypeline - rev 7372 - Heino Falcke
- added hInverse to calculate inverse of a vector
- hPolynomialMul/Add and hBSplineCalcAdd/Mul to add or multiply
polynomial/spline to output vector - useful for iteratively
calculating a baseline
- took out the bspline functions without providing an order 
- BSpline functions now also excplicitly need xmin,xmax parameter (to
avoid scaling errors)
- BSplineCalc made faster - had to copy GSL routines (e.g.,
gsl_bspline_eval_nonzero) from more recent
version (1.14) into source code - I have 1.11 
- tasks/fitbaseline.py debugged and improved


2011-03-29  Pypeline - rev 7387 - Heino Falcke

- harray.plot now better handles sliced y values in combination with
xvalues of different dimensions. I.e. you can have a 2D array with 
1D xvalues
- introduced hBSplineCalcAssign with hBSplineCalc as wrapper function
for compatibility with the documentation generation
- changed parameter maxchunk to maxnchunks in averagespectrum,
- added a new task to calculate a(n incohrent) dynamic spectrum from
a number of files and to plot it

------------------------------------------------------------------------
TODO
------------------------------------------------------------------------
- change hAllTypes, hArrayTypes etc in core/htypes.py to sets - that
is factor 2-3 faster in comparisons using 'in' ....

- revisit hArrays sharing the same vector. If one has a different
  shape the other one is also affected and lengths and slices become
  inconsistent!!

- make hArray_set accept a list of an array as last dimension

- averagespectrums need to take nquistzone into account (use nyquistflip)

- use shutils rmtree for hArray_write to remove old file directory
