------------------------------------------------------------------------
                 README File for hfplot/hfget 
         - the (eventually) hyper-flexible plotting package -
------------------------------------------------------------------------

This are some scratch notes on my installation procedures for "hfplot" - this is by now pretty much outdated ....



-----------------------

Here are some new things I tried to investigate Scipy:

Install ipython 2.6 from fink
installed matplotlib-py25 from fink
ipython -i pylab
plt.xlabel('Smarts')

To see a matplotlib figure in Qt see:
In [4]: execfile("qt_mpl_bars.py")
Figure is used to create a plot, which is plotted on Figure Canvas

------------------------------------------------------------------------

**Compilation under LOFAR usg build system:

cd ~/LOFAR/usg/build/cr
make help
make hfget

**Documentation: http://usg.lofar.org/doxygen/modules.html

**In fact I made a little compile script, containing:
#
cd ~/LOFAR/usg/build/cr
make -k hfget
cp ~/LOFAR/usg/build/cr/implement/libhfget.so ~/LOFAR/usg/release/lib/python

**To start it:
cd implement/GUI
./start

** To get started:

- see hfnet.py for setting up a network, containing some of the syntax.

- hfsample.py contains some very basic explanation of the early syntax
  (may be somewhat outdated)

- some documentation of the get/put mechansim is given in the source
  code of hfget.cc linked to the Data class.

------------------------------------------------------------------------
Installation of exetrnal packages (Mac):
------------------------------------------------------------------------

You might tr installing extra packages on Mac with "port" or
FinkCommander (NOT!)??


However, FINK and port don't work so well, since they are often
installed in unusual places or (install external packages in other
places) and use different compilers. The letter is sometimes a problem
for pre-compiled things.

The best is to compile everything with one compiler.  (c++ 4.3
...). The problem is that SIP requires Python to be build as a Mac
Framework application - this is done by the binary installer (.dmg)
but not when compiling yourself.


So, what did I do?

- QT installed from source
- SIP installed from source (riverbank.co.uk siehe PyQt)
- Python 2.6 installed as Mac OS binary installer from python.org
- python 2.6 installed from source from python.org 
- PyQt from source
- MathGl from source
DOT ... (http://www.graphviz.org/)

In the end it worked and I didn't know why. I guess the point is that
PyQt needs to be built by the packaged python while Mathgl needs to be
build by the self-built python and using gcc4.3. It may also matter in
which order this is done ...

BTW, here is my PATH, which sometimes also matters ...

/Library/Frameworks/Python.framework/Versions/Current/bin:/Users/falcke/LOFAR/usg/release/bin:/sw/lib/gcc4.3/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/local/Trolltech/Qt-4.4.3/bin:/sw/lib/qt4-x11/bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin



******************************************************************************************
!!Now follow some older notes on previous installations, kept for historical reasons.!!
Don't use for curren installation.
******************************************************************************************


------------------------------------------------------------------------
Compilation in build system:

#
cd ~/LOFAR/usg/build/cr
make -k hfget
cp ~/LOFAR/usg/build/cr/implement/libhfget.so ~/LOFAR/usg/release/lib/python
------------------------------------------------------------------------

Changing ~/LOFAR/usg/src/CR-Tools/implement/CMakeLists.txt
to tweak the system that MathGL compiles ...

  if (QT4_INCLUDES)
    include_directories (${QT4_INCLUDES})
  endif (QT4_INCLUDES)

  if (QT4_INCLUDES)
    include_directories (${QT4_INCLUDES})
    include_directories (/usr/share/qt4/mkspecs/default) 
    include_directories (/usr/include/QtCore)
    include_directories (/usr/include/QtGui)
  endif (QT4_INCLUDES)

on Mac:
  if (QT4_INCLUDES)
    include_directories (${QT4_INCLUDES})
    include_directories (/sw/lib/qt4-x11/mkspecs/default)
    include_directories (/sw/lib/qt4-x11/include/QtCore)	
    include_directories (/sw/lib/qt4-x11/include/QtGui)	
  endif (QT4_INCLUDES)


and also add more link libraries:

  ## linker instructions
  target_link_libraries (hfget
    cr
    ${QT4_LIBRARIES}
    ${CASA_LIBRARIES}	
    /usr/local/lib/libmgl-qt.so
    /usr/local/lib/libmgl.so
    ${PYTHON_LIBRARIES}
    ${BOOST_LIBRARIES}
    )

on Mac:

  ## linker instructions
  target_link_libraries (hfget
    ${QT4_LIBRARIES}
    ${CASA_LIBRARIES}	
    /usr/local/lib/libmgl.dylib 
    /usr/local/lib/libmgl-qt.dylib 
    ${PYTHON_LIBRARIES}
    ${BOOST_LIBRARIES}
    )


cp ~/LOFAR/usg/build/cr/implement/libhfget.so /home/falcke/LOFAR/usg/release/lib/python/



Sample event:
~/LOFAR/usg/data/lopes/2007.01.31.23:59:33.960.event


#include "Data/LopesEventIn.h"
#include "Data/LOFAR_TBB.h"


void dataReaderTest(){

    CR::DataReader* drp;
    CR::LopesEventIn lopin;

    lopin.attachFile("~/LOFAR/usg/data/lopes/2007.01.31.23:59:33.960.event");

    drp = &lopin;
    
// http://usg.lofar.org/doxygen/classCR_1_1LopesEventIn.html

    Matrix<Double> data;
    vector<Number> vec;
    Vector<Double> CASAVec;  //CASA Vector

//DataReader Docu
// http://usg.lofar.org/wiki/doku.php?id=software:packages:cr-tools

    data=drp->fx();
    CASAVec.resize(0);
    CASAVec = data.column(0);

    Record header=drp->headerRecord();

    Vector<Int> AntennaIDs;
    header.get("AntennaIDs",AntennaIDs);

    cout << AntennaIDs(0);

//http://usg.lofar.org/wiki/doku.php?id=software:packages:cr-tools:datareader

// Pointer auf CASAVec const T *   getStorage (Bool &deleteIt) const
    bool shall_memory_be_freed_by_freeStorag;

    Double* cvecptr;

    cvecprt=CASAVec.getStorage(shall_memory_be_freed_by_freeStorage);

//~/LOFAR/usg/src/CR-Tools/implement/Analysis/analyseLOPESevent.cc
//    data.column(0) = Zeitserie von erstem Kanal. 

//http://www.astron.nl/casacore/doc/html/

//http://www.astron.nl/casacore/doc/html/classcasa_1_1Matrix.html

//svn st (status)
//svn commit  
}


------------------------------------------------------------------------
Installation of Qt and python was straight forward.

After compilation of the hfplot package with make (Makefile is now
created by qmake, which means that hfget.pro needs to be adapted to
suit the local system) one simply runs python with

python -i hfget.py

or

python
>>> execfile("hfget.py")

execfile("~/LOFAR/usg/src/CR-Tools/scripts/python/hfget.py")

------------------------------------------------------------------------
Install boost python:
------------------------------------------------------------------------

install "python-dev" with package manager (goes into /usr/include/python2.4)

download bjam

make "bjam" from source not rpm or package manager (was a big problem otherwise): 

/usr/local/boost_1_35_0/tools/jam/src$ ./build.sh

downloaded boost 1.35

unpacked into directory/usr/local/boost_1_35_0

cd /usr/local/boost_1_35_0
./configure --prefix=/home/falcke/boost_1_35_0
make install

This installed the library into my home directory for linking.

Testing the installation with:
/usr/local/boost_1_35_0/libs/python/example/quickstart$ bjam --build-dir=/home/falcke/boost2 toolset=gcc --verbose-test test

One can actually then build boost python without bjam. I found out
which where the correct options and link paths to be set by using:

bjam -n --build-dir=/home/falcke/LOFAR/hfplot toolset=gcc 

This then showed something like the following, which I then edited
further by hand.

"g++"  -ftemplate-depth-128 -O0 -fno-inline -Wall -g -fPIC    -I"/usr/include/python2.4" -I"/usr/local/boost_1_35_0" -c -o "/home/falcke/LOFAR/hfplot/boost-hfplot/gcc-4.1.2/debug/hfget.o" "hfget.cc"

gcc.link.dll /home/falcke/LOFAR/hfplot/boost-hfplot/gcc-4.1.2/debug/hfget.so

    "g++"    -o "/home/falcke/LOFAR/hfplot/boost-hfplot/gcc-4.1.2/debug/hfget.so" -Wl,-h -Wl,hfget.so -shared -Wl,--start-group "/home/falcke/LOFAR/hfplot/boost-hfplot/gcc-4.1.2/debug/hfget.o" "/home/falcke/LOFAR/hfplot/boost/bin.v2/libs/python/build/gcc-4.1.2/debug/libboost_python-gcc41-d-1_35.so.1.35.0"  -Wl,-Bstatic  -Wl,-Bdynamic -lutil -lpthread -ldl -Wl,--end-group -g 

To actually link it with Qt, I used "qmake" as described in the Qt
book and later edited my own hfget.pro file (so, no need to run qmake
-project again now ...) using the paths that bjam showed me.


/usr/share/qt4/bin/qmake -project
/usr/share/qt4/bin/qmake hfget.pro 

and then edit hfget.pro 

------------------------------------------------------------------------
Note:
To compile the hfget routines with bjam only, I jused the following.

bjam --build-dir=/home/falcke/LOFAR/hfplot toolset=gcc

This will create a shared object library in a local subdirectory
(./boost/bin.v2/libs/python/build/gcc-4.1.2/debug), which contains all 
the functions python can call.

(but again, using bjam is no longer necessary if one as the the right qmake file, 
which generates a Makefile in turn, so that one can just use "make")
------------------------------------------------------------------------
Here is an example output for a compile run (not necessarily complete):

cd /home/falcke/LOFAR/hfplot/
make -k 
g++ -c -pipe -g -D_REENTRANT -w -fPIC  -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I/usr/include/python2.4 -I/usr/local/boost_1_35_0 -I. -I. -o VectorSelector.o VectorSelector.cc
g++ -c -pipe -g -D_REENTRANT -w -fPIC  -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I/usr/include/python2.4 -I/usr/local/boost_1_35_0 -I. -I. -o hffuncs.o hffuncs.cc
g++ -c -pipe -g -D_REENTRANT -w -fPIC  -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I/usr/include/python2.4 -I/usr/local/boost_1_35_0 -I. -I. -o hfget.o hfget.cc
g++ -c -pipe -g -D_REENTRANT -w -fPIC  -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I/usr/include/python2.4 -I/usr/local/boost_1_35_0 -I. -I. -o hfqt.o hfqt.cc
/usr/bin/moc-qt4 -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I/usr/include/python2.4 -I/usr/local/boost_1_35_0 -I. -I. hfqt.h -o moc_hfqt.cpp
g++ -c -pipe -g -D_REENTRANT -w -fPIC  -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I/usr/include/python2.4 -I/usr/local/boost_1_35_0 -I. -I. -o moc_hfqt.o moc_hfqt.cpp
rm -f libhfget.so.1.0.0 libhfget.so libhfget.so.1 libhfget.so.1.0
g++ -shared -Wl,-soname,libhfget.so.1 -o libhfget.so.1.0.0 cell.o finddialog.o gotocelldialog.o mainwindow.o sortdialog.o spreadsheet.o plotter.o VectorSelector.o hffuncs.o hfget.o hfqt.o moc_finddialog.o moc_gotocelldialog.o moc_mainwindow.o moc_sortdialog.o moc_spreadsheet.o moc_plotter.o moc_hfqt.o qrc_spreadsheet.o qrc_plotter.o   -L/usr/lib /home/falcke/LOFAR/hfplot/boost/bin.v2/libs/python/build/gcc-4.1.2/debug/libboost_python-gcc41-d-1_35.so.1.35.0 /usr/local/boost_1_35_0/bin.v2/libs/thread/build/gcc-4.1.2/release/threading-multi/libboost_thread-gcc41-mt-1_35.so.1.35.0 -lpthread -lQtGui -lQtCore 
ln -s libhfget.so.1.0.0 libhfget.so
ln -s libhfget.so.1.0.0 libhfget.so.1
ln -s libhfget.so.1.0.0 libhfget.so.1.0

Compilation finished at Thu Jul 10 17:17:10

------------------------------------------------------------------------
However, before running python properly a few paths have to be set so that python 
finds the shared object libraries from which it imports the new hfplot package. The easiest 
is actually to copy the .so file into your local directory. Otherwise I did

export LD_LIBRARY_PATH=/usr/bin:/usr/lib:/usr/lib32:/usr/lib64:/home/falcke/boost_1_35_0/lib:/home/falcke/LOFAR/hfplot/boost/bin.v2/libs/python/build/gcc-4.1.2/debug:/home/falcke/LOFAR/hfplot/boost-hfplot/gcc-4.1.2/debug
export PYTHONPATH=/usr/lib/python2.4:/home/falcke/LOFAR/hfplot/boost/bin.v2/libs/python/build/gcc-4.1.2/debug:/home/falcke/LOFAR/hfplot/boost-hfplot/gcc-4.1.2/debug


(try out what is really necessary here)

Then run 

python 

and then some random input in python:

from libhfget import *

d=Data("LOFAR")
d.printStatus(1)
v=d.newObjects("Header")
d2=d.ObjectID(v[0])
v=d.newObjects("Header:X")
len(v)
d.printDecendants("")
DIR.TO+1

v2=IntVec()
v[:]=[0,1,2,3,4,5,6,7]
v[3:4]=[8,9]

------------------------------------------------------------------------

*/


