/*-------------------------------------------------------------------------*
 | $Id:: templates.h 391 2007-06-13 09:25:11Z baehren                    $ |
 *-------------------------------------------------------------------------*
 ***************************************************************************
 *   Copyright (C) 2007                                                    *
 *   Lars B"ahren (bahren@astron.nl)                                       *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

// ------------------------------------------------------------------------------

/*!
  \defgroup CR Cosmic Rays (CR) analysis pipeline
  
  This documentation contains the description of the C/C++ components of the
  software used for data inspection and reduction with the
  <a href="http://www.astro.ru.nl/lopes">LOPES</a> and LOFAR/CR experiments.

  <ul>
    <li>\ref crtools_source_tree
    <li>\ref crtools_basic_install
    <li>\ref crtools_update_code
    <li>\ref crtools_build
    <li>\ref crtools_overview_modules
    <li>\ref crtools_useful_modules
  </ul>

  <hr>

  \section crtools_source_tree Organization of the source code

  \verbatim
  lofarsoft
  |-- data
  |-- doc
  |-- release
  |-- build
  |-- devel_common
  |-- external
  `-- src
      |-- contrib
      |-- CR-Tools         <-- you are here
      |   |-- apps
      |   |-- data
      |   |-- doc
      |   |-- implement
      |   |-- private
      |   |-- scripts
      |   `-- test
      |-- DAL
      `-- pybdsm
  \endverbatim

  The sub-directories and their contribution to the CR-Tools is as follows:

  <table border=0>
    <tr valign=top>
      <td width="15%">\b apps</td>
      <td width="80%">Source code for application programs which can be run
      from the command line or through a secondary control layer.</td>
    </tr>
    <tr valign=top>
      <td width="15%">\b data</td>
      <td width="80%">Collection of data used for test programs.</td>
    </tr>
    <tr valign=top>
      <td width="15%">\b doc</td>
      <td width="80%">Additional documentation integrated into the set of
      pages generated by Doxygen.</td>
    </tr>
    <tr valign=top>
      <td width="15%">\b implement</td>
      <td width="80%">Source code, mainly C++ classes, which are compiled
      into a library (\e libcr), based on which application programs are build.</td>
    </tr>
    <tr valign=top>
      <td width="15%">\b private</td>
      <td width="80%">Source code from private projects of the individual
      users; this is not part of the default build, but optionally can be
      enabled.</td>
    </tr>
  </table>

  <hr>

  \section crtools_basic_install Basic installation procedure

  <ol>
    <li><b>Get the source code:</b>

    All the source code is available through the Subversion repository of the User
    Software Group; in order to obtain a working copy run the following command:
    \verbatim
    svn co http://usg.lofar.org/svn/code/trunk usg
    \endverbatim
  
    <li><b>Set up your environment:</b>

    Once you have finished checking out the source code, you should set up your
    environment: in the simplest case you can do everything from within your curent
    shell (assuming bash here, but similar when working with tcsh).
    \code
    cd usg
    export LOFARSOFT=`pwd`
    . devel_common/scripts/init.sh
    \endcode
    In order to make the settings more permanent you should put the above into the
    configuration file of your shell (<tt>.bashrc</tt> in the case of \e bash):
    \code
    export LOFARSOFT=<path to to root of the USG code tree>
    . devel_common/scripts/init.sh
    \endcode
  
    <li><b>Build the software:</b>
    
    Run the bootstrap script to set up the CMake environment:
    \code
    cd $LOFARSOFT/build
    ./bootstrap
    \endcode
    Call the target to build the CR-Tools:
    \code
    cd $LOFARSOFT/build
    make cr
    \endcode

    <li><b>Install the Measures database:</b>
    
    In order to successfully run the build software, you will require the Measures
    tables, which are used by the \e casacore library to properly set up conversion 
    engines to transform physical quantities such as frequencies or directions:
    \code
    make casacore_update_data
    \endcode
  </ol>

  <hr>

  \section crtools_update_code Update your working version of the code tree

  In order to keep up with ongoing changes in the code base -- and thereby getting
  access to the latest features made available -- you should be updating you
  working version of the code tree against the repository.

  \code
  cd build
  make update cr
  \endcode

  Though in principle you can run a 
  \code 
  svn update
  \endcode
  from the top-level directory (\e $LOFARSOFT), it is advisable to use the
  \e update target, as this not only will synchronize your working copy of the
  User Software, but also update the configuration environment (e.g. CMake
  scripts).

  <hr>

  \section crtools_overview_modules Overview of modules and their functionality

  <table border=0 width="100%" cellpadding="1">
    <tr>
      <td width="25%">&nbsp;</td>
      <td width="50%">&nbsp;</td>
      <td width="25%">&nbsp;</td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">Analysis</td>
    </tr>
    <tr valign=top>
      <td>CR::CRflaggingPlugin</td>
      <td>Flaggs antennas based on spikyness, high-power, low-power</td>
      <td>LOPES Plugin</td>
    </tr>
    <tr valign=top>
      <td>DataBlockStatistics</td>
      <td>???</td>
      <td>?</td>
    </tr>
    <tr valign=top>
      <td>CR::dfitgauss</td>
      <td>Fit a Gaussian to 1d-data </td>
      <td>Same as the Glish routine</td>
    </tr>
    <tr valign=top>
      <td>CR::DynamicSpectrum</td>
      <td>Calculates Dynamic spectra and e.g. generates FITS files</td>
      <td>CASA-heavy</td>
    </tr>
    <tr valign=top>
      <td>CR::fitCR2gauss</td>
      <td>Guipipeline-style X-Beam -> CC-Beam fitting</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>PulseProperties</td>
      <td>Storage container for pulse parameters</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::tbbTools</td>
      <td>Simulation of TBB FPGA algorithms</td>
      <td></td>
    </tr>
    <tr>
      <td width="25%">&nbsp;</td>
      <td width="50%">&nbsp;</td>
      <td width="25%">&nbsp;</td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">Calibration</td>
    </tr>
    <tr valign=top>
      <td>AverageGain</td>
      <td>Calculate baseline of spectra and then normalize the Spectra</td>
      <td>uses BaselineGain</td>
    </tr>
    <tr valign=top>
      <td>BaselineGain</td>
      <td>Different ways to calculate the baseline of spectra</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::CalTableReader[/Writer/Creator]</td>
      <td>LOPES CalTable calibration database</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::CalTableInterpolater</td>
      <td>Interpolates CalTable-calibration data to needed grid</td>
      <td>Includes multi-d interpolation routine</td>
    </tr>
    <tr valign=top>
      <td>CR::RFIMitigation[/Plugin]</td>
      <td>Flagging of RFI lines in a spectrum</td>
      <td>IMHO unnecessary complicated</td>
    </tr>
    <tr valign=top>
      <td>CR::TVCalibrationPlugin</td>
      <td>LOPES-style phase calibration</td>
      <td>LOPES "Plugin"</td>
    </tr>
    <tr>
      <td width="25%">&nbsp;</td>
      <td width="50%">&nbsp;</td>
      <td width="25%">&nbsp;</td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">Coordinates</td>
    </tr>
    <tr valign=top>
      <td>CR::TimeFreq</td>
      <td>Container for the basic parameters in the time-frequency
      domain.</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::SpatialCoordinate</td>
      <td>Container to combine other coordinates into a spatial (3D)
      coordinate.</td>
      <td></td>
    </tr>
    <tr>
      <td width="25%">&nbsp;</td>
      <td width="50%">&nbsp;</td>
      <td width="25%">&nbsp;</td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">Display</td>
    </tr>
    </tr>
    <tr valign=top>
      <td>CR::SimplePlot</td>
      <td>Routines for plotting into PS-files</td>
      <td></td>
    </tr>
    <tr>
      <td width="25%">&nbsp;</td>
      <td width="50%">&nbsp;</td>
      <td width="25%">&nbsp;</td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">Imaging</td>
    </tr>
    <tr valign=top>
      <td>CR::GeomDelay</td>
      <td>Class to handle the computation of geometrical delays as needed for
       beamforming.</td>
      <td>Supports far-field and near-field geometry.</td>
    </tr>
    <tr valign=top>
      <td>CR::GeomPhase</td>
      <td></td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::GeomWeight</td>
      <td></td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::Beamformer</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td width="25%"></td>
      <td width="50%"></td>
      <td width="25%"></td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">IO</td>
    </tr>
    <tr valign=top>
      <td>CR::DataIterator</td>
      <td></td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::DataReader</td>
      <td></td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>CR::LOFAR_TBB</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td width="25%"></td>
      <td width="50%"></td>
      <td width="25%"></td>
    </tr>
    <tr>
      <td class="indexkey" colspan="3">Math</td>
    </tr>
    <tr valign=top>
      <td>CR::HanningFilter</td>
      <td>Generate array with (modified) Hanning window</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>StatisticsFilter</td>
      <td>Min/Max/Mean/Median/RMS/stddev - filter</td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>LinearRegression</td>
      <td>Linear fit through data points</td>
      <td></td>
    </tr>
  </table>

*/
