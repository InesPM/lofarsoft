/* $Id$ */

/**

\page crtools_build CR-Tools :: Configuration & Build

- \ref crtools_obtain_code
- \ref crtools_build_parameters

<hr>

\section crtools_obtain_code Obtaining the source code

All the source code is available through the Subversion repository of the User Software Group; in order to obtain a working copy run the following command:
\verbatim
svn co http://usg.lofar.org/svn/code/trunk usg
\endverbatim

<hr>

\section crtools_build_parameters Optional build parameters
  
The behavior during configuration and the components included in the build
can be controlled from a number of optional parameters:

\verbatim
option (CR_BUILD_TESTS          "Build the test programs?"                   YES )
option (CR_BUILD_EXTERNAL_TESTS "Build test programs for external packages?" YES )
option (CR_COMPILER_WARNINGS    "Enable standard set of compiler warnings?"  YES )
option (CR_DEBUGGING_MESSAGES   "Print debugging information?"               NO  )
option (CR_VERBOSE_CONFIGURE    "Verbose output during configuration?"       NO  )
option (CR_WITH_GLISH           "Support for Glish applications?"            NO  )
option (CR_WITH_PYTHON          "Support for Python applications?"           NO  )
option (CR_WITH_PLOTTING        "Support for generation of plots?"           YES )
option (CR_WITH_GUI             "Build the graphical interface?"             NO  )
option (CR_WITH_STARTOOLS       "Enable using routines from LOPES-Star?"     YES )
\endverbatim

<ul>
  <li>\b CR_BUILD_TESTS

  Build the test programs? If enabled all the test programs in
  ''implement/<Module>/test'' will be build.
  
  <li>\b CR_BUILD_EXTERNAL_TESTS

  Build the test programs to test working with the various external packages
  and libraries? If enabled the test programs in ''test'' will be build:
  <ul>
	<li>\e tcasa_casa.cc -- Test working with the classes in the ''casa''
	module of casacore.
	<li>\e tcasa_tables.cc -- Test working with the classes in the ''tables''
	module of casacore.
	<li>\e tcasa_coordinates -- Test working with the classes in the
	''coordinates'' module of casacore.
	<li>etc.
  </ul>

  <li>\b CR_ENABLE_TESTING

  Enable running of the test programs? Enabling this option allows to collectively
  run the test programs using ''CTest'' from within the build directory:
  \verbatim
  ctest
  \endverbatim
  In the future this will enable committing the logs from building and testing a
  quality tracking dashboard.

  <li>\b CR_DEBUGGING_MESSAGES

  Optional pre-compiler setting, which allows enabling/disabling debugging
  messages within the source code, e.g.
  \code
  #ifdef DEBUGGING_MESSAGES
      cout << "[DataReader::DataReader ()]" << endl;
  #endif 
  \endcode

  <li>\b CR_VERBOSE_CONFIGURE

  Be verbose during the configuration stage; this will print out the various
  variables set during the initial CMake run to configure for ''make''.

  <li>\b CR_WITH_GLISH

  Activate support for Glish applications? If set to \e FALSE, the software will
  build using \e casacore.

  <li>\b CR_WITH_PYTHON

  Activate support for Python applications? \u Note: Currently needed for all
  LOPES-Star applications! (Until someons sorts those that need python from those
  that don't.)

  <li>\b CR_WITH_GUI

  Build the graphical user interface? -- If selected \e CMake will check if all
  the required external components from
  <ul>
    <li>Python
    <li>Boost
    <li>Qt4
  </ul>
  are available; if any of them is missing building of the GUI is disabled and an
  warning is thrown, indicating which external component is missing.

  <li>\b CR_WITH_STARTOOLS

  Enable the usage of additional routines from the LOPES-Star package? If no
  installation of the package is found, usage of its routines is disabled.
</ul>

\b Examples:

<ul>
  <li>Switch off builing the test programs:
  \verbatim
  cmake ../../src/CR-Tools/ -DCR_BUILD_TESTS:BOOL=0
  \endverbatim
  
  <li>Build the Glish-clients, but no external test programms:
  \verbatim
  cmake ../../src/CR-Tools/ -DCR_WITH_GLISH:BOOL=1 -DCR_BUILD_EXTERNAL_TESTS:BOOL=0 
  \endverbatim
</ul>

<hr>

*/
