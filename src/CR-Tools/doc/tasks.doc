/*!

\page tasks Task list towards a CR pipeline for LOFAR20

- \ref tasks_dal
  - \ref tasks_dalCommon
  - \ref tasks_tbb2h5
  - \ref tasks_hdf5
- \ref tasks_crtools
  - \ref tasks_crtools_skymapper
   - \ref tasks_crtools_python
- \ref tasks_infrastructure
- \ref tasks_formats

<hr>

<table border=0 cellpadding=1 cellspacing=1>
  <tr>
    <td class="indexkey">[ ]</td><td>not yet started</td>
    <td>&nbsp;</td>
    <td class="indexkey">[*]</td><td>work in progress</td>
    <td>&nbsp;</td>
    <td class="indexkey">[x]</td><td>done</td>
  </tr>
</table>

<hr>

\section tasks_dal Data Access Library

\subsection tasks_dalCommon Common functions for the manipulation of HDF5 attributes

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>Merge HDF5Common and Common into single file (dalCommon.cpp)</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>Clean up template instantiation in dalCommon</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>End-to-end testing of functions to write and read attributes</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>Remove multiply defined functions (e.g. h5getAttribute vs. h5get_attribute)</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Where necessary add functions to support specific data types (e.g.
	casa::Vector<T> or casa::MPosition)</td>
    <td>Lars</td>
  </tr>
</table>

\subsection tasks_tbb2h5 HDF5 writer for TBB data

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>Verify subsequent writing of multiple input files into single output file</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>Get access to the CS1 station and antenna position tables (via Ruud)</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Add method to fill in the missing station and antenna position information
	using tables created for station calServer</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Support for concentration of data arriving at multiple ports into a single
	output file (present implementation only supports one port per output
	file)</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Bring tbb2h5 under the control of MAC/SAS</td>
    <td>Ruud</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Test how to install tbb2h5 on the cluster nodes; we can use \e listfen as reference
	system.</td>
    <td></td>
  </tr>
</table>

\subsection tasks_hdf5 High-level interfaces to LOFAR HDF5 datasets

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[x]</td>
    <td>Upward propagation of metadata from DAL::TBB_DipoleDataset to DAL::TBB_StationGroup</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Upward propagation of metadata from DAL::TBB_StationGroup to DAL::TBB_Timeseries</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Export of attributes/metadata as casa::Record</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Sync implementation of HDF5 TBB time-series data format with description in ICD</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>High-level C++ interface to LOFAR standard image data format</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

<hr>

\section tasks_crtools CR-Tools

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Build on multiple platforms (Intel Mac, Debian GNU Linux, SuSE Linux) to
	catch system dependent compile and runtime errors.</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Fill vertically collected metadata from TBB time-series dataset into header
	record of CR::LOFAR_TBB</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Adoption of CalTables to store station calibration data</td>
    <td>Andreas</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Prepare list of air shower parameters to be stored in results database</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Evaluation of plotting libraries - MathGL, s2plot, plplot - to pick a choice
	for which one to use and support</td>
    <td>Heino</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Import and support building of picked plotting library</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Add support to obtain and build Qt4 from with the build environment</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Add support to obtain and build PyQt from with the build environment</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Verification of PPF inversion algorithm</td>
    <td>Kalpana</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Trimming of the linker instructions in the CMake scripts to produce smaller
	extecutables; currently the footprint on disk is rather large, because we are linking
	against all external libraries almost all of the time</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Define list of product generated by the CR pipeline</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Definition of database structure for storage of pulse parameters computed by
	the pipeline</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

\section tasks_crtools_skymapper CR-Tools imager

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Transformation of sky and antenna coordinates onto common reference
	frame</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Debugging of error causing CR::Skymapper to segfault when inserting computed
	pixel values into the array of the output file</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

\section tasks_crtools_python Python-based pipeline

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Break up existing monolithic version of processing pipeline into a modular
	version to be strung together through Python</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Python bindings for the classes/routines present in \e libcr</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

<hr>

\section tasks_formats Data Formats

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Update and send around description of common metadata expected for all
	standard LOFAR data products</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Update and send around LOFAR image data format ICD along with the request
	for input from the other KSPs</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

<hr>

\section tasks_infrastructure Central infrastructure

<table border=0>
  <tr>
    <td class="indexkey">Status</td>
    <td class="indexkey">Task description</td>
    <td class="indexkey">Responsible</td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Build on multiple platforms (Intel Mac, Debian GNU Linux, SuSE Linux) to catch system dependent compile and runtime errors.</td>
    <td> </td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Arrange for Dart server to collect automated nightly builds</td>
    <td> </td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Merge Subversion repositories containing user software and central software</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Transition of LOFAR central software towards using CMake for configuration and build</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td>[*]</td>
    <td>Import \e pyrap package (Python binding for \e casacore) into USG code tree, including
	CMake-based configuration/build</td>
    <td>Lars</td>
  </tr>
  <tr valign=top>
    <td>[ ]</td>
    <td>Check if we need to make \e PyQt part of the USG code repository as one of the required external components or if we simply rely on
	the package being installed (system-wide) by the user.</td>
    <td></td>
  </tr>
  <tr valign=top>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

*/
