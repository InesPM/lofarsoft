import MeasurementSet
from numpy import *
from numpy.random import *


# chnl = 155
def generateUVPlane(m, sw=0, channel=155, dims=(1000,1000)):
   """Generates a UV plane from a baseline. Channel is a slice of the channels you'd like to take part in the calculation. dims is the dimensions of the to be returned array"""
   thearr = zeros(dims, complex)
   mt = m.MSTable
   uvwcol = mt.getcol('UVW')
   datcol = mt.getcol('DATA')
   reamp = lambda x, d: int(((x+500)/1000)*(d-1))
   for i in xrange(int(len(mt))):
      if i % 1000 == 0: print i
      u,v,w = uvwcol[i]
      if sum((u,v,w)) != 0:
         dp = datcol[i][0][channel]
         if not isinstance(channel, int):
            dp = dp.mean()
         thearr[reamp(u, dims[0]), reamp(v, dims[1])] += dp
   return thearr
   


def generateHistogram(m, bt, sw, bincount, slices, channelrange=None, timerange=None, bins=None):
   """Generates an amplitude histogram from a given baseline.
   m, bt, sw - MeasurementSet object, baseline, spectral window
   bincount  - the width of the histogram (ignored if bins is passed)
   slices    - the amount of histograms to generate per slice
   timerange, channelrange - tuple (start, end)
   bins      - an array containing the width of each histogram bar
   RETURNS:
   (channel, bins, heights) . The last value of heights represents the amount of records falling outside of bins
   """
   cBANDPASS = [0.0000] + BANDPASS
   dcol = m.selectBaseline(bt, sw).getcol('DATA')
   buffersize = 1000
   samplesize = 100
   buff = zeros(buffersize).tolist()
   magpadding = (-0.2, 1)
   if timerange == None: timerange = (0, len(dcol))
   if channelrange == None: channelrange = (1, len(dcol[0][0]))
   chnslice   = slice(channelrange[0], channelrange[1])
   slicesize  = int(diff(timerange) / slices)
   
   if bins == None:
      # obtain a few random slices to find the range of values to expect, in log scale
      subset = log(abs(array([dcol[i][0][1:] for i in (random_sample(samplesize)*diff(timerange)).astype(int)+timerange[0] ]))/BANDPASS) / log(10)
      # add magpadding orders of magnitude of sensitivity to the histogram
      minvalue, maxvalue = subset.min()+magpadding[0], subset.max()+magpadding[1]
      bins = 10**append( arange(minvalue, maxvalue, (maxvalue-minvalue)/bincount), maxvalue )
   else:
      bincount = len(bins)-1
   
   ret = zeros((diff(channelrange), slices, bincount+1), uint16) # return array
   
   # we read until the buffer is full or the end of a slice is reached, generate a histogram and add it to the previous results.
   for i in xrange(timerange[0], timerange[1]):
      bi = (i - timerange[0]) % buffersize          # buffer index
      buff[bi] = abs(dcol[i][0][chnslice])
               # if end (buffer || slice || datafile)
      if (bi == buffersize-1) or ( (i-timerange[0]) % slicesize == 0) or i == timerange[1]-1:   
         npbuff = array(buff[:bi+1]) / cBANDPASS[chnslice]   # convert to numpy array, divide out BP
         slpos = (i-timerange[0]) / slicesize
         if slpos >= slices: slpos = slices-1                # in case of overshoot
         for ch in xrange(diff(channelrange)):
            N,lb = histogram(array(npbuff[:,ch]).flatten(), bins)
            ret[ch, slpos ] += N
   
   return (bins, ret.squeeze())
         
   



def convolve2d(a, b):
   """ let b be the smaller array. Horribly slow, better off using ifft(fft(a)*fft(b)) """
   ns = (a.shape[0]+b.shape[0]-1, a.shape[1]+b.shape[1]-1)
   reta = zeros(ns, a.dtype)
   alen0, alen1 = a.shape
   blen0, blen1 = b.shape
   xset, yset = blen0/2, blen1/2
   for x in xrange(alen0):
      print x
      for y in xrange(alen1):
         sm = 0.0
         for bx in xrange(blen0):
            for by in xrange(blen1):
               if 0 <= x+bx-xset < alen0 and 0 <= y+by-yset < alen1:
                  sm += b[bx,by]*a[x+bx-xset,y+by-yset]
         reta[x+xset,y+yset] = sm
         
   return reta
                  
                  
                  
                  
                  
                  
                  
                  
BANDPASS = [ 0.0016561470693,0.00168621307239,0.00173494277988,0.00180323701352,0.00189050473273,0.00198796857148,0.00209594820626,0.00221698614769,0.00234371447004,0.00247401907109,0.00260670273565,0.00273739197291,0.0028648476582,0.00298394146375,0.0030934761744,0.00319240824319,0.0032774368301,0.00335080199875,0.00340963946655,0.00345394876786,0.00348417088389,0.00350068393163,0.0035015931353,0.00349273206666,0.00347172864713,0.00344162317924,0.00340449437499,0.00336100487038,0.00331126153469,0.00326154008508,0.00320944213308,0.00315623008646,0.00310663157143,0.0030601369217,0.00301658688113,0.00297973561101,0.00294701219536,0.00291978637688,0.00289883906953,0.0028836124111,0.00287558091804,0.0028746263124,0.00287948641926,0.00288905319758,0.00290334690362,0.0029232443776,0.00294631207362,0.00297205499373,0.00299974926747,0.0030304598622,0.00305795529857,0.00308720953763,0.0031165194232,0.00314070726745,0.0031630853191,0.0031830505468,0.00319857173599,0.00321032712236,0.00321742356755,0.00322002032772,0.00322154047899,0.0032124731224,0.00320158293471,0.0031892391853,0.00317201460712,0.00315399188548,0.0031350122299,0.00311469682492,0.00309435091913,0.00307374377735,0.00305484118871,0.00303777889349,0.0030233708676,0.00300945597701,0.00300250342116,0.00299386191182,0.00299076759256,0.00299167190678,0.00299162045121,0.00299792853184,0.00300769903697,0.00301884347573,0.00302943331189,0.003044645302,0.00305958651006,0.00307614775375,0.00309098255821,0.0031056269072,0.00311987148598,0.00313087529503,0.00314355804585,0.00315111875534,0.00315708410926,0.00315912533551,0.00316116842441,0.00315909879282,0.0031550663989,0.00314873130992,0.00314024998806,0.00313211930916,0.00312138767913,0.00310784648173,0.00309445452876,0.00308255827986,0.0030690014828,0.00305884820409,0.00304905767553,0.00304009974934,0.00303312344477,0.00302960700355,0.00302758044563,0.00302610127255,0.00302841048688,0.00303279561922,0.00303921592422,0.00304682180285,0.00305605819449,0.00306744244881,0.00307771982625,0.00308919302188,0.00310024130158,0.00311172753572,0.00312118488364,0.00313034583814,0.00313706952147,0.00314129260369,0.00314553873613,0.00314561300911,0.00314502627589,0.00314174080268,0.00313626858406,0.00312885083258,0.00312143890187,0.0031124711968,0.00310187507421,0.0030898754485,0.00308105302975,0.00306950625964,0.00306392554194,0.00305214105174,0.0030423917342,0.00303674116731,0.00303270365112,0.00303012831137,0.00303042726591,0.00303192064166,0.00303670647554,0.00304415938444,0.00305168377236,0.00306106964126,0.0030736848712,0.00308466586284,0.00309789553285,0.00311084557325,0.00312204123475,0.00313500431366,0.00314414338209,0.00315345986746,0.00316025945358,0.0031638876535,0.00316554424353,0.00316554005258,0.00316191813909,0.00315514905378,0.00314848124981,0.00313930097036,0.00312612578273,0.00311150285415,0.0030967395287,0.00308112124912,0.00306464312598,0.00305227027275,0.00303707597777,0.00302429543808,0.00301464647055,0.00300614675507,0.00300216069445,0.00299846427515,0.00299891200848,0.00300338421948,0.00301048532128,0.00302136247046,0.00303302775137,0.00304768420756,0.00306512624957,0.00308330985717,0.00310363504104,0.00312422541901,0.00314378365874,0.00316362711601,0.0031842100434,0.00320072425529,0.00321319838986,0.00322176422924,0.00322759943083,0.00323074823245,0.00322729465552,0.00322253000923,0.00321078649722,0.00319737242535,0.00317543558776,0.00315508642234,0.00312802009284,0.00310076912865,0.00307182478718,0.00304095097817,0.00301283155568,0.00298465020023,0.00295751751401,0.00293450406753,0.00291514093988,0.00289997621439,0.00289095565677,0.00288570742123,0.00288882968016,0.00289665185846,0.00291174626909,0.00293276645243,0.00296086585149,0.00299254409038,0.00303208013065,0.00307436170988,0.00312294787727,0.00317318923771,0.00322607904673,0.00327779212967,0.00332914385945,0.00337799615227,0.00342160509899,0.00345948338509,0.00348982540891,0.00351001811214,0.00352067872882,0.00351818487979,0.00350209069438,0.00347306556068,0.00342882238328,0.00336940097623,0.00329567259178,0.00320905609988,0.00311022461392,0.00299957953393,0.00287797860801,0.00275238999166,0.00262001040392,0.00248625245877,0.00235382956453,0.00222608470358,0.00210411171429,0.0019929385744,0.00189387437422,0.00180730118882,0.00173923652619,0.00168900191784,0.00165780948009 ]