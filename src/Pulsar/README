
CONTENTS:

  1. Introduction
  2. Getting the source code
  3. Organization of the source code
  4. External dependencies
  5. Configuration, build and installation
  6. Basic installation steps for Presto

_________________________________________________________________________________
>>> 1. Introduction

Collection of tools for pulsar data reduction.

_________________________________________________________________________________
>>> 2. Getting the source code

The source code is freely available (world-readable) from the ASTRON Subversion
server:

  svn co http://usg.lofar.org/svn/code/trunk lofarsoft

For detailed and up-to-date information consult $LOFARSOFT/doc/index.html

_________________________________________________________________________________
>>> 3. Organization of the source code

Once check-out from the Subversion repository has completed, the following 
directory structure will be found on your disk:

lofarsoft                <- $LOFARSOFT
  |-- data
  |-- doc
  |   `-- index.html
  |-- devel_common
  |-- external
  `-- src
      |-- contrib
      |-- Anaamika
      |-- CR-Tools
      |-- Pulsar         <-- you are here
      |   |-- apps
      |   |-- cmake
      |   |-- doc
      |   |-- external
      |   |-- pipeline
      |   |-- scripts
      |   `-- test
      `-- PyCRTools

_________________________________________________________________________________
>>> 4. External dependencies

 a) FFTW3 (http://www.fftw.org)

 FFTW is a C subroutine library for computing the discrete Fourier transform
 (DFT) in one or more dimensions, of arbitrary input size, and of both real and
 complex data (as well as of even/odd data, i.e. the discrete cosine/sine
 transforms or DCT/DST). We believe that FFTW, which is free software, should
 become the FFT library of choice for most applications. 

 b) Tempo (http://www.atnf.csiro.au/research/pulsar/tempo)

 Tempo is a program for the analysis of pulsar timing data. Pulsar rotation,
 astrometric, and binary parameters are deduced by fitting models to pulse
 times of arrival measured at one or more terrestrial observatories.

 Tempo is maintained and distributed by Princeton University and the Australia
 Telescope National Facility (ATNF). The code is freely available, and others
 are encouraged to extend, modify, and improve it as they see fit.

 c) DSPSR (http://dspsr.sourceforge.net)
 
 DSPSR is an Open Source C++ development library for digital signal processing of
 pulsar astronomical timeseries. It implements an extensive range of algorithms
 for use in coherent dedispersion, filterbank formation, pulse folding, etc.
 These tools are utilized by a powerful suite of user-end programs that come with
 the library. 

 d) PSRCHIVE (http://psrchive.sourceforge.net/)

 PSRCHIVE is an Open Source C++ development library for the analysis of pulsar
 astronomical data. It implements an extensive range of algorithms for use in
 pulsar timing, scintillation studies, polarimetric calibration, single-pulse
 work, RFI mitigation, etc. These tools are utilized by a powerful suite of
 user-end programs that come with the library. The software is described in
 Hotan, van Straten & Manchester (2004). 


_________________________________________________________________________________
>>> 6. Basic installation steps for Presto

1. Install FFTW3.X You need to compile FFTW for _single_ precision (see the
   config flags I recommend below).
   
   For all architectures I recommend the following configuration:

   ./configure --enable-shared --enable-single

   Use the --prefix=SOME_PATH option to install the library and its related files
   to SOME_PATH. (If you have admin access to your machine, --prefix=/usr/local
   is the default for FFTW and is a safe bet). 

   If you have a modern version of GCC installed (v3.2 or better) and a modern CPU
   (Intel Pentium IV, or newer; AMD Opteron or better, G5), you can get
   _drastically_ better performance by adding the following options: 

   * For Intel PIVs or later, EM64Ts, or AMD64s: 
       --enable-sse
   * For Mac G5s:
       --enable-altivec

2. Install PGPLOT. You need the X-windows and postscript drivers at a minimum. 

3. Install TEMPO. Make sure to set the TEMPO environment variable. 

4. Install GLIB (v2.X). On Linux machines this is almost certainly already on
   your system (check in /usr/lib and /usr/include/glib*). Although you may need
   to install a glib development package in order to have the required include
   files... 

5. Install CFITSIO. This is a very easy install and is now needed since PSRFITS
   is now being written by several pulsar instruments (Nice! a pulsar data
   standard that external tools can actually view! How about that!) 

6. Define the PRESTO environment variable to the top level directory of the
   PRESTO distribution (i.e. this directory). 

7. cd to $PRESTO/src. Check and modify the Makefile for your machine of choice.
   Insure that the library and include file directories are correct for FFTW,
   PGPLOT, GLIB, CFITSIO, and TEMPO. 

8. If you are using FFTW, do a 'make makewisdom'. This gets FFTW acquainted with
   your system. It is best if you are the only user on the machine when you run
   this, as it is very computation intensive and may take a while. 

9. Just for safety's sake (and because SVN sometimes messes up file access
   times), do a "make prep". That will make sure that make does not try to run
   Clig to re-generate all of the command line interface files. 

10. Do a 'make'. This will make all of the executables. If you want mpiprepsubband
    (for parallel de-dispersion on clusters) you will need to do a 'make mpi' as well. 

11. The required libraries and miscellaneous files will be located in $PRESTO/lib.
    The executable will be in $PRESTO/bin. You may copy or move the executables
    wherever you like, but the library files should stay put. (That's why you
    define the PRESTO variable -- so the routines can find them). 

12. If you want to save some disk space, do a 'make clean' in the 'src' directory.
    This will leave the libraries and binaries in their respective directories
    but will get rid of all the extra stuff in the 'src' directory. 

13. If you want to use all the python routines (which if you are doing anything
    but the most rudimentary analyses you will want to), you need
    Python >= version 2.3, and the _new_ Numpy/SciPy.
    You can get Numpy/Scipy here: http://www.scipy.org/download 

    I recommend using the Subversion versions (and for PRESTO as well). In
    general, the following should work: 

      cd $PRESTO/python
      make
      make fftfit

    If it doesnt, you will probably need to edit the Makefile or setup.py. 

14. Go find pulsars! 
