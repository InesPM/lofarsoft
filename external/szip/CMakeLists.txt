
## Name of the project
project (SZIP)

## Minimum required version of CMake to configure the project
cmake_minimum_required (VERSION 2.5)

## ------------------------------------------------------------------------------
## Set CMAKE_MODULE_PATH to load custom CMake modules

find_path (USG_ROOT devel_common/cmake/CMakeSettings.cmake
  PATHS 
  ${SZIP_SOURCE_DIR}
  ${SZIP_SOURCE_DIR}/..
  ${SZIP_SOURCE_DIR}/../..
  ${SZIP_SOURCE_DIR}/../../..
  ENV LOFARSOFT
  )

if (USG_ROOT)
  include (${USG_ROOT}/devel_common/cmake/CMakeSettings.cmake)
else (USG_ROOT)
  message (FATAL_ERROR "Unable to locate additional CMake scripts!")
endif (USG_ROOT)

## ------------------------------------------------------------------------------
##  Configuration/Build options

option (SZIP_FORCE_BUILD    "Force rebuild and local installation"  NO  )
option (SZIP_DEBUG          "Enable debugging information?"         NO  )
option (SZIP_ENABLE_TESTING "Enable building and running tests?"    YES )

## ------------------------------------------------------------------------------
## Check for possible existing version

set (SZIP_FIND_QUIETLY YES)

include (FindSZIP)

## <-- begin build condition --------------------------------------------------->

if (NOT HAVE_SZIP OR SZIP_FORCE_BUILD)
  
  ## ---------------------------------------------------------------------------
  ## System header files
  
  find_path (HAVE_DLFCN_H     dlfcn.h     PATHS ${include_locations} )
  find_path (HAVE_ERRNO_H     errno.h     PATHS ${include_locations} )
  find_path (HAVE_FCNTL_H     fcntl.h     PATHS ${include_locations} )
  find_path (HAVE_MEMORY_H    memory.h    PATHS ${include_locations} )
  find_path (HAVE_STRING_H    string.h    PATHS ${include_locations} )
  find_path (HAVE_STRINGS_H   strings.h   PATHS ${include_locations} )
  find_path (HAVE_STDDEF_H    stddef.h    PATHS ${include_locations} )
  find_path (HAVE_STDINT_H    stdint.h    PATHS ${include_locations} )
  find_path (HAVE_STDLIB_H    stdlib.h    PATHS ${include_locations} )
  find_path (HAVE_UNISTD_H    unistd.h    PATHS ${include_locations} )
  find_path (HAVE_SYS_MMAN_H  sys/mman.h  PATHS ${include_locations} )
  find_path (HAVE_SYS_STAT_H  sys/stat.h  PATHS ${include_locations} )
  find_path (HAVE_SYS_TYPES_H sys/types.h PATHS ${include_locations} )
  
  ## ---------------------------------------------------------------------------
  ## Create SZconfig.h
  
  set (SZCONFIG_H "${SZIP_BINARY_DIR}/SZconfig.h")
  
  file (WRITE  ${SZCONFIG_H} "/* SZconfig.h generated by Cmake */\n\n")
  
  if (HAVE_DLFCN_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_DLFCN_H 1\n\n")
  else (HAVE_DLFCN_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_DLFCN_H 0\n\n")
  endif (HAVE_DLFCN_H)
  
  file (APPEND ${SZCONFIG_H} "#undef HAVE_DOPRNT\n\n")
  file (APPEND ${SZCONFIG_H} "#undef HAVE_ENCODING\n\n")
  
  if (HAVE_FCNTL_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_FCNTL_H 1\n\n")
  else (HAVE_FCNTL_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_FCNTL_H 0\n\n")
  endif (HAVE_FCNTL_H)
  
  if (HAVE_INTTYPES_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_INTTYPES_H 1\n\n")
  else (HAVE_INTTYPES_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_INTTYPES_H 0\n\n")
  endif (HAVE_INTTYPES_H)
  
  if (HAVE_MEMORY_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_MEMORY_H 1\n\n")
  else (HAVE_MEMORY_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_MEMORY_H 0\n\n")
  endif (HAVE_MEMORY_H)
  
  file (APPEND ${SZCONFIG_H} "/* Define to 1 if you have the `memset' function. */\n")
  file (APPEND ${SZCONFIG_H} "#undef HAVE_MEMSET\n\n")
  
  if (HAVE_STDINT_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STDINT_H 1\n\n")
  else (HAVE_STDINT_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STDINT_H 0\n\n")
  endif (HAVE_STDINT_H)
  
  if (HAVE_STDLIB_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STDLIB_H 1\n\n")
  else (HAVE_STDLIB_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STDLIB_H 0\n\n")
  endif (HAVE_STDLIB_H)
  
  if (HAVE_STRING_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STRING_H 1\n")
  else (HAVE_STRING_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STRING_H 0\n")
  endif (HAVE_STRING_H)
  
  if (HAVE_STRINGS_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STRINGS_H 1\n")
  else (HAVE_STRINGS_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_STRINGS_H 0\n")
  endif (HAVE_STRINGS_H)
  
  if (HAVE_SYS_STAT_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_SYS_STAT_H 1\n\n")
  else (HAVE_SYS_STAT_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_SYS_STAT_H 0\n\n")
  endif (HAVE_SYS_STAT_H)
  
  if (HAVE_SYS_TYPES_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_SYS_TYPES_H 1\n\n")
  else (HAVE_SYS_TYPES_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_SYS_TYPES_H 0\n\n")
  endif (HAVE_SYS_TYPES_H)
  
  file (APPEND ${SZCONFIG_H} "/* Define to 1 if you have the <unistd.h> header file. */\n")
  if (HAVE_UNISTD_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_UNISTD_H 1\n\n")
  else (HAVE_UNISTD_H)
    file (APPEND ${SZCONFIG_H} "#define HAVE_UNISTD_H 0\n\n")
  endif (HAVE_UNISTD_H)
  
  file (APPEND ${SZCONFIG_H} "/* Define to 1 if you have the `vprintf' function. */\n")
  file (APPEND ${SZCONFIG_H} "#undef HAVE_VPRINTF\n\n")
  
  file (APPEND ${SZCONFIG_H} "/* Name of package */\n")
  file (APPEND ${SZCONFIG_H} "#undef PACKAGE\n\n")
  
  file (APPEND ${SZCONFIG_H} "#undef PACKAGE_BUGREPORT\n\n")
  file (APPEND ${SZCONFIG_H} "#undef PACKAGE_NAME\n\n")
  file (APPEND ${SZCONFIG_H} "#undef PACKAGE_STRING\n\n")
  file (APPEND ${SZCONFIG_H} "#undef PACKAGE_TARNAME\n\n")
  file (APPEND ${SZCONFIG_H} "#undef PACKAGE_VERSION\n\n")
  file (APPEND ${SZCONFIG_H} "#undef STDC_HEADERS\n\n")
  file (APPEND ${SZCONFIG_H} "#undef VERSION\n\n")
  file (APPEND ${SZCONFIG_H} "#undef const\n\n")
  
  ## ----------------------------------------------------------------------------
  ##  Build the library
  
  include_directories (
    ${SZIP_SOURCE_DIR}/src
    ${SZIP_BINARY_DIR}
    )
  
  set (szip_sources
    src/encoding.c
    src/rice.c
    src/sz_api.c
    )
  
  add_library (szip ${szip_sources})
  
  ## ----------------------------------------------------------------------------
  ##  Installation
  
  find_path (SZIP_INSTALL_PREFIX release_area.txt
    PATHS
    ${SZIP_SOURCE_DIR}
    PATH_SUFFIXES
    ../release
    ../../release
    NO_DEFAULT_PATH
    )
  
  if (SZIP_INSTALL_PREFIX)
    message (STATUS "Installation area located for package SZIP.")
    set (CMAKE_INSTALL_PREFIX ${SZIP_INSTALL_PREFIX}) 
  endif (SZIP_INSTALL_PREFIX)

  ## Installation of the library
  
  install (TARGETS szip
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    )
  
  ## Installation of header files
  
  install (FILES src/rice.h src/ricehdf.h src/szip_adpt.h src/szlib.h
    DESTINATION include/szip
    )
  
  ## ----------------------------------------------------------------------------
  ##  Configuration summary
  
  message (STATUS "Enable debugging information     = ${SZIP_DEBUG}")
  message (STATUS "Enable building and runnng tests = ${SZIP_ENABLE_TESTING}")
  
  ## <-- end build condition ----------------------------------------------------->
  
else (NOT HAVE_SZIP OR SZIP_FORCE_BUILD)
  message (STATUS "Found system-wide installation of SZIP; skipping rebuild!")
endif (NOT HAVE_SZIP OR SZIP_FORCE_BUILD)
