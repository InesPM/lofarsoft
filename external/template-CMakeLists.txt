
cmake_minimum_required (VERSION 2.8)
cmake_policy (VERSION 2.8)

## ==============================================================================
##
##  CMake project settings
##
## ==============================================================================

##__________________________________________________________
## Name of the project handled by CMake

project (<PACKAGE>)

##__________________________________________________________
##  Package information

set (<PACKAGE>_VERSION        "" )
set (<PACKAGE>_SOURCE_ARCHIVE "" )
set (<PACKAGE>_URL            "" )
set (<PACKAGE>_SVN            "" )

##__________________________________________________________
## Package configuration/build options

option (<PACKAGE>_FORCE_BUILD  "Force build and installation of package?" NO )
option (<PACKAGE>_FROM_REPOS   "Install package from repository?"         NO )

## ==============================================================================
##
##  System inspection
##
## ==============================================================================

include (Find<PACKAGE>)

## ==============================================================================
##
##  Build instructions
##
## ==============================================================================

if (<PACKAGE>_FROM_REPOS)
  set (<PACKAGE>_FORCE_BUILD TRUE)
endif (<PACKAGE>_FROM_REPOS)

if (NOT <PACKAGE>_FOUND OR <PACKAGE>_FORCE_BUILD)
  
  ## Locate source file to build from
  
  find_file (<PACKAGE>_SOURCE ${<PACKAGE>_SOURCE_ARCHIVE}
    PATHS ${PROJECT_SOURCE_DIR}
    )
  
  if (NOT <PACKAGE>_SOURCE AND <PACKAGE>_URL)
    set (<PACKAGE>_SOURCE ${<PACKAGE>_URL})
  endif (NOT <PACKAGE>_SOURCE AND <PACKAGE>_URL)
    
  if (<PACKAGE>_FROM_REPOS AND <PACKAGE>_SVN)

    ## Build package off code repository
    
    ExternalProject_Add (<package>
      PREFIX ${PROJECT_BINARY_DIR}
      DOWNLOAD_DIR download
      SOURCE_DIR source
      SVN_REPOSITORY ${<PACKAGE>_SVN}
      BUILD_IN_SOURCE 1
      CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/source/configure --prefix=${CMAKE_INSTALL_PREFIX}
      INSTALL_COMMAND ${PORT_INSTALL_COMMAND} make install
      )
  
  else (<PACKAGE>_FROM_REPOS AND <PACKAGE>_SVN)

    ## Build package off tar-archive
    
    ExternalProject_Add (<package>
      PREFIX ${PROJECT_BINARY_DIR}
      DOWNLOAD_DIR download
      SOURCE_DIR source
      URL ${<PACKAGE>_SOURCE}
      BUILD_IN_SOURCE 1
      CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/source/configure --prefix=${CMAKE_INSTALL_PREFIX}
      INSTALL_COMMAND ${PORT_INSTALL_COMMAND} make install
      )
    
  endif (<PACKAGE>_FROM_REPOS AND <PACKAGE>_SVN)

  ## Update global configuration settings
  
  if (LUS_BINARY_DIR)
    ExternalProject_Add_Step (<package> update_configure
      COMMAND ${CMAKE_COMMAND} -E remove CMake*
      COMMAND ${CMAKE_COMMAND} ..
      COMMENT "Updating configuration settings after installation of <package> ..."
      DEPENDEES install
      DEPENDERS build
      WORKING_DIRECTORY ${LUS_BINARY_DIR}
      )
  endif (LUS_BINARY_DIR)
  
else (NOT <PACKAGE>_FOUND OR <PACKAGE>_FORCE_BUILD)
  
  add_custom_target (<package>
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMENT "[<package>] Found system-wide installation; skipping rebuild!"
    )
  
endif (NOT <PACKAGE>_FOUND OR <PACKAGE>_FORCE_BUILD)
