PLplot installation
===================

PLplot can be built and installed using one of several methods:

- (For UNIX, Linux, MacOS X, Cygwin, MinGW, MinGW/MSYS, and bare windows,
i.e., all systems other than DJGPP.) Use our new CMake build system (CBS).

- (Deprecated.) On UNIX-like systems (UNIX, Linux, MacOS X, and Cygwin and
MinGW/MSYS on Windows) via the automake buid system (ABS)

- (All but DJGPP deprecated.) Non-UNIX systems, using the native tools
available for that system. See the notes in the directory sys/<system name>

- DJGPP on (Free)DOS.  Follow the directions at sys/dos/djgpp/readme


PLplot installation notes for our new CBS (CMake build system).
=========================================================================

The definitive set of instructions is given at
http://www.miscdebris.net/plplot_wiki/.  The material below is cut and pasted
from there as of 2006-12-02.

Our CMake Build System (CBS) has been made available as part of our
development releases of PLplot starting with version 5.7.0 and is a
build-system paradigm shift compared to our traditional Autotools Build
System (ABS). Thus, it is important to consult the CMake documentation to
get the most out of our CBS. That documentation is quite thorough but tends
to be a bit scattered so we have collected what we think are the best
general CMake documentation links
(http://www.miscdebris.net/plplot_wiki/index.php?title=General_CMake_documentation_links)
for your convenience.

After consulting that documentation, install
(http://cmake.org/HTML/Install.html) the appropriate package of
CMake for your system platform. Note, you must use at least version 2.4.5 of
CMake for your PLplot configuration.


------------------------------------------------------------------------------
Some general remarks on CMake
------------------------------------------------------------------------------

The CMake build system (from http://www.cmake.org) is a portable system
to prepare makefiles and project files for software like PLplot that
needs to be built on many different platforms (hardware, operating
system, compilers).

The approach we have found most useful in using CMake to build PLplot is
this:

* Copy the sources in one directory
* Create a separate directory to build and install the software itself
  (libraries and the executables for the examples)

This way, you can simply remove all files in the build/install directory
and start all over, if you want to change a build option. Or build
PLplot in a third directory with the new build options.

CMake has two interfaces:

* The command-line interface "cmake"

* The graphical user-interface ccmake (or CmakeSetup under Windows)

The advantage of the command-line interface is that you can set the
various options (and environment variables) in a shell script or batch
file so that you can not forget to set them.

The advantage of the GUI is of course that you have an overview of all
possible options. But you will need to be careful to set all
environment variables _before_ running CMake.

Whichever of two you take, the steps are:

* Set up the environment (if this is needed, for instance to find the
  compilers and extra libraries)

* Run CMake with the right options to create makefiles or project files

* Run the native build system (nmake or the proper IDE) to actually
  build the library.

------------------------------------------------------------------------------
Generic Unix instructions for our CBS
------------------------------------------------------------------------------

 + (Optional) set environment variables to help cmake find system components
   that are installed in non-standard locations.

   Here is one particular example (which must be executed before the cmake
   invocation discussed below).

   export CMAKE_INCLUDE_PATH=/home/software/autotools/install/include:/home/software/cgmlib/cd1.3
   export CMAKE_LIBRARY_PATH=/home/software/autotools/install/lib:/home/software/cgmlib/cd1.3
   export PKG_CONFIG_PATH=/home/software/libLASi/install/lib/pkgconfig

   For this particular example, CMAKE_INCLUDE_PATH helps cmake to find the
   headers for libltdl and libcd in non-standard install locations;
   CMAKE_LIBRARY_PATH helps cmake to find the libltdl and libcd libraries in
   non-standard install locations; and PKG_CONFIG_PATH helps cmake to use
   the pkg-config command internally to find a libLASi pkg-config module
   file that is installed in a non-standard location.

   In general, CMAKE_INCLUDE_PATH helps cmake find headers and other files
   that are installed in non-standard locations; CMAKE_LIBRARY_PATH helps
   cmake find libraries that are installed in non-standard locations; and
   PKG_CONFIG_PATH helps pkg-config (either externally or internally from
   cmake) find pkg-config modules installed in non-standard locations.
   Finally, although not used in the specific example above, the
   colon-separated environment variable PATH helps cmake find executables
   that are installed in non-standard locations.

 + (Optional) set environment variables to specify the compilers and compiler
   flags.

   Here is one particular example (which must be executed before the cmake
   invocation discussed below).

   export CC="gcc -O2"
   export CXX="g++ -O2"
   export FC="g77 -O2"

   Note a better option is to set CMAKE_BUILD_TYPE to one of Debug, Release,
   RelWithDebInfo, or MinSizeRel. If you don't set this variable and don't
   set the environment variables above, then by default no compiler options
   (i.e., no optimization and no debugging symbols) are used for gcc-related
   compilers for our CBS which makes for fast builds, but slow execution.

 + cmake invocation.

   Here is one typical example.

   mkdir build_dir
   cd build_dir
   cmake -DCMAKE_INSTALL_PREFIX=/my/prefix \
   -DCMAKE_VERBOSE_MAKEFILE=ON  ../plplot_cmake >& cmake.out

   Check the cmake.out file for any configuration issues, especially WARNING
   messages which signal that a component of PLplot has been removed because
   required system components for that component have not been found.

   Everything can be controlled with -D options to the cmake command. There
   are a large number of CMake options for PLplot
   (http://www.miscdebris.net/plplot_wiki/index.php?title=CMake_options_for_PLplot)
   which can be set for cmake to personalize your build. Use the ccmake
   front end to cmake to obtain documentation of all these options. In the
   above case we have specified a particular install prefix "/my/prefix" and
   verbose make results (essential if you want to see the exact commands
   used for the build).

   Note in the above example an empty build directory called build_dir is
   used to insure a clean start, and ../plplot_cmake is a freshly checked
   out source tree (which remains clean because you never actually create
   any files in that directory tree). To start fresh, simply execute "cd
   build_dir; rm -rf *". Of course, this is an extremely dangerous command
   (since it removes everything in the current directory and all
   subdirectories), but you should be okay so long as you cd to the correct
   directory before executing the "rm" command.

  + Post-cmake build, install, and build-tree and install-tree tests

   make >& make.out
   make install >& make_install.out

   ctest

   cp -a /my/prefix/share/plplot5.6.1/examples /tmp
   cd /tmp/examples
   make >& make_examples.out
   ./plplot-test.sh >& plplot_test.out

   Note, the build-tree tests done with ctest are limited to just the psc
   (colour postscript) device and can only be performed if cmake is invoked
   with the -DBUILD_TEST=ON option (which roughly doubles the build time
   because all the examples must be built).

   Check all the *.out files for any errors.  Check that the large number of
   postscript files generated by plplot-test.sh look good with a postscript
   viewer.  Also, use the --help option to ./plplot-test.sh to see ways you
   can test your PLplot install for devices other than the default psc
   device.

   ---------------------------------------------------------------------------
   Linux instructions for our CBS.
   ---------------------------------------------------------------------------

   No changes from the generic Unix instructions.

   ---------------------------------------------------------------------------
   MacOS X instructions for our CBS.
   ---------------------------------------------------------------------------

   No changes from the generic Unix instructions.
   
   Things to be aware of on OS-X are the following:
   1. The wxWidgets driver should be off as the version of wxWidgets that
      OS-X (10.4) ships with is not a recent enough version.
      (PLD_wxwidgets = OFF).
   2. Cmake is really good at finding libraries, but not so good at figuring
      out which is the right library to use when multiple options are present.
      Since a typical OS-X installation will often (unfortunately) have
      multiple versions of the same library in different locations (e.g.
      /sw, /opt, /usr and various Framework directories), care must be taken
      to make sure that the desired library is being used. Furthermore it is
      important to make sure it is the only one being used, and that you are
      not instead pulling the header files from one place and the library
      itself from another.

------------------------------------------------------------------------------
Windows instructions for our CBS (needs updating from
http://www.miscdebris.net/plplot_wiki/
------------------------------------------------------------------------------

* Here is a typical way to use cmake on windows systems.
CMake comes with a graphical user-interface that allows you to set the
various build parameters interactively. It will try and find the
available compilers and other language tools that can be used for
PLplot and then generate a set of makefiles or project files depending
on what you chose.

Alternatively you can use the command-line version. This is particularly
useful if you need to set one or more environment variables - you can
do that in a small batch file and then run CMake several times until
you have fine-tuned the build system.

Once you have the makefiles or project files, you can use nmake or
Visual Studio to actually build the library and the examples.

Typically the steps are:

   + Set any environment variables you need to set (if the
     right compilers are not already in your path for instance)
     - If you set them in a DOS-box, be sure to run CMake in
     that same DOS-box!


   + Run CMakeSetup (the GUI version of CMake) or cmake (the
     command-line version) to set the build parameters and
     generate the make/project files

   + Run nmake or Visual Studio to build the library and
     the examples

For instance (sources copied in c:\plplot\plplot):

     c:\plplot> mkdir build
     c:\plplot> cd build
     c:\plplot\build> vcvarss32
     c:\plplot\build> cmake -DBUILD_TEST=ON -G "NMake Makefiles" ..\plplot
     c:\plplot\build> nmake

CMake supports most flavours of Visual Studio project files (ranging
from VS 6.0 to VS.net 2005) and it can create makefiles suitable for
the nmake utility.

Currently (january 2007) there are the following limitations:

   + Support for additional libraries is limited:
     - freetype (antialiasing fonts, smooth text): see notes below
     - BGD (output in the form of GIF, JPEG or PNG files): none yet
     - Qhull (advanced spatial interpolation): none yet

   + An important issue is that on Windows there is no standard
     location to install _libraries_ as opposed to programs.
     We are working on that.

On the other hand:

   + Bindings for C and C++ (MSVC compiler) are no problem
   + You can build both static (.lib) and dynamic link libraries (.dll)

Note on the examples
--------------------
If you want to run the examples _before_ actually installing PLplot,
then you must copy some files into the directory holding the example
programs:

   + plstnd5.fnt and plxtnd5.fnt in the directory ...\data

Dealing with freetype on Windows
--------------------------------
N.B. We need a lot more information here.  For now we only have Werner's
instructions for dealing with the freetype library on two different windows
systems.

MinGW:
* download and unzip freetype 2.2.1 (ft221.zip)
* mingw32-make (compiler is detected)
* mingw32-make (to compile the library)
* copy objs\freetype.a objs\libfreetype.a
* set FREETYPEDIR=C:\DevZone\freetype-2.2.1
* set PATH=%FREETYPEDIR%\objs;%PATH%
* set CMAKE_INCLUDE_PATH=%FREETYPEDIR%\include
* run cmake with your options

Visual C++ 2005
* download and unzip freetype 2.2.1 (ft221.zip)
* change line 69 of freetype-2.2.1\builds\compiler\visualc.mk to
    CFLAGS ?= /nologo /c /Ox /W3 /WX /D_CRT_SECURE_NO_DEPRECATE
    otherwise it stops the build because of warnings (/WX) since it
    doesn't know the /G5 option (this may not be necessary for
     Visual C++ 6.0 and/or 2003
* path_to_gnu_make\mingw32-make setup visualc
* path_to_gnu_make\mingw32-make
* set FREETYPEDIR=C:\DevZone\freetype-2.2.1
* set PATH=%FREETYPEDIR%\objs;%PATH%
* set CMAKE_INCLUDE_PATH=%FREETYPEDIR%\include
* run cmake with your options


(Deprecated.) PLplot installation notes for our traditional ABS
(automake build system).
=========================================================================

------------------------------------------------------------------------------
General instructions for Unix-based systems
------------------------------------------------------------------------------

(For specific Unix instructions see below.)

PLplot building and installation is trivially easy on most Unix systems.
From the distribution directory, type:

./configure --prefix=MYPREFIX
make
make install
# Important, for the remainder to work, MYPREFIX/bin must be on your path.
cd MYPREFIX/share/plplotVERSION/examples
make
./plplot-test.sh

MYPREFIX stands symbolically for the installation prefix.  That could be
/usr/local/plplot, but that requires root account access to use that system
location.  Another alternative is some convenient location under your home
account such as $HOME/local/plplot where you have write access under your
ordinary user account.

VERSION stands symbolically for the version.  Currently, that is 5.6.1, but
it will change.

IMPORTANT.  In prior versions we only supported the Gnu form of the make
command, but thanks to autotools the native form of the make command is now
supported.

To find out all options available for configure type
./configure --help |less

We also support a wide variety of environment variables to help the
configuration system find software that has been installed in non-standard
places.  Eventually, all those environment variables will be replaced by
documented configuration options, but for now see the code in sysloc.in to
see what environment variables can be set prior to running ./configure, e.g.,

JAVAMDINCDIR
GDINCDIR
CDINCDIR
FREETYPEINCDIR
TCLINCDIR
ITCLINCDIR
TKINCDIR
TKPRIVATEINCDIR
TCLPRIVATEINCDIR
PYTHON_INC_DIR

GDLIBDIR
PNGLIBDIR
JPEGLIBDIR
ZLIBLIBDIR
CDLIBDIR
FREETYPELIBDIR
TCLLIBDIR
ITCLLIBDIR
TKLIBDIR
ITKLIBDIR
VGALIBDIR

------------------------------------------------------------------------------
Additional note for the --enable-f95 option.

This option enables the build and install of our new fortran 95 interface
and examples.  So far, good results have been obtained with gfortran.  But
the current libtool support of fortran 9x is quite limited so for most
platforms where gfortran exists you have to set the environment variables
F77 and FFLAGS to the values output for FC and FCFLAGS in config.summary.
Once that change is completed, then config.summary should show that F77 is
the same as FC, and FFLAGS is the same FCFLAGS.  Our experience is that if
config.summary doesn't show that equality, then libtool will not work.
Because of these gfortran configuration complications, f95 is disabled by
default.

Also, note that libtool currently does not have support for commercial
fortran compilers such as ifort and pgf90 so we cannot support them either
at this time, but the libtool team are actively working to improve that
situation.

------------------------------------------------------------------------------
Additional note for the psttf driver.

This version of the postscript driver supports TrueType fonts, allowing
access to a far greater range of fonts and characters than is possible
using purely postscript fonts.

The driver requires the LASi, pango and pangoft2 libraries to work.
The pango and pangoft2 libraries are widely distributed with most
Linux distributions at least. The LASi library is not part of most
distributions at this time. The source code can be downloaded from
http://www.unifont.org/lasi/. The library is small and
easy to build and install. You must have at least version 1.0.5p1 of
LASi.  N.B. version 1.0.5 of LASi will no longer work.

This driver is enabled by default. You can change this using the
--enable-psttf option to configure.

If you have installed libLASi in a non-standard location you will need
to set the PKG_CONFIG_PATH variable to point to the location of the
libLASi pkg-config information. E.g. (for bash)
export PKG_CONFIG_PATH=/home/software/libLASi/install/lib/pkgconfig


------------------------------------------------------------------------------

To compile your own programs, there are two ways possible:


1) Use "plplot-config", eg:

   cc  myprog.c -o myprog  `plplot-config --cflags --libs`
   c++  myprog.cc -o myprog  `plplot-config --cflags --libs --with-c++`
   f77  myprog.c -o myprog  `plplot-config --cflags --libs --with-f77`
   cc  myprog.c -o myprog  `plplot-config --cflags --libs --with-tcl`

   The last variation of the cc command is required if you are building your
   own extended wish as in examples/tk/xtk??.c where you need to mention the
   tcl/tk headers for the compile step and libplplottcltk for the link step.


2) Use the pkg-config support, eg:

       cc myprog.c -o myprog `pkg-config --cflags --libs <package>`

   where <package> is either "plplot" (for single precision) or "plplotd"
   (for double precision).  For C++, Fortran 77, and Tcl/Tk programs,
   <package> should be respectively plplot-c++, plplot-f77, and plplot-tcl
   (for single precision), or plplotd-c++, plplotd-f77, amd plplotd-tcl (for
   double precision).

   For getting the PLplot configuration flags in autoconf scripts, use the
   PKG_CHECK_MODULES macro distributed with pkg-config (usually in
   /usr/share/aclocal/pkg.m4) like this:

       PKG_CHECK_MODULES(PLPLOT, plplotd >= 5.3)

   and the variables PLPLOT_CFLAGS and PLPLOT_LIBS will be set.

------------------------------------------------------------------------------
Build Instructions for Cygwin
------------------------------------------------------------------------------

addendum: According to Arjen Markus shared libraries now work on Cygwin if
you have the "file" package installed (see further details below in our
comments about shared libraries on Cygwin and MinGW).  Python works as well.
However, modern Cygwin PATH is quite bare so it is necessary to execute the
following command:

export PATH=/usr/bin:/usr/X11R6/bin:$PATH

Remaining Cygwin remarks from (now dated) information supplied by U.D.Kini

Platform: i686-pc-cygwin

Cygwin (1.5.5)
gcc (3.3.1)
Windows 98 2nd Edition
Pentium 3 Processor

Must disable everything Tcl/Tk related because the Cygwin Tcl/Tk packages
are only for the windows subset of the full Unix version, and our tcl
interface needs the full Unix version.

Must disable qhull and cgm because both Cygwin packages only have the
static version of the libraries, and autotools on Cygwin does not work
for mixed static and shared libraries.

Must disable dyndrivers because of multiple segfaults when running the
examples.  It appears that dynamic loading of shared objects (such as our
dynamic devices) is not quite ready for prime time for Cygwin.

Must disable the xterm device because the Cygwin version of the xterm
application that comes with XFree86 has trouble switching between the xterm
plot window and the ordinary command-line window for the xterm application.
However, the xterm device is disabled by default in any case since you would
only use it as last resort (monochrome, rather lame software fill) so no
need to be explicit.

./configure --prefix=$MYPREFIX --disable-tcl --without-qhull --disable-cgm \
--disable-dyndrivers

make

Simple Cygwin g77 test programs indicate iargc works fine, but
nevertheless for our configurable.f which is linked as part of libplplotf77
iargc always returns -1 for the number of arguments regardless of the actual
number so fortran command-line parsing fails.  We assume this problem is
caused by some sort of linking problem and maturation of Cygwin and/or
libtool will fix it. Meanwhile to work-around this problem do the following:

edit test/test_f77.sh and change line from

if test "yes" = "yes"; then

to

if test "yes" != "yes"; then

The remainder of the check, install, and test of installed examples should
go as normal.

make check

make install

cd MYPREFIX/share/plplotVERSION/examples

make

Finally, run

./plplot-test.sh

(which invokes test_f77.sh and other test scripts) to generate a rather
complete set of postscript examples for the available language interfaces.
Use

./plplot-test.sh --help

for instructions on testing additional file devices.


Here is a list of packages that need to be installed so that you can
successfully build PLplot (including antialiasing fonts):

From "Devel":
- gcc-core: C compiler
- gcc-g++: C++ compiler (even if you do not use C++)
- libfontconfig-devel: Font configuration and customisation library (development)
- libfreetype2-devel: High-quality software font engine (development files)
- make: The GNU version of the 'make' utility


From "Graphics":
- gd: A graphics library for fast image creation - documentation and applications
- jpeg: A library for manipulating JPEG image format files
- libgd-devel: A graphics library for fast image creation - 2.0.x development libraries
- libgd2: A graphics library for fast image creation - 2.0.x runtime
- libpng12-devel: PNG library - 1.2.x development libraries and headers

From "Utils":
- file: Determine file type using 'magic' numbers

From "X11":
- XFree86-lib-compat: Cygwin/X 4.2.0 shared libraries
- xorg-x11-devel: Cygwin/X headers and import libraries

Notes:
- It is quite possible that one or two packages in the above list are
  superfluous, but the given collection should work.
- Getting GNU C++ is required to avoid confusion over an "executable" cc.exe
  in the cygwin/bin directory: the configure script recognises this as a
  CC executable and tries to work out if it is a valid C++ compiler.
- If the GNU FORTRAN 77 compiler is not installed, then you need to add
  "--disable-f77" to the configuration options. Somehow, the configure
  script still recognises it to be present, but the build will fail
  later on.
- The "file" utility is essential if you want to build shared libraries:
  libtool uses it to identify the proper libraries the library you want
  to build depends on. However, it does not check that the file command
  actually exists and this gives _wrong_ results.
- If you want to build individual examples, use:

     make x01c.exe

  for instance. A target "x01c" will fail (make will use default rules
  to create the program then)


------------------------------------------------------------------------------
Build Instructions for Mingw
------------------------------------------------------------------------------

Platform: i686-pc-mingw32

Mingw (2.0) + MSYS (1.1.10)
gcc (3.2)
Windows XP SP1
Athlon XP Processor


You must install Msys as well as Mingw in order to build plplot under Mingw.
If you want to rebuild from CVS, you will also need MsysDTK as well.

The library must be built with "--disable-shared".

Under Mingw & Msys, simply use "configure --disable-shared" then
"make install" to build.

The Mingw display driver is called "wingcc". As a driver, it is still under
development and is only in its infancy. The driver has two driver specific
options if plplot was compiled with freetype support: "text" and "smooth".
"-drvopt text,smooth", as with the GD drivers, makes the driver use freetype
to render text, rather than plplot's hershey fonts.

------------------------------------------------------------------------------
Build Instructions for shared libraries on either Cygwin or MinGW
------------------------------------------------------------------------------

The above Cygwin and MinGW (minimalist Cygwin) instructions are for the
static library case. Since those static tests were done, PLplot core
developers (Arjen Markus for the Cygwin case, and Andrew Roach for the MinGW
case) have also got shared libraries to work on both Cygwin and MinGW.

An important prerequisite for shared libraries on these two platforms is to
have the "file" command installed.  (The libtool script uses the "file"
command to test for shared libraries so that script fails to detect shared
libraries if the "file" command is not available.) If your ./configure step
is warning you that the "file" command is not installed and shared libraries
have been disabled because of this, then you should install that command.
For Cygwin systems that command is available from
http://cygwin.com/packages . For MinGW systems that command is available
from http://gnuwin32.sourceforge.net/packages/file.htm .

For Cygwin systems, the "--disable-shared" configure option from above can
then be replaced with the combination "--disable-static --disable-dyndrivers".
You will also want to set --prefix.  Consult the results of ./configure --help
to find how to tell libtool about the locations of other required DLL's
such as libfreetype, libgd, libpng, libjpeg, and zlib.  To install those
libraries for either Cygwin or MinGW platforms, please consult the
Cygwin packages page (http://cygwin.com/packages).

For MinGW, the shared library build is pretty much the same as for the
Cygwin case.  For example, you must make sure that the "file" command is
available on your MinGW system.  Our fixes for the MinGW case got into libtool
package so for libtool-1.5.22 (used to generate the tarball for PLplot-5.6.0)
no patch should be applied to cf/ltmain.sh as was required for older
versions of PLplot on MinGW.

------------------------------------------------------------------------------
Build Instructions for MacOS X 10.3 & 10.4 (06-05-06 HPB)
------------------------------------------------------------------------------

Installing PLplot using fink on Mac OS X.

The most recent version of PLplot is available for 10.4 users using
the fink package manager (http://fink.sourceforge.net). Fink will
take care of installing all the required packages, and setting the
appropriate environment variables. After installing the fink package,
make sure you enable the so-called 'unstable tree'
(see http://fink.sourceforge.net/faq/usage-fink.php#unstable for instructions).
Now you can install the PLplot package using the command "fink install plplot".
Note that PLplot depends on some big packages, such as octave and fortran, so
it may take a long time before all the packages are installed.

For 10.3 users an older version of PLplot is available


Installing PLplot by compiling it yourself from the source.

To install the CVS version of PLplot you will need :

GNU automake 1.8.5+
GNU Autoconf 2.59+
GNU libtool 1.5.10+

In the top plplot directory issue the following commands (also see notes)

cf/bootstrap.sh

Then proceed as you would with a release.


To install the current release of PLplot:

Installing plplot 5.6.1:
(OS-X 10.3)
1) Without fortran
./configure --disable-dyndrivers --disable-f77
make LIBS="-Wl,-framework -Wl,Foundation"
make install
make check

2) With g77 [GNU Fortran (GCC) 3.4 20031015 (experimental)]
./configure --disable-dyndrivers
make LIBS="-Wl,-framework -Wl,Foundation" FFLAGS="-Wl,-single_module"
make install
make check


(OS-X 10.4)
1) Without fortran:
./configure --disable-f77 --disable-wxwidgets
make
make install
make check

2) With g77: [GNU Fortran (GCC) 3.4.3]
./configure --disable-wxwidgets
make FFLAGS="-Wl,-single_module"
make install
make check

3) With g95: [Fortran 95 (GCC) 4.2.0 20060512 (experimental)]
./configure --disable-wxwidgets --enable-f95 FC=gfortran F77=gfortran
make FFLAGS="-Wl,-single_module" FCFLAGS="-Wl,-single_module"
make install
make check

If you encounter the error:
 "g77: installation problem, cannot exec `c++filt3': No such file or directory"
You may be able to get around it by going to /usr/bin and creating c++filt3
as a link to c++filt (i.e. ln -s c++filt c++filt3, which you'll probably have
to sudo).

Notes :

Make check is only necessary if you want to compile the examples. It may
complain during the testing process, but it should build the examples.

In OS-X 10.3 Dynamic drivers don't seem to be compatible with Objective C
and by extension the AquaTerm driver, but can be used if you don't plan to
use the AquaTerm driver.

The extra LIBS flags at the make step are only necessary if you have OS-X 10.3
and are trying to use the AquaTerm driver, which uses the Foundation framework.

If you want to be able to display plots you will need either X11 from Apple
(X11 1.0 - XFree86 4.3.0 or later recommended) and the X11 SDK, or AquaTerm
(v1.0.b3 or later recommended, http://aquaterm.sourceforge.net).

------------------------------------------------------------------------------
Build Instructions for Solaris (as of plplot-5.3.0.cvs.20040217.tar.gz)
N.B. with this version FLIBS is no longer required!
------------------------------------------------------------------------------

* Platform (uname -a): SunOS sparc-solaris1 5.9 Generic_112233-03 sun4u sparc SUNW,Ultra-60

* Development environment: native cc, f95, and ld.

* Environment variables that should be set _before_ ./configure is run:

  + export MYPREFIX=/whatever

  + export PATH="/opt/SUNWspro/bin:/usr/ccs/bin:"$PATH":$MYPREFIX/bin"

    /opt/SUNWspro/bin puts native cc and f95 on the path, /usr/ccs/bin puts
    native ld on the path, and $MYPREFIX/bin is there for when you want to
    execute some of those PLplot executables or scripts you have just
    installed.

  + export CC=cc

    Identify the native C compiler for ./configure

  + export F77=f95

    Identify the native fortran compiler for ./configure

    Note, there is also a f77 script that invokes the f95 compiler with
    certain options.  But use of F77=f77 confused libtool, and it was better
    to use F77=f95 directly (with no special options).  This means our
    fortran code (interface and examples) is reasonably standards compliant
    because it all compiled under the native solaris f95 compiler with no
    special flags. Note, fortran command-line parsing worked on solaris so
    we are now three for three (g77, OSF1 f77, and solaris f95) on that
    score.

* Remaining commands to configure, build, and install:

  + ./configure --prefix=$MYPREFIX --disable-cxx --without-gnu-ld

    --disable-cxx is required since native C++ is not available on this
    system (while g++ is, and that may confuse issues unless you turn it
    off).  --without-gnu-ld is required so the native linker, /usr/ccs/bin
    is used rather than the Gnu linker in /usr/local/bin/ld.  Note this is a
    "bare bones" sparcbox so absolutely nothing is available for development
    natively other than the cc C compiler, the g95 fortran compiler, and the
    ld linker.

  + make

  + make check

  + make install

Here is the configuration summary:

command:        ./configure --prefix=/home/users/a/ai/airwin/plplot_install_solaris_sparc --disable-cxx --without-gnu-ld
system:         sparc-sun-solaris2.9
have_x:         yes
prefix:         /home/users/a/ai/airwin/plplot_install_solaris_sparc
CC:             cc
F77:            f95
LIB_TAG:        d
devices:         hp7470 hp7580 lj_hpgl mem null pbm plmeta ps psc pstex xfig xwin

Available device drivers:
static:
dynamic:         hpgl.la mem.la null.la pbm.la plmeta.la ps.la pstex.la xfig.la xwin.la

Compilation options:
with_debug:     no              with_opt:       yes
with_warn:      no              with_profile:   no

Library options:
enable_shared:  yes             enable_static:  yes
with_rpath:     yes             with_double:    yes

Optional libraries:
with_qhull:     no              with_csa:       yes
with_freetype:  no              with_pthreads:  no


Language Bindings:
enable_tcl:     no              enable_itcl:    no
enable_cxx:     no              enable_f77:     yes
enable_java:    no              enable_python:  no
enable_octave:  no

As you can see a fair number of devices got built, although the only ones
really useful on a remote machine like this without X client access are the
psc, ps, and plmeta devices. make, make check (which builds 34 postscript
files in the build tree), and make install proceeded without errors. After I
installed (to a non-root MYPREFIX that was under my control as an ordinary
user) I did the usual install tree test as well:

cd MYPREFIX/share/plplotVERSION/examples; make; ./plplot-test.sh

and 34 postscript figures were produced.  Roughly half were identical with
Linux-produced figures, and the other half were only slightly distinguishable
visually (slight changes in the rendering of some of the characters).
Presumably these differences are due to our current 16-bit rendering.

In sum, it was a good result for plplot-5.3.0.cvs.20040217.tar.gz and it
should also be a good native (cc, f95, and ld) solaris result for
PLplot-5.3.1 (when that official release is completed).

Adjust these instructions if you want to use the Gnu versions of everything
(which allows you to use g++).

------------------------------------------------------------------------------
Build Instructions for IRIX (as of plplot-5.3.0.cvs.20040217.tar.gz)
N.B. with this version FLIBS is no longer required!
(Note by Arjen Markus)
------------------------------------------------------------------------------

* Platform (uname -a): IRIX64 (machinename removed) 6.5 04101930 IP27

* Development environment: native cc, f90, and ld.

* Environment variables that should be set _before_ ./configure is run:

  + export PATH=/wherever the compilers are located:"$PATH"

    On the system that I used the cc and f90 were available via /usr/local/bin,
    this may or may not be a typical situation.

  + export CC=cc

    Identify the native C compiler for ./configure

  + export F77=f90

    Identify the native fortran compiler for ./configure

* Remaining commands to configure, build, and install:

  + ./configure --prefix=$MYPREFIX --without-gnu-ld CXXFLAGS=-LANG:std -disable-cxx --disable-tk --disable-tkwin

    Notes on the various flags:
    - CXXFLAGS is needed because the C++ compiler complained about the
      lines "use namespace std" and suggested this option to be added.
    - --disable-cxx was required nonetheless because the examples would
      not compile.
    - --disable-tk and --disable-tkwin were necessary, because the
      installation of Tcl/Tk was incomplete (change of directory structure)

  + make

  + make check

    This produced almost identical PostScript files for the C and F77
    examples.

  + make install

------------------------------------------------------------------------------
Build Instructions for AIX5.2 (as of the forthcoming plplot-5.5.2 since
there was one ./configure script problem for plplot-5.5.1 that has just
been fixed in CVS).
(This report compiled by Alan W. Irwin on 2005-04-12
from e-mail sent by Simon Pinches)
------------------------------------------------------------------------------

* Platform AIX 5.2

* Development environment: gcc

* Environment variables that should be set _before_ ./configure is run: None

Simon found a ./configure issue for plplot-5.5.1 which has since been fixed
in CVS.  He also found that dynamic devices and shared libraries did not
work for AIX5.2.  This is probably a libtool problem, and it will be worth
checking this again every year or so to see if this libtool problem has been
fixed.

When Simon used the fix in CVS (which should be released in the
forthcoming plplot-5.5.2) and used

./configure --prefix=MYPREFIX --disable-shared --enable-static

followed by the remainder of the generic install instructions at the top of
this file, then he got good results.  Note, the --disable-shared option also
automatically invokes the --disable-dyndrivers option internally.

------------------------------------------------------------------------------
Build Instructions for an IBM SP system for plplot-5.5.3. (This report
compiled by Alan W. Irwin on 2005-08-03 from e-mail sent by Andrew Ware)
------------------------------------------------------------------------------
I thought you might like to know that I have successfully compiled PLPLOT on
the IBM-SP.  It turns out g77 does not work correctly in the latest AIX so I
had to use the native Fortran and C compilers to get it to work.  The build
I used was (from the bash shell):

export CC=xlc_r
export F77=xlf_r
export OBJECT_MODE=64
./configure --prefix=????? --disable-shared --disable-dyndrivers --disable-cxx

The OBJECT_MODE=64 is not necessary to compile PLPLOT but it was necessary
to link to a program which is compiled with the -q64 option (specifying a
64-bit executable).

A couple of the examples did not compile due to incompatibilities between
xlf and g77: x01f.f and x14f.f use an intrinsic g77 function, lnblnk, which
is not found in xlf. x17f.f uses the random number generator rand for which
xlf expects a different number of arguments than g77.
------------------------------------------------------------------------------
