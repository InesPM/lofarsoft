/* A Bison parser, made by GNU Bison 1.875d.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* If NAME_PREFIX is specified substitute the variables and functions
   names.  */
#define yyparse TableGramparse
#define yylex   TableGramlex
#define yyerror TableGramerror
#define yylval  TableGramlval
#define yychar  TableGramchar
#define yydebug TableGramdebug
#define yynerrs TableGramnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     STYLE = 258,
     SELECT = 259,
     UPDATE = 260,
     UPDSET = 261,
     INSERT = 262,
     VALUES = 263,
     DELETE = 264,
     CALC = 265,
     CREATETAB = 266,
     FROM = 267,
     WHERE = 268,
     GROUPBY = 269,
     HAVING = 270,
     ORDERBY = 271,
     NODUPL = 272,
     GIVING = 273,
     INTO = 274,
     SORTASC = 275,
     SORTDESC = 276,
     LIMIT = 277,
     OFFSET = 278,
     DMINFO = 279,
     ALL = 280,
     NAME = 281,
     FLDNAME = 282,
     TABNAME = 283,
     LITERAL = 284,
     STRINGLITERAL = 285,
     REGEX = 286,
     PATTERN = 287,
     AS = 288,
     IN = 289,
     INCONE = 290,
     BETWEEN = 291,
     EXISTS = 292,
     LIKE = 293,
     EQREGEX = 294,
     NEREGEX = 295,
     LPAREN = 296,
     RPAREN = 297,
     COMMA = 298,
     LBRACKET = 299,
     RBRACKET = 300,
     LBRACE = 301,
     RBRACE = 302,
     COLON = 303,
     OPENOPEN = 304,
     OPENCLOSED = 305,
     CLOSEDOPEN = 306,
     CLOSEDCLOSED = 307,
     OPENEMPTY = 308,
     EMPTYOPEN = 309,
     CLOSEDEMPTY = 310,
     EMPTYCLOSED = 311,
     OR = 312,
     AND = 313,
     NE = 314,
     LE = 315,
     LT = 316,
     GE = 317,
     GT = 318,
     EQASS = 319,
     EQ = 320,
     MINUS = 321,
     PLUS = 322,
     MODULO = 323,
     DIVIDE = 324,
     TIMES = 325,
     UNARY = 326,
     NOT = 327,
     POWER = 328
   };
#endif
#define STYLE 258
#define SELECT 259
#define UPDATE 260
#define UPDSET 261
#define INSERT 262
#define VALUES 263
#define DELETE 264
#define CALC 265
#define CREATETAB 266
#define FROM 267
#define WHERE 268
#define GROUPBY 269
#define HAVING 270
#define ORDERBY 271
#define NODUPL 272
#define GIVING 273
#define INTO 274
#define SORTASC 275
#define SORTDESC 276
#define LIMIT 277
#define OFFSET 278
#define DMINFO 279
#define ALL 280
#define NAME 281
#define FLDNAME 282
#define TABNAME 283
#define LITERAL 284
#define STRINGLITERAL 285
#define REGEX 286
#define PATTERN 287
#define AS 288
#define IN 289
#define INCONE 290
#define BETWEEN 291
#define EXISTS 292
#define LIKE 293
#define EQREGEX 294
#define NEREGEX 295
#define LPAREN 296
#define RPAREN 297
#define COMMA 298
#define LBRACKET 299
#define RBRACKET 300
#define LBRACE 301
#define RBRACE 302
#define COLON 303
#define OPENOPEN 304
#define OPENCLOSED 305
#define CLOSEDOPEN 306
#define CLOSEDCLOSED 307
#define OPENEMPTY 308
#define EMPTYOPEN 309
#define CLOSEDEMPTY 310
#define EMPTYCLOSED 311
#define OR 312
#define AND 313
#define NE 314
#define LE 315
#define LT 316
#define GE 317
#define GT 318
#define EQASS 319
#define EQ 320
#define MINUS 321
#define PLUS 322
#define MODULO 323
#define DIVIDE 324
#define TIMES 325
#define UNARY 326
#define NOT 327
#define POWER 328




/* Copy the first part of user declarations.  */
#line 35 "TableGram.y"

using namespace casa;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 173 "TableGram.y"
typedef union YYSTYPE {
TaQLConstNode* val;
TaQLNode* node;
TaQLConstNode* nodename;
TaQLMultiNode* nodelist;
TaQLSelectNode* nodeselect;
} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 243 "TableGram.ycc"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 181 "TableGram.y"

namespace casa { //# NAMESPACE CASA - BEGIN
Bool theFromQueryDone;           /* for flex for knowing how to handle a , */
} //# NAMESPACE CASA - END
int TableGramlex (YYSTYPE*);


/* Line 214 of yacc.c.  */
#line 261 "TableGram.ycc"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC malloc
# endif

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   define YYSTACK_ALLOC alloca
#  endif
# else
#  if defined (alloca) || defined (_ALLOCA_H)
#   define YYSTACK_ALLOC alloca
#  else
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  68
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   855

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  74
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  68
/* YYNRULES -- Number of rules. */
#define YYNRULES  225
/* YYNRULES -- Number of states. */
#define YYNSTATES  415

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   328

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     8,    11,    13,    16,    20,    22,
      24,    26,    28,    30,    32,    34,    38,    42,    45,    55,
      65,    67,    69,    72,    75,    78,    87,    94,    98,   100,
     104,   111,   114,   119,   120,   124,   128,   133,   138,   140,
     144,   146,   153,   159,   162,   167,   174,   181,   182,   185,
     186,   189,   193,   195,   196,   199,   200,   203,   207,   211,
     215,   220,   225,   230,   235,   236,   239,   242,   247,   252,
     253,   256,   261,   265,   270,   273,   278,   282,   283,   285,
     289,   291,   295,   300,   304,   306,   310,   315,   317,   321,
     322,   324,   328,   331,   335,   341,   343,   347,   349,   351,
     354,   358,   362,   364,   366,   368,   370,   372,   374,   376,
     378,   380,   381,   384,   386,   390,   392,   396,   398,   402,
     406,   410,   414,   418,   422,   426,   430,   434,   438,   442,
     446,   451,   454,   458,   462,   467,   471,   476,   482,   489,
     493,   498,   500,   504,   508,   512,   516,   520,   523,   526,
     529,   533,   535,   540,   544,   549,   554,   556,   558,   560,
     562,   564,   566,   570,   574,   576,   578,   579,   583,   585,
     587,   589,   591,   593,   599,   605,   611,   617,   622,   627,
     632,   637,   642,   647,   652,   657,   661,   665,   669,   673,
     676,   679,   682,   685,   689,   692,   694,   697,   699,   701,
     703,   707,   713,   716,   721,   724,   729,   733,   737,   739,
     741,   744,   747,   749,   753,   757,   761,   763,   765,   767,
     773,   777,   783,   789,   793,   795
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
      75,     0,    -1,    79,    -1,    76,    79,    -1,    76,    77,
      -1,    77,    -1,     3,    78,    -1,    78,    43,    26,    -1,
      26,    -1,    81,    -1,    84,    -1,    88,    -1,    93,    -1,
      94,    -1,    95,    -1,    41,    81,    42,    -1,    44,    81,
      45,    -1,     4,    82,    -1,    83,    12,   110,   116,    97,
      99,   100,   101,   102,    -1,    83,   103,    12,   110,   116,
      97,    99,   100,   101,    -1,   104,    -1,    70,    -1,    25,
     105,    -1,    17,   104,    -1,     5,    85,    -1,   110,     6,
      86,    12,   110,   116,   100,   101,    -1,   110,     6,    86,
     116,   100,   101,    -1,    86,    43,    87,    -1,    87,    -1,
      26,    64,   117,    -1,    26,    44,   130,    45,    64,   117,
      -1,     7,    89,    -1,    19,   110,    90,    91,    -1,    -1,
      44,   107,    45,    -1,    41,   107,    42,    -1,     8,    44,
      92,    45,    -1,     8,    41,    92,    42,    -1,    81,    -1,
      92,    43,   117,    -1,   117,    -1,     9,    12,   110,   116,
     100,   101,    -1,    10,    12,   110,    10,   117,    -1,    10,
     117,    -1,    11,   115,   108,    96,    -1,    11,   115,    41,
     108,    42,    96,    -1,    11,   115,    44,   108,    45,    96,
      -1,    -1,    24,   135,    -1,    -1,    14,    98,    -1,    98,
      43,   117,    -1,   117,    -1,    -1,    15,   117,    -1,    -1,
      16,   133,    -1,    16,    20,   133,    -1,    16,    21,   133,
      -1,    16,    17,   133,    -1,    16,    17,    20,   133,    -1,
      16,    17,    21,   133,    -1,    16,    20,    17,   133,    -1,
      16,    21,    17,   133,    -1,    -1,    22,   117,    -1,    23,
     117,    -1,    22,   117,    23,   117,    -1,    23,   117,    22,
     117,    -1,    -1,    18,   115,    -1,    18,   115,    33,    26,
      -1,    18,    33,    26,    -1,    18,    44,   126,    45,    -1,
      19,   115,    -1,    19,   115,    33,    26,    -1,    19,    33,
      26,    -1,    -1,   106,    -1,   104,    43,   106,    -1,    26,
      -1,    26,    33,    26,    -1,    26,    33,    26,    26,    -1,
     105,    43,   106,    -1,   117,    -1,   117,    33,    26,    -1,
     117,    33,    26,    26,    -1,    26,    -1,   107,    43,    26,
      -1,    -1,   109,    -1,   108,    43,   109,    -1,    26,    26,
      -1,    26,    26,   139,    -1,    26,    26,    44,   137,    45,
      -1,   111,    -1,   110,    43,   111,    -1,    26,    -1,   113,
      -1,   112,    26,    -1,   112,    33,    26,    -1,    26,    34,
     112,    -1,   113,    -1,    26,    -1,    80,    -1,   114,    -1,
      28,    -1,    27,    -1,    30,    -1,    26,    -1,   114,    -1,
      -1,    13,   117,    -1,   118,    -1,   117,    57,   118,    -1,
     119,    -1,   118,    58,   119,    -1,   120,    -1,   120,    65,
     120,    -1,   120,    64,   120,    -1,   120,    63,   120,    -1,
     120,    62,   120,    -1,   120,    61,   120,    -1,   120,    60,
     120,    -1,   120,    59,   120,    -1,   120,    39,    31,    -1,
     120,    40,    31,    -1,   120,    39,    32,    -1,   120,    40,
      32,    -1,   120,    38,   120,    -1,   120,    72,    38,   120,
      -1,    37,    80,    -1,    72,    37,    80,    -1,   120,    34,
     120,    -1,   120,    72,    34,   120,    -1,   120,    34,   128,
      -1,   120,    72,    34,   128,    -1,   120,    36,   120,    58,
     120,    -1,   120,    72,    36,   120,    58,   120,    -1,   120,
      35,   120,    -1,   120,    72,    35,   120,    -1,   121,    -1,
     120,    67,   120,    -1,   120,    66,   120,    -1,   120,    70,
     120,    -1,   120,    69,   120,    -1,   120,    68,   120,    -1,
      66,   120,    -1,    67,   120,    -1,    72,   120,    -1,   120,
      73,   120,    -1,   122,    -1,   122,    44,   130,    45,    -1,
      41,   117,    42,    -1,    26,    41,   125,    42,    -1,    25,
      41,   125,    42,    -1,    26,    -1,    27,    -1,   123,    -1,
     124,    -1,    29,    -1,    30,    -1,    44,   126,    45,    -1,
      41,   126,    42,    -1,    80,    -1,   126,    -1,    -1,   126,
      43,   127,    -1,   127,    -1,   117,    -1,   129,    -1,   129,
      -1,   132,    -1,    61,   120,    43,   120,    63,    -1,    61,
     120,    43,   120,    47,    -1,    46,   120,    43,   120,    63,
      -1,    46,   120,    43,   120,    47,    -1,    46,    43,   120,
      63,    -1,    61,    43,   120,    63,    -1,    46,    43,   120,
      47,    -1,    61,    43,   120,    47,    -1,    61,   120,    43,
      47,    -1,    61,   120,    43,    63,    -1,    46,   120,    43,
      47,    -1,    46,   120,    43,    63,    -1,   120,    49,   120,
      -1,   120,    50,   120,    -1,   120,    51,   120,    -1,   120,
      52,   120,    -1,    54,   120,    -1,    56,   120,    -1,   120,
      53,    -1,   120,    55,    -1,   130,    43,   131,    -1,   130,
      43,    -1,    43,    -1,    43,   131,    -1,   131,    -1,   120,
      -1,   132,    -1,   120,    48,   120,    -1,   120,    48,   120,
      48,   120,    -1,   120,    48,    -1,   120,    48,    48,   120,
      -1,    48,   120,    -1,    48,   120,    48,   120,    -1,    48,
      48,   120,    -1,   133,    43,   134,    -1,   134,    -1,   117,
      -1,   117,    20,    -1,   117,    21,    -1,   136,    -1,   135,
      43,   136,    -1,    44,   137,    45,    -1,   137,    43,   138,
      -1,   138,    -1,   139,    -1,   140,    -1,    26,    64,    44,
      64,    45,    -1,    26,    64,   123,    -1,    26,    64,    44,
     141,    45,    -1,    26,    64,    44,   137,    45,    -1,   141,
      43,   123,    -1,   123,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   189,   189,   190,   193,   194,   197,   200,   202,   206,
     208,   210,   212,   214,   216,   220,   224,   230,   235,   241,
     249,   254,   259,   264,   271,   276,   281,   288,   292,   299,
     304,   311,   316,   323,   327,   330,   335,   338,   341,   347,
     351,   359,   366,   371,   378,   383,   388,   395,   399,   404,
     408,   413,   417,   424,   428,   433,   437,   442,   447,   452,
     457,   462,   467,   472,   479,   483,   488,   493,   498,   505,
     509,   514,   519,   524,   531,   536,   541,   548,   552,   557,
     568,   574,   580,   586,   592,   597,   602,   609,   614,   620,
     624,   629,   635,   641,   649,   657,   662,   673,   679,   684,
     690,   695,   702,   705,   711,   716,   721,   725,   729,   735,
     739,   744,   748,   753,   756,   763,   766,   773,   776,   781,
     786,   791,   796,   801,   806,   811,   819,   827,   835,   843,
     851,   859,   865,   871,   876,   883,   888,   894,   901,   909,
     917,   928,   931,   936,   941,   946,   951,   956,   961,   963,
     968,   975,   978,   985,   987,   992,   997,  1002,  1007,  1010,
    1015,  1018,  1023,  1027,  1031,  1036,  1040,  1046,  1050,  1058,
    1061,  1066,  1073,  1076,  1081,  1086,  1091,  1096,  1101,  1106,
    1111,  1116,  1121,  1126,  1131,  1136,  1141,  1146,  1151,  1156,
    1161,  1166,  1171,  1178,  1182,  1186,  1193,  1200,  1208,  1213,
    1218,  1223,  1228,  1233,  1238,  1243,  1248,  1255,  1259,  1266,
    1271,  1276,  1283,  1288,  1294,  1301,  1304,  1312,  1315,  1318,
    1326,  1331,  1338,  1345,  1348,  1354
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "STYLE", "SELECT", "UPDATE", "UPDSET",
  "INSERT", "VALUES", "DELETE", "CALC", "CREATETAB", "FROM", "WHERE",
  "GROUPBY", "HAVING", "ORDERBY", "NODUPL", "GIVING", "INTO", "SORTASC",
  "SORTDESC", "LIMIT", "OFFSET", "DMINFO", "ALL", "NAME", "FLDNAME",
  "TABNAME", "LITERAL", "STRINGLITERAL", "REGEX", "PATTERN", "AS", "IN",
  "INCONE", "BETWEEN", "EXISTS", "LIKE", "EQREGEX", "NEREGEX", "LPAREN",
  "RPAREN", "COMMA", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "COLON",
  "OPENOPEN", "OPENCLOSED", "CLOSEDOPEN", "CLOSEDCLOSED", "OPENEMPTY",
  "EMPTYOPEN", "CLOSEDEMPTY", "EMPTYCLOSED", "OR", "AND", "NE", "LE", "LT",
  "GE", "GT", "EQASS", "EQ", "MINUS", "PLUS", "MODULO", "DIVIDE", "TIMES",
  "UNARY", "NOT", "POWER", "$accept", "topcomm", "stylecoms", "stylecomm",
  "stylelist", "command", "subquery", "selcomm", "selrow", "selcol",
  "updcomm", "updrow", "updlist", "updexpr", "inscomm", "insrow",
  "insclist", "inspart", "insvlist", "delcomm", "calccomm", "cretabcomm",
  "dminfo", "groupby", "exprlist", "having", "order", "limitoff", "given",
  "into", "columns", "acolumns", "colexpr", "nmcolumns", "colspecs",
  "colspec", "tables", "tabalias", "tfnamen", "tfname", "stabname",
  "tabname", "whexpr", "orexpr", "andexpr", "relexpr", "arithexpr",
  "inxexpr", "simexpr", "literal", "set", "elemlist", "elems", "elem",
  "singlerange", "range", "subscripts", "subsrange", "colonrange",
  "sortlist", "sortexpr", "reclist", "recelem", "recexpr", "recfield",
  "srecfield", "rrecfield", "recvalues", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,    74,    75,    75,    76,    76,    77,    78,    78,    79,
      79,    79,    79,    79,    79,    80,    80,    81,    82,    82,
      83,    83,    83,    83,    84,    85,    85,    86,    86,    87,
      87,    88,    89,    90,    90,    90,    91,    91,    91,    92,
      92,    93,    94,    94,    95,    95,    95,    96,    96,    97,
      97,    98,    98,    99,    99,   100,   100,   100,   100,   100,
     100,   100,   100,   100,   101,   101,   101,   101,   101,   102,
     102,   102,   102,   102,   103,   103,   103,   104,   104,   104,
     105,   105,   105,   105,   106,   106,   106,   107,   107,   108,
     108,   108,   109,   109,   109,   110,   110,   111,   111,   111,
     111,   111,   112,   112,   113,   113,   114,   114,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   119,   119,   119,
     119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
     119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
     119,   120,   120,   120,   120,   120,   120,   120,   120,   120,
     120,   121,   121,   122,   122,   122,   122,   122,   122,   122,
     123,   123,   124,   124,   124,   125,   125,   126,   126,   127,
     127,   128,   129,   129,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   130,   130,   130,   130,   130,   131,   131,
     132,   132,   132,   132,   132,   132,   132,   133,   133,   134,
     134,   134,   135,   135,   136,   137,   137,   138,   138,   138,
     139,   139,   140,   141,   141,   141
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     2,     2,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     9,     9,
       1,     1,     2,     2,     2,     8,     6,     3,     1,     3,
       6,     2,     4,     0,     3,     3,     4,     4,     1,     3,
       1,     6,     5,     2,     4,     6,     6,     0,     2,     0,
       2,     3,     1,     0,     2,     0,     2,     3,     3,     3,
       4,     4,     4,     4,     0,     2,     2,     4,     4,     0,
       2,     4,     3,     4,     2,     4,     3,     0,     1,     3,
       1,     3,     4,     3,     1,     3,     4,     1,     3,     0,
       1,     3,     2,     3,     5,     1,     3,     1,     1,     2,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     1,     3,     1,     3,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     2,     3,     3,     4,     3,     4,     5,     6,     3,
       4,     1,     3,     3,     3,     3,     3,     2,     2,     2,
       3,     1,     4,     3,     4,     4,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     1,     0,     3,     1,     1,
       1,     1,     1,     5,     5,     5,     5,     4,     4,     4,
       4,     4,     4,     4,     4,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     2,     1,     2,     1,     1,     1,
       3,     5,     2,     4,     2,     4,     3,     3,     1,     1,
       2,     2,     1,     3,     3,     3,     1,     1,     1,     5,
       3,     5,     5,     3,     1,     0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned char yydefact[] =
{
       0,     0,    77,     0,     0,     0,     0,     0,     0,     0,
       5,     2,     9,    10,    11,    12,    13,    14,     8,     6,
      77,     0,   156,   157,   160,   161,     0,     0,     0,     0,
       0,    21,     0,   164,    17,     0,    20,    78,    84,   113,
     115,   117,   141,   151,   158,   159,    97,   107,   106,   108,
       0,     0,   104,    24,     0,    95,     0,    98,   105,     0,
      31,     0,     0,     0,    43,   109,   110,    89,     1,     4,
       3,     0,    23,    80,   166,    22,   166,   131,     0,     0,
       0,     0,     0,     0,   169,   117,     0,   168,   170,   172,
       0,   169,     0,     0,   147,   148,     0,   149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    99,
       0,    33,   111,     0,     0,    89,    89,    47,    90,     7,
       0,     0,   165,     0,     0,     0,     0,     0,   204,   189,
     190,     0,     0,    15,   153,   202,     0,     0,     0,     0,
     191,   192,   163,     0,    16,   162,   132,   111,     0,    74,
       0,    79,    85,   114,   116,   133,   135,   171,   139,     0,
     129,   125,   127,   126,   128,   124,   123,   122,   121,   120,
     119,   118,   143,   142,   146,   145,   144,     0,     0,     0,
       0,   150,   195,   198,     0,   197,   199,   103,   101,   102,
       0,   111,    28,    96,   100,     0,     0,     0,     0,    55,
       0,    92,     0,     0,     0,     0,    44,    81,   155,    83,
     154,     0,     0,   206,     0,     0,     0,     0,   200,   185,
     186,   187,   188,   167,    49,    76,     0,   111,    86,     0,
     134,   136,   140,     0,   130,   196,   194,   152,     0,     0,
       0,     0,    55,    87,     0,     0,     0,    38,    32,   112,
       0,    64,    42,     0,     0,    93,    47,    47,     0,    48,
     212,    91,    82,   179,   177,   183,   184,     0,   205,   180,
     178,   181,   182,     0,   203,     0,     0,    53,    75,    49,
     137,     0,   193,     0,    29,   111,    27,    64,    35,     0,
      34,     0,     0,     0,     0,     0,   209,    56,   208,     0,
       0,    41,     0,     0,     0,   216,   217,   218,    45,    46,
       0,     0,   176,   175,   174,   173,   201,    50,    52,     0,
      55,    53,   138,     0,    55,    26,    88,     0,    40,     0,
       0,     0,    59,     0,    57,     0,    58,   210,   211,     0,
      65,    66,   225,   220,     0,     0,    94,   214,   213,     0,
      54,    64,    55,     0,    64,    37,     0,    36,    60,    61,
      62,    63,   207,     0,     0,   224,     0,   225,   215,    51,
      69,    64,    30,    25,    39,    67,    68,     0,   221,     0,
       0,     0,    18,    19,   223,   219,   222,     0,     0,    70,
      72,     0,     0,    73,    71
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     8,     9,    10,    19,    11,    33,    12,    34,    35,
      13,    53,   211,   212,    14,    60,   217,   268,   347,    15,
      16,    17,   226,   297,   337,   340,   271,   321,   402,   100,
      36,    75,    37,   264,   137,   138,    54,    55,    56,    57,
      58,    67,   219,   316,    39,    40,    41,    42,    43,    44,
      45,   141,   142,    87,   176,    88,   204,   205,    89,   317,
     318,   279,   280,   324,   325,   326,   327,   386
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -306
static const short int yypact[] =
{
     737,    30,   324,   116,    42,    63,   156,   350,   102,   737,
    -306,  -306,  -306,  -306,  -306,  -306,  -306,  -306,  -306,    65,
     559,    68,    94,  -306,  -306,  -306,     6,   223,   223,   691,
     691,  -306,   579,  -306,  -306,    36,    73,  -306,   -13,    81,
    -306,   756,  -306,   111,  -306,  -306,   221,  -306,  -306,  -306,
     155,   155,  -306,  -306,    17,  -306,    72,   107,  -306,   116,
    -306,   116,   116,   143,   137,  -306,  -306,   154,  -306,  -306,
    -306,   173,    73,   169,   450,   172,   450,  -306,   592,   612,
     691,   691,   642,   182,    54,   716,   187,  -306,  -306,  -306,
     197,   137,   134,   691,   185,   185,     6,   185,   116,   255,
     234,   559,   236,   559,   559,   459,   691,   691,   691,   274,
     290,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   238,   691,   503,   148,   240,   116,  -306,
     249,   147,    27,    41,   254,   266,   266,     0,  -306,  -306,
     275,   269,   283,   559,   292,   691,   144,   691,   230,   731,
     731,   691,   165,  -306,  -306,   662,   691,   691,   691,   691,
    -306,  -306,  -306,   450,  -306,  -306,  -306,    27,   316,   298,
     116,  -306,   320,    81,  -306,   782,  -306,  -306,   731,   246,
     731,  -306,  -306,  -306,  -306,   731,   731,   731,   731,   731,
     731,   731,   335,   335,   185,   185,   185,   459,   691,   691,
     691,   185,   671,   657,   176,  -306,  -306,  -306,  -306,  -306,
       2,    52,  -306,  -306,  -306,   322,   322,    99,   559,   344,
     559,    23,   244,   216,   319,   266,  -306,   353,  -306,  -306,
    -306,   289,   511,   731,   691,   401,   535,   691,   739,   731,
     731,   731,   731,  -306,   374,  -306,   381,    27,  -306,   691,
     782,  -306,   731,   388,   731,  -306,   671,  -306,   503,   559,
     116,   240,   344,  -306,   296,   225,   128,  -306,  -306,   137,
     303,   370,   137,   336,   385,  -306,   397,   397,   385,   399,
    -306,  -306,  -306,  -306,  -306,  -306,  -306,   524,   731,  -306,
    -306,  -306,  -306,   607,   731,   691,   559,   402,  -306,   374,
     731,   691,  -306,   248,   137,    27,  -306,   370,  -306,   419,
    -306,   559,   559,   406,   372,   393,    -5,   408,  -306,   559,
     559,  -306,   196,   389,   282,  -306,  -306,  -306,  -306,  -306,
     300,   319,  -306,  -306,  -306,  -306,   731,   409,   137,   559,
     344,   402,   731,   398,   344,  -306,  -306,   330,   137,   321,
     559,   559,   408,   559,   408,   559,   408,  -306,  -306,   559,
      22,     5,   395,  -306,   207,   385,  -306,  -306,  -306,   559,
     137,   370,   344,   559,   370,  -306,   559,  -306,   408,   408,
     408,   408,  -306,   559,   559,  -306,   341,    12,  -306,   137,
     431,   370,   137,  -306,   137,   137,   137,   395,  -306,   418,
     342,   123,  -306,  -306,  -306,  -306,  -306,   440,   450,   448,
    -306,   369,   456,  -306,  -306
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -306,  -306,  -306,   474,  -306,   481,    75,   -21,  -306,  -306,
    -306,  -306,  -306,   231,  -306,  -306,  -306,  -306,   181,  -306,
    -306,  -306,   152,   198,  -306,   158,  -234,  -294,  -306,  -306,
     475,  -306,   -90,   285,   305,   277,   -40,   380,   383,   384,
      -6,   -94,  -157,    -2,   411,   414,     7,  -306,  -306,  -305,
    -306,   436,   -25,   356,   326,   -93,   263,  -193,  -111,  -282,
     168,  -306,   193,  -270,   170,   313,  -306,  -306
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -104
static const short int yytable[] =
{
      38,    66,    86,    92,    64,   169,    83,    90,   330,   255,
     244,   171,   177,   345,   206,   357,   358,   363,    38,   131,
     102,   132,   133,   127,   224,    84,    91,   384,   307,    83,
      90,   352,   354,   356,    85,    85,    94,    95,   323,    97,
     218,    24,    25,   225,   103,   383,   258,    50,    98,   273,
      51,   220,   103,   229,   262,    99,    18,   385,   167,   363,
     128,    59,   103,   302,   260,   218,   259,   274,   378,   379,
     128,   380,    91,   381,    91,    61,   399,   390,    52,   103,
     393,    85,   385,    85,   128,   146,   148,   149,   150,   152,
     299,   206,   404,    66,    73,   261,   154,   403,   129,    38,
      97,    77,    68,     2,   177,   130,   371,   266,    71,    74,
     374,   103,   175,   178,   179,   180,   101,   400,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     247,   201,   203,  -102,    52,    76,    52,    52,   391,   104,
    -102,    38,    46,    47,    48,   206,    49,   206,   344,    65,
      47,    48,   231,    49,   233,   125,   407,    50,   235,     2,
      51,    91,   238,   239,   240,   241,   242,   408,    62,   311,
      85,   166,   312,    52,   207,    47,    48,   163,    49,   165,
     134,    63,    22,    23,    74,    24,    25,   232,   215,    50,
     128,   216,    51,    26,   103,   135,   267,    27,   136,   139,
      28,    52,   140,    52,   250,   252,   253,   254,   236,   203,
     118,   119,   120,   121,   122,   143,   269,   124,   272,   256,
     305,   257,    29,    30,   153,    24,    25,     2,    32,   162,
     163,   118,   119,   120,   121,   122,    24,    25,   124,   287,
     362,   288,   164,   293,   294,    52,   170,  -103,    63,    22,
      23,   387,    24,    25,  -103,   126,   300,   304,   124,   225,
      26,   277,   172,   203,    27,   203,   210,    28,   309,    78,
     310,    79,   197,   198,   199,   214,   200,    80,   234,    81,
     221,    65,    47,    48,    82,    49,   276,   225,   168,    29,
      30,   256,   134,   343,   338,    32,   118,   119,   120,   121,
     122,   227,   336,   124,   249,   181,   182,   409,   342,   348,
     348,   228,   118,   119,   120,   121,   122,   360,   361,   124,
     313,   183,   184,   314,   315,   365,   163,   366,    63,    22,
      23,   246,    24,    25,   230,    52,   283,   370,   308,   309,
      26,    20,   245,   365,    27,   367,   248,    28,   263,    21,
      22,    23,   284,    24,    25,   118,   119,   120,   121,   122,
     270,    26,   124,   278,   376,    27,   377,   389,    28,    29,
      30,   392,   375,   376,   394,    32,    65,    47,    48,   282,
      49,   395,   396,   411,   397,   365,   398,   406,   296,   353,
      29,    30,   319,   320,    31,    66,    32,    63,    22,    23,
     322,    24,    25,   120,   121,   122,    91,   298,   124,    26,
     355,   323,   163,    27,   413,    85,    28,   339,    63,    22,
      23,   224,    24,    25,    24,    25,   350,   351,   328,   329,
      26,    63,    22,    23,    27,    24,    25,    28,    29,    30,
     222,   223,   331,    26,    32,   346,   301,    27,   289,   401,
      28,   359,   369,   364,   118,   119,   120,   121,   122,    29,
      30,   124,   373,   405,   290,    32,   410,   118,   119,   120,
     121,   122,    29,    30,   124,    63,    22,    23,    32,    24,
      25,   412,   414,    69,    63,    22,    23,    26,    24,    25,
      70,    27,   306,   349,    28,    72,    78,   341,    79,   372,
      27,   265,   281,    28,    80,    78,    81,    79,   213,   208,
     209,    82,   144,    80,   173,    81,    29,    30,   174,   243,
      82,   303,    32,   251,   368,    29,    30,   382,    63,    22,
      23,    93,    24,    25,   275,   388,    63,    22,    23,     0,
      24,    25,     0,     0,    27,     0,   202,    28,     0,     0,
       0,    79,    27,     0,     0,    28,     0,     0,   285,     0,
      63,    22,    23,     0,    24,    25,     0,     0,     0,    29,
      30,   332,     0,     0,   286,    93,    27,    29,    30,    28,
       0,     0,   291,    93,    63,    22,    23,   333,    24,    25,
     118,   119,   120,   121,   122,     0,    26,   124,   292,     0,
      27,    29,    30,    28,    63,    22,    23,    93,    24,    25,
       0,     0,     0,     0,     0,     0,    96,    63,    22,    23,
      27,    24,    25,    28,     0,    29,    30,     0,     0,     0,
       0,    32,     0,    27,     0,   145,    28,    63,    22,    23,
       0,    24,    25,     0,     0,    29,    30,     0,     0,     0,
       0,    93,     0,    27,   334,     0,    28,     0,    29,    30,
     147,     0,     0,     0,    93,     0,     0,    63,    22,    23,
     335,    24,    25,   118,   119,   120,   121,   122,    29,    30,
     124,     0,     0,    27,    93,   151,    28,    63,    22,    23,
       0,    24,    25,     0,     0,     0,    63,    22,    23,     0,
      24,    25,     0,    27,     0,   155,    28,     0,    29,    30,
     237,     0,    27,     0,    93,    28,    63,    22,    23,    79,
      24,    25,     0,   118,   119,   120,   121,   122,    29,    30,
     124,     0,    27,     0,    93,    28,     0,    29,    30,     0,
       1,     2,     3,    93,     4,     0,     5,     6,     7,     0,
     105,   106,   107,     0,   108,   109,   110,    29,    30,     0,
       0,     0,     0,    93,   155,   156,   157,   158,   159,   160,
       0,   161,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   295,   123,   124,
     105,   106,   107,     0,   108,   109,   110,   118,   119,   120,
     121,   122,     0,     0,   124,   118,   119,   120,   121,   122,
       0,     0,   124,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     155,   156,   157,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,     0,     0,   124
};

static const short int yycheck[] =
{
       2,     7,    27,    28,     6,    99,    27,    28,   278,   202,
     167,   101,   105,   307,   125,    20,    21,   322,    20,    59,
      33,    61,    62,     6,    24,    27,    28,    22,   262,    50,
      51,   313,   314,   315,    27,    28,    29,    30,    26,    32,
      13,    29,    30,    43,    57,    23,    44,    41,    12,    26,
      44,    10,    57,   143,   211,    19,    26,   362,    98,   364,
      43,    19,    57,   256,    12,    13,    64,    44,   350,   351,
      43,   353,    74,   355,    76,    12,    64,   371,     3,    57,
     374,    74,   387,    76,    43,    78,    79,    80,    81,    82,
     247,   202,   397,    99,    26,    43,    42,   391,    26,   101,
      93,    26,     0,     4,   197,    33,   340,     8,    43,    41,
     344,    57,   105,   106,   107,   108,    43,   387,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     170,   124,   125,    26,    59,    41,    61,    62,   372,    58,
      33,   143,    26,    27,    28,   256,    30,   258,   305,    26,
      27,    28,   145,    30,   147,    44,    33,    41,   151,     4,
      44,   163,   155,   156,   157,   158,   159,    44,    12,    41,
     163,    96,    44,    98,    26,    27,    28,    43,    30,    45,
      26,    25,    26,    27,    41,    29,    30,    43,    41,    41,
      43,    44,    44,    37,    57,    41,   217,    41,    44,    26,
      44,   126,    33,   128,   197,   198,   199,   200,    43,   202,
      66,    67,    68,    69,    70,    43,   218,    73,   220,    43,
     260,    45,    66,    67,    42,    29,    30,     4,    72,    42,
      43,    66,    67,    68,    69,    70,    29,    30,    73,   232,
      44,   234,    45,   236,   237,   170,    12,    26,    25,    26,
      27,    44,    29,    30,    33,    34,   249,   259,    73,    43,
      37,    45,    26,   256,    41,   258,    26,    44,    43,    46,
      45,    48,    34,    35,    36,    26,    38,    54,    48,    56,
      26,    26,    27,    28,    61,    30,    42,    43,    33,    66,
      67,    43,    26,    45,   296,    72,    66,    67,    68,    69,
      70,    26,   295,    73,    58,    31,    32,   401,   301,   311,
     312,    42,    66,    67,    68,    69,    70,   319,   320,    73,
      17,    31,    32,    20,    21,    43,    43,    45,    25,    26,
      27,    33,    29,    30,    42,   260,    47,   339,    42,    43,
      37,    17,    26,    43,    41,    45,    26,    44,    26,    25,
      26,    27,    63,    29,    30,    66,    67,    68,    69,    70,
      16,    37,    73,    44,    43,    41,    45,   369,    44,    66,
      67,   373,    42,    43,   376,    72,    26,    27,    28,    26,
      30,   383,   384,   408,    43,    43,    45,    45,    14,    17,
      66,    67,    22,    23,    70,   401,    72,    25,    26,    27,
      64,    29,    30,    68,    69,    70,   408,    26,    73,    37,
      17,    26,    43,    41,    45,   408,    44,    15,    25,    26,
      27,    24,    29,    30,    29,    30,    20,    21,   276,   277,
      37,    25,    26,    27,    41,    29,    30,    44,    66,    67,
     135,   136,    43,    37,    72,    26,    58,    41,    47,    18,
      44,    43,    43,    64,    66,    67,    68,    69,    70,    66,
      67,    73,    64,    45,    63,    72,    26,    66,    67,    68,
      69,    70,    66,    67,    73,    25,    26,    27,    72,    29,
      30,    33,    26,     9,    25,    26,    27,    37,    29,    30,
       9,    41,   261,   312,    44,    20,    46,   299,    48,   341,
      41,   216,   225,    44,    54,    46,    56,    48,   128,   126,
     126,    61,    76,    54,   103,    56,    66,    67,   104,   163,
      61,   258,    72,   197,   331,    66,    67,   359,    25,    26,
      27,    72,    29,    30,   221,   365,    25,    26,    27,    -1,
      29,    30,    -1,    -1,    41,    -1,    43,    44,    -1,    -1,
      -1,    48,    41,    -1,    -1,    44,    -1,    -1,    47,    -1,
      25,    26,    27,    -1,    29,    30,    -1,    -1,    -1,    66,
      67,    47,    -1,    -1,    63,    72,    41,    66,    67,    44,
      -1,    -1,    47,    72,    25,    26,    27,    63,    29,    30,
      66,    67,    68,    69,    70,    -1,    37,    73,    63,    -1,
      41,    66,    67,    44,    25,    26,    27,    72,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    25,    26,    27,
      41,    29,    30,    44,    -1,    66,    67,    -1,    -1,    -1,
      -1,    72,    -1,    41,    -1,    43,    44,    25,    26,    27,
      -1,    29,    30,    -1,    -1,    66,    67,    -1,    -1,    -1,
      -1,    72,    -1,    41,    47,    -1,    44,    -1,    66,    67,
      48,    -1,    -1,    -1,    72,    -1,    -1,    25,    26,    27,
      63,    29,    30,    66,    67,    68,    69,    70,    66,    67,
      73,    -1,    -1,    41,    72,    43,    44,    25,    26,    27,
      -1,    29,    30,    -1,    -1,    -1,    25,    26,    27,    -1,
      29,    30,    -1,    41,    -1,    48,    44,    -1,    66,    67,
      48,    -1,    41,    -1,    72,    44,    25,    26,    27,    48,
      29,    30,    -1,    66,    67,    68,    69,    70,    66,    67,
      73,    -1,    41,    -1,    72,    44,    -1,    66,    67,    -1,
       3,     4,     5,    72,     7,    -1,     9,    10,    11,    -1,
      34,    35,    36,    -1,    38,    39,    40,    66,    67,    -1,
      -1,    -1,    -1,    72,    48,    49,    50,    51,    52,    53,
      -1,    55,    -1,    -1,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    48,    72,    73,
      34,    35,    36,    -1,    38,    39,    40,    66,    67,    68,
      69,    70,    -1,    -1,    73,    66,    67,    68,    69,    70,
      -1,    -1,    73,    -1,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      48,    49,    50,    51,    52,    53,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    69,    70,    -1,    -1,    73
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,     3,     4,     5,     7,     9,    10,    11,    75,    76,
      77,    79,    81,    84,    88,    93,    94,    95,    26,    78,
      17,    25,    26,    27,    29,    30,    37,    41,    44,    66,
      67,    70,    72,    80,    82,    83,   104,   106,   117,   118,
     119,   120,   121,   122,   123,   124,    26,    27,    28,    30,
      41,    44,    80,    85,   110,   111,   112,   113,   114,    19,
      89,    12,    12,    25,   117,    26,   114,   115,     0,    77,
      79,    43,   104,    26,    41,   105,    41,    80,    46,    48,
      54,    56,    61,    81,   117,   120,   126,   127,   129,   132,
      81,   117,   126,    72,   120,   120,    37,   120,    12,    19,
     103,    43,    33,    57,    58,    34,    35,    36,    38,    39,
      40,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    72,    73,    44,    34,     6,    43,    26,
      33,   110,   110,   110,    26,    41,    44,   108,   109,    26,
      33,   125,   126,    43,   125,    43,   120,    48,   120,   120,
     120,    43,   120,    42,    42,    48,    49,    50,    51,    52,
      53,    55,    42,    43,    45,    45,    80,   110,    33,   115,
      12,   106,    26,   118,   119,   120,   128,   129,   120,   120,
     120,    31,    32,    31,    32,   120,   120,   120,   120,   120,
     120,   120,   120,   120,   120,   120,   120,    34,    35,    36,
      38,   120,    43,   120,   130,   131,   132,    26,   112,   113,
      26,    86,    87,   111,    26,    41,    44,    90,    13,   116,
      10,    26,   108,   108,    24,    43,    96,    26,    42,   106,
      42,   120,    43,   120,    48,   120,    43,    48,   120,   120,
     120,   120,   120,   127,   116,    26,    33,   110,    26,    58,
     120,   128,   120,   120,   120,   131,    43,    45,    44,    64,
      12,    43,   116,    26,   107,   107,     8,    81,    91,   117,
      16,   100,   117,    26,    44,   139,    42,    45,    44,   135,
     136,   109,    26,    47,    63,    47,    63,   120,   120,    47,
      63,    47,    63,   120,   120,    48,    14,    97,    26,   116,
     120,    58,   131,   130,   117,   110,    87,   100,    42,    43,
      45,    41,    44,    17,    20,    21,   117,   133,   134,    22,
      23,   101,    64,    26,   137,   138,   139,   140,    96,    96,
     137,    43,    47,    63,    47,    63,   120,    98,   117,    15,
      99,    97,   120,    45,   116,   101,    26,    92,   117,    92,
      20,    21,   133,    17,   133,    17,   133,    20,    21,    43,
     117,   117,    44,   123,    64,    43,    45,    45,   136,    43,
     117,   100,    99,    64,   100,    42,    43,    45,   133,   133,
     133,   133,   134,    23,    22,   123,   141,    44,   138,   117,
     101,   100,   117,   101,   117,   117,   117,    43,    45,    64,
     137,    18,   102,   101,   123,    45,    45,    33,    44,   115,
      26,   126,    33,    45,    26
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)		\
   ((Current).first_line   = (Rhs)[1].first_line,	\
    (Current).first_column = (Rhs)[1].first_column,	\
    (Current).last_line    = (Rhs)[N].last_line,	\
    (Current).last_column  = (Rhs)[N].last_column)
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  register short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;


  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 7:
#line 201 "TableGram.y"
    { TaQLNode::theirStyle.set (yyvsp[0].val->getString()); ;}
    break;

  case 8:
#line 203 "TableGram.y"
    { TaQLNode::theirStyle.set (yyvsp[0].val->getString()); ;}
    break;

  case 9:
#line 207 "TableGram.y"
    { TaQLNode::theirNode = *yyvsp[0].nodeselect; ;}
    break;

  case 10:
#line 209 "TableGram.y"
    { TaQLNode::theirNode = *yyvsp[0].node; ;}
    break;

  case 11:
#line 211 "TableGram.y"
    { TaQLNode::theirNode = *yyvsp[0].node; ;}
    break;

  case 12:
#line 213 "TableGram.y"
    { TaQLNode::theirNode = *yyvsp[0].node; ;}
    break;

  case 13:
#line 215 "TableGram.y"
    { TaQLNode::theirNode = *yyvsp[0].node; ;}
    break;

  case 14:
#line 217 "TableGram.y"
    { TaQLNode::theirNode = *yyvsp[0].node; ;}
    break;

  case 15:
#line 220 "TableGram.y"
    {
               yyval.nodeselect = yyvsp[-1].nodeselect;
	       yyval.nodeselect->setBrackets();
	   ;}
    break;

  case 16:
#line 224 "TableGram.y"
    {
               yyval.nodeselect = yyvsp[-1].nodeselect;
	       yyval.nodeselect->setBrackets();
	   ;}
    break;

  case 17:
#line 230 "TableGram.y"
    {
               yyval.nodeselect = yyvsp[0].nodeselect;
           ;}
    break;

  case 18:
#line 235 "TableGram.y"
    {
               yyval.nodeselect = new TaQLSelectNode(
                    new TaQLSelectNodeRep (*yyvsp[-8].node, *yyvsp[-6].nodelist, 0, *yyvsp[-5].node, *yyvsp[-4].node, *yyvsp[-3].node,
					   *yyvsp[-2].node, *yyvsp[-1].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.nodeselect);
           ;}
    break;

  case 19:
#line 241 "TableGram.y"
    {
               yyval.nodeselect = new TaQLSelectNode(
		    new TaQLSelectNodeRep (*yyvsp[-8].node, *yyvsp[-5].nodelist, 0, *yyvsp[-4].node, *yyvsp[-3].node, *yyvsp[-2].node,
					   *yyvsp[-1].node, *yyvsp[0].node, *yyvsp[-7].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.nodeselect);
           ;}
    break;

  case 20:
#line 249 "TableGram.y"
    {
               yyval.node = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 21:
#line 254 "TableGram.y"
    {          /* SELECT * FROM ... */
               yyval.node = new TaQLNode(
                    new TaQLColumnsNodeRep (False, 0));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 22:
#line 259 "TableGram.y"
    {
               yyval.node = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 23:
#line 264 "TableGram.y"
    {
               yyval.node = new TaQLNode(
                    new TaQLColumnsNodeRep (True, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 24:
#line 271 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 25:
#line 276 "TableGram.y"
    {
               yyval.node = new TaQLNode(
                    new TaQLUpdateNodeRep (*yyvsp[-7].nodelist, *yyvsp[-5].nodelist, *yyvsp[-3].nodelist, *yyvsp[-2].node, *yyvsp[-1].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 26:
#line 281 "TableGram.y"
    {
               yyval.node = new TaQLNode(
		    new TaQLUpdateNodeRep (*yyvsp[-5].nodelist, *yyvsp[-3].nodelist, 0, *yyvsp[-2].node, *yyvsp[-1].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 27:
#line 288 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 28:
#line 292 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 29:
#line 299 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLUpdExprNodeRep (yyvsp[-2].val->getString(), 0, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 30:
#line 304 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLUpdExprNodeRep (yyvsp[-5].val->getString(), *yyvsp[-3].nodelist, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 31:
#line 311 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 32:
#line 316 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLInsertNodeRep (*yyvsp[-2].nodelist, *yyvsp[-1].nodelist, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 33:
#line 323 "TableGram.y"
    {         /* no column-list */   
               yyval.nodelist = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
           ;}
    break;

  case 34:
#line 327 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-1].nodelist;
           ;}
    break;

  case 35:
#line 330 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-1].nodelist;
           ;}
    break;

  case 36:
#line 335 "TableGram.y"
    {
               yyval.node = yyvsp[-1].nodelist;
           ;}
    break;

  case 37:
#line 338 "TableGram.y"
    {
               yyval.node = yyvsp[-1].nodelist;
           ;}
    break;

  case 38:
#line 341 "TableGram.y"
    {
	       yyvsp[0].nodeselect->setNoExecute();
               yyval.node = yyvsp[0].nodeselect;
	   ;}
    break;

  case 39:
#line 347 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-2].nodelist;
	       yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 40:
#line 351 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("VALUES [", "]");
	       yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 41:
#line 359 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLDeleteNodeRep (*yyvsp[-3].nodelist, *yyvsp[-2].node, *yyvsp[-1].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 42:
#line 366 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLCalcNodeRep (*yyvsp[-2].nodelist, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 43:
#line 371 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLCalcNodeRep (0, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 44:
#line 378 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLCreTabNodeRep (yyvsp[-2].nodename->getString(), *yyvsp[-1].nodelist, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 45:
#line 383 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLCreTabNodeRep (yyvsp[-4].nodename->getString(), *yyvsp[-2].nodelist, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 46:
#line 388 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLCreTabNodeRep (yyvsp[-4].nodename->getString(), *yyvsp[-2].nodelist, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 47:
#line 395 "TableGram.y"
    {      /* no datamans */
               yyval.nodelist = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
           ;}
    break;

  case 48:
#line 399 "TableGram.y"
    {
               yyval.nodelist = yyvsp[0].nodelist;
           ;}
    break;

  case 49:
#line 404 "TableGram.y"
    {          /* no groupby */
	       yyval.node = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 50:
#line 408 "TableGram.y"
    {
	       yyval.node = yyvsp[0].nodelist;
	   ;}
    break;

  case 51:
#line 413 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-2].nodelist;
	       yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 52:
#line 417 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 53:
#line 424 "TableGram.y"
    {          /* no having */
	       yyval.node = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 54:
#line 428 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
	   ;}
    break;

  case 55:
#line 433 "TableGram.y"
    {          /* no sort */
	       yyval.node = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 56:
#line 437 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 57:
#line 442 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 58:
#line 447 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Descending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 59:
#line 452 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 60:
#line 457 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 61:
#line 462 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 62:
#line 467 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 63:
#line 472 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 64:
#line 479 "TableGram.y"
    {         /* no limit,offset */
	       yyval.node = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 65:
#line 483 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLLimitOffNodeRep (*yyvsp[0].node, 0));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 66:
#line 488 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLLimitOffNodeRep (0, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 67:
#line 493 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLLimitOffNodeRep (*yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 68:
#line 498 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLLimitOffNodeRep (*yyvsp[0].node, *yyvsp[-2].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 69:
#line 505 "TableGram.y"
    {          /* no result */
	       yyval.node = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 70:
#line 509 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep (yyvsp[0].nodename->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 71:
#line 514 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep (yyvsp[-2].nodename->getString(), yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 72:
#line 519 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep ("", yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 73:
#line 524 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep (*yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 74:
#line 531 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep (yyvsp[0].nodename->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 75:
#line 536 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep (yyvsp[-2].nodename->getString(), yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 76:
#line 541 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLGivingNodeRep ("", yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 77:
#line 548 "TableGram.y"
    {          /* no column names given (thus take all) */
               yyval.nodelist = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
           ;}
    break;

  case 78:
#line 552 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 79:
#line 557 "TableGram.y"
    {
	       yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 80:
#line 568 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               TaQLNode p (new TaQLKeyColNodeRep (yyvsp[0].val->getString()));
               yyval.nodelist->add (new TaQLColNodeRep (p, "", ""));
	   ;}
    break;

  case 81:
#line 574 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               TaQLNode p (new TaQLKeyColNodeRep (yyvsp[-2].val->getString()));
               yyval.nodelist->add (new TaQLColNodeRep (p, yyvsp[0].val->getString(), ""));
	   ;}
    break;

  case 82:
#line 580 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               TaQLNode p (new TaQLKeyColNodeRep (yyvsp[-3].val->getString()));
               yyval.nodelist->add (new TaQLColNodeRep (p, yyvsp[-1].val->getString(), yyvsp[0].val->getString()));
	   ;}
    break;

  case 83:
#line 586 "TableGram.y"
    {
	       yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 84:
#line 592 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLColNodeRep (*yyvsp[0].node, "", ""));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 85:
#line 597 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLColNodeRep (*yyvsp[-2].node, yyvsp[0].val->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 86:
#line 602 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLColNodeRep (*yyvsp[-3].node, yyvsp[-1].val->getString(), yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 87:
#line 609 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (new TaQLKeyColNodeRep (yyvsp[0].val->getString()));
	   ;}
    break;

  case 88:
#line 614 "TableGram.y"
    {
	       yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (new TaQLKeyColNodeRep (yyvsp[0].val->getString()));
	   ;}
    break;

  case 89:
#line 620 "TableGram.y"
    {          /* no column specifications given */
               yyval.nodelist = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
           ;}
    break;

  case 90:
#line 624 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 91:
#line 629 "TableGram.y"
    {
	       yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 92:
#line 635 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
		    new TaQLColSpecNodeRep(yyvsp[-1].val->getString(), yyvsp[0].val->getString(),
		                           TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 93:
#line 641 "TableGram.y"
    {	
               TaQLMultiNode re(False);
	       re.add (*yyvsp[0].node);
	       yyval.node = new TaQLNode(
                    new TaQLColSpecNodeRep(yyvsp[-2].val->getString(), yyvsp[-1].val->getString(),
		                           re));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 94:
#line 649 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLColSpecNodeRep(yyvsp[-4].val->getString(), yyvsp[-3].val->getString(),
		                           *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 95:
#line 657 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 96:
#line 662 "TableGram.y"
    {
	       yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 97:
#line 673 "TableGram.y"
    {                          /* table name is also alias */
	       yyvsp[0].val->setIsTableName();
	       yyval.node = new TaQLNode(
                    new TaQLTableNodeRep(*yyvsp[0].val, yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 98:
#line 679 "TableGram.y"
    {                        /* no alias */
	       yyval.node = new TaQLNode(
	            new TaQLTableNodeRep(*yyvsp[0].node, ""));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 99:
#line 684 "TableGram.y"
    {
	       yyvsp[0].val->setIsTableName();
	       yyval.node = new TaQLNode(
	            new TaQLTableNodeRep(*yyvsp[-1].node, yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 100:
#line 690 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLTableNodeRep(*yyvsp[-2].node, yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 101:
#line 695 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLTableNodeRep(*yyvsp[0].node, yyvsp[-2].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 102:
#line 702 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 103:
#line 705 "TableGram.y"
    {
	       yyvsp[0].val->setIsTableName();
               yyval.node = yyvsp[0].val;
           ;}
    break;

  case 104:
#line 711 "TableGram.y"
    {
	       theFromQueryDone = True;
	       yyvsp[0].nodeselect->setFromExecute();
               yyval.node = yyvsp[0].nodeselect;
           ;}
    break;

  case 105:
#line 716 "TableGram.y"
    {
	       yyval.node = yyvsp[0].nodename;
           ;}
    break;

  case 106:
#line 721 "TableGram.y"
    {
	       yyvsp[0].val->setIsTableName();
               yyval.nodename = yyvsp[0].val;
           ;}
    break;

  case 107:
#line 725 "TableGram.y"
    {
	       yyvsp[0].val->setIsTableName();
               yyval.nodename = yyvsp[0].val;
           ;}
    break;

  case 108:
#line 729 "TableGram.y"
    {
	       yyvsp[0].val->setIsTableName();
               yyval.nodename = yyvsp[0].val;
           ;}
    break;

  case 109:
#line 735 "TableGram.y"
    {
	       yyvsp[0].val->setIsTableName();
               yyval.nodename = yyvsp[0].val;
           ;}
    break;

  case 110:
#line 739 "TableGram.y"
    {
               yyval.nodename = yyvsp[0].nodename;
           ;}
    break;

  case 111:
#line 744 "TableGram.y"
    {                   /* no selection */
	       yyval.node = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 112:
#line 748 "TableGram.y"
    {
	       yyval.node = yyvsp[0].node;
	   ;}
    break;

  case 113:
#line 753 "TableGram.y"
    {
	       yyval.node = yyvsp[0].node;
           ;}
    break;

  case 114:
#line 756 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_OR, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 115:
#line 763 "TableGram.y"
    {
	       yyval.node = yyvsp[0].node;
           ;}
    break;

  case 116:
#line 766 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_AND, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 117:
#line 773 "TableGram.y"
    {
	       yyval.node = yyvsp[0].node;
           ;}
    break;

  case 118:
#line 776 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 119:
#line 781 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 120:
#line 786 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GT, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 121:
#line 791 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GE, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 122:
#line 796 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LT, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 123:
#line 801 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LE, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 124:
#line 806 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 125:
#line 811 "TableGram.y"
    {
	       TaQLMultiNode re(False);
               re.add (*yyvsp[0].val);
               TaQLNode ref (new TaQLFuncNodeRep("REGEX", re));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *yyvsp[-2].node, ref));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 126:
#line 819 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*yyvsp[0].val);
               TaQLNode ref (new TaQLFuncNodeRep("REGEX", re));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *yyvsp[-2].node, ref));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 127:
#line 827 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*yyvsp[0].val);
               TaQLNode ref (new TaQLFuncNodeRep("PATTERN", re));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *yyvsp[-2].node, ref));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 128:
#line 835 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*yyvsp[0].val);
               TaQLNode ref (new TaQLFuncNodeRep("PATTERN", re));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *yyvsp[-2].node, ref));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 129:
#line 843 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*yyvsp[0].node);
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *yyvsp[-2].node, ref));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 130:
#line 851 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*yyvsp[0].node);
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *yyvsp[-3].node, ref));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 131:
#line 859 "TableGram.y"
    {
	       yyvsp[0].nodeselect->setNoExecute();
	       yyval.node = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_EXISTS, *yyvsp[0].nodeselect));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	    ;}
    break;

  case 132:
#line 865 "TableGram.y"
    {
	       yyvsp[0].nodeselect->setNoExecute();
	       yyval.node = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOTEXISTS, *yyvsp[0].nodeselect));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 133:
#line 871 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 134:
#line 876 "TableGram.y"
    {
	       TaQLNode p(
                    new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *yyvsp[-3].node, *yyvsp[0].node));
	       yyval.node = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 135:
#line 883 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *yyvsp[-2].node, *yyvsp[0].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 136:
#line 888 "TableGram.y"
    {
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *yyvsp[-3].node, *yyvsp[0].nodelist));
	       yyval.node = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 137:
#line 894 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *yyvsp[-2].node, *yyvsp[0].node, True));
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *yyvsp[-4].node, pr));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 138:
#line 901 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *yyvsp[-2].node, *yyvsp[0].node, True));
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *yyvsp[-5].node, pr));
	       yyval.node = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 139:
#line 909 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (*yyvsp[-2].node);
	       pr.add (*yyvsp[0].node);
	       yyval.node = new TaQLNode(
                    new TaQLFuncNodeRep ("anyCone", pr));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 140:
#line 917 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (*yyvsp[-3].node);
	       pr.add (*yyvsp[0].node);
               TaQLNode p (new TaQLFuncNodeRep ("anyCone", pr));
	       yyval.node = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 141:
#line 928 "TableGram.y"
    {
	       yyval.node= yyvsp[0].node;
           ;}
    break;

  case 142:
#line 931 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_PLUS, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 143:
#line 936 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MINUS, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 144:
#line 941 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_TIMES, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 145:
#line 946 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_DIVIDE, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 146:
#line 951 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MODULO, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 147:
#line 956 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_MINUS, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 148:
#line 962 "TableGram.y"
    { yyval.node = yyvsp[0].node; ;}
    break;

  case 149:
#line 963 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 150:
#line 968 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_POWER, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 151:
#line 975 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 152:
#line 978 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_INDEX, *yyvsp[-3].node, *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 153:
#line 986 "TableGram.y"
    { yyval.node = yyvsp[-1].node; ;}
    break;

  case 154:
#line 987 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLFuncNodeRep (yyvsp[-3].val->getString(), *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 155:
#line 992 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLFuncNodeRep ("ALL", *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 156:
#line 997 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLKeyColNodeRep (yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 157:
#line 1002 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLKeyColNodeRep (yyvsp[0].val->getString()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 158:
#line 1007 "TableGram.y"
    {
	       yyval.node = yyvsp[0].val;
	   ;}
    break;

  case 159:
#line 1010 "TableGram.y"
    {
	       yyval.node = yyvsp[0].node;
	   ;}
    break;

  case 160:
#line 1015 "TableGram.y"
    {
	       yyval.val = yyvsp[0].val;
	   ;}
    break;

  case 161:
#line 1018 "TableGram.y"
    {
	       yyval.val = yyvsp[0].val;
	   ;}
    break;

  case 162:
#line 1023 "TableGram.y"
    {
               yyvsp[-1].nodelist->setIsSetOrArray();
               yyval.node = yyvsp[-1].nodelist;
           ;}
    break;

  case 163:
#line 1027 "TableGram.y"
    {
               yyvsp[-1].nodelist->setIsSetOrArray();
               yyval.node = yyvsp[-1].nodelist;
           ;}
    break;

  case 164:
#line 1031 "TableGram.y"
    {
               yyval.node = yyvsp[0].nodeselect;
           ;}
    break;

  case 165:
#line 1036 "TableGram.y"
    {
               yyval.nodelist = yyvsp[0].nodelist;
	       yyval.nodelist->setPPFix("", "");
           ;}
    break;

  case 166:
#line 1040 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);       /* no elements */
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
           ;}
    break;

  case 167:
#line 1046 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-2].nodelist;
	       yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 168:
#line 1050 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
	       yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 169:
#line 1058 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
	   ;}
    break;

  case 170:
#line 1061 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 171:
#line 1066 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(True);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->add (*yyvsp[0].node);
           ;}
    break;

  case 172:
#line 1073 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 173:
#line 1076 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-3].node, *yyvsp[-1].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 174:
#line 1081 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-3].node, *yyvsp[-1].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 175:
#line 1086 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-3].node, *yyvsp[-1].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 176:
#line 1091 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-3].node, *yyvsp[-1].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 177:
#line 1096 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (*yyvsp[-1].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
          ;}
    break;

  case 178:
#line 1101 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (*yyvsp[-1].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
          ;}
    break;

  case 179:
#line 1106 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (*yyvsp[-1].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 180:
#line 1111 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (*yyvsp[-1].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 181:
#line 1116 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-2].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 182:
#line 1121 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-2].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 183:
#line 1126 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-2].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 184:
#line 1131 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-2].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 185:
#line 1136 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-2].node, *yyvsp[0].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 186:
#line 1141 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-2].node, *yyvsp[0].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 187:
#line 1146 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-2].node, *yyvsp[0].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 188:
#line 1151 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-2].node, *yyvsp[0].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 189:
#line 1156 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (*yyvsp[0].node, False));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 190:
#line 1161 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (*yyvsp[0].node, True));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 191:
#line 1166 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (False, *yyvsp[-1].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 192:
#line 1171 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRangeNodeRep (True, *yyvsp[-1].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 193:
#line 1178 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-2].nodelist;
	       yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 194:
#line 1182 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-1].nodelist;
	       yyval.nodelist->add (new TaQLIndexNodeRep(0, 0, 0));
	   ;}
    break;

  case 195:
#line 1186 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
	       yyval.nodelist->add (new TaQLIndexNodeRep(0, 0, 0));
	       yyval.nodelist->add (new TaQLIndexNodeRep(0, 0, 0));
	   ;}
    break;

  case 196:
#line 1193 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
	       yyval.nodelist->add (new TaQLIndexNodeRep(0, 0, 0));
	       yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 197:
#line 1200 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
	       yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 198:
#line 1208 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (*yyvsp[0].node, 0, 0));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 199:
#line 1213 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
	   ;}
    break;

  case 200:
#line 1218 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (*yyvsp[-2].node, *yyvsp[0].node, 0));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 201:
#line 1223 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (*yyvsp[-4].node, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 202:
#line 1228 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (*yyvsp[-1].node, 0, 0));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 203:
#line 1233 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (*yyvsp[-3].node, 0, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 204:
#line 1238 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (0, *yyvsp[0].node, 0));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 205:
#line 1243 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (0, *yyvsp[-2].node, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 206:
#line 1248 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLIndexNodeRep (0, 0, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
            ;}
    break;

  case 207:
#line 1255 "TableGram.y"
    {
               yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 208:
#line 1259 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 209:
#line 1266 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::None, *yyvsp[0].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 210:
#line 1271 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Ascending, *yyvsp[-1].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 211:
#line 1276 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Descending, *yyvsp[-1].node));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 212:
#line 1283 "TableGram.y"
    {
               yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 213:
#line 1288 "TableGram.y"
    {
	       yyval.nodelist = yyvsp[-2].nodelist;
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 214:
#line 1294 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRecFldNodeRep ("", *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
	   ;}
    break;

  case 215:
#line 1301 "TableGram.y"
    {
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 216:
#line 1304 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
               yyval.nodelist->add (*yyvsp[0].node);
	   ;}
    break;

  case 217:
#line 1312 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 218:
#line 1315 "TableGram.y"
    {
               yyval.node = yyvsp[0].node;
           ;}
    break;

  case 219:
#line 1318 "TableGram.y"
    {
	       /* Like in glish [=] is the syntax for an empty 'record' */
	       yyval.node = new TaQLNode(
                    new TaQLRecFldNodeRep (yyvsp[-4].val->getString(), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 220:
#line 1326 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRecFldNodeRep (yyvsp[-2].val->getString(), *yyvsp[0].val));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 221:
#line 1331 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRecFldNodeRep (yyvsp[-4].val->getString(), *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 222:
#line 1338 "TableGram.y"
    {
	       yyval.node = new TaQLNode(
                    new TaQLRecFldNodeRep (yyvsp[-4].val->getString(), *yyvsp[-1].nodelist));
	       TaQLNode::theirNodesCreated.push_back (yyval.node);
           ;}
    break;

  case 223:
#line 1345 "TableGram.y"
    {
               yyval.nodelist->add (*yyvsp[0].val);
	   ;}
    break;

  case 224:
#line 1348 "TableGram.y"
    {
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
               yyval.nodelist->add (*yyvsp[0].val);
	   ;}
    break;

  case 225:
#line 1354 "TableGram.y"
    {      /* empty vector */
	       yyval.nodelist = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back (yyval.nodelist);
	       yyval.nodelist->setPPFix ("[", "]");
           ;}
    break;


    }

/* Line 1010 of yacc.c.  */
#line 3525 "TableGram.ycc"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
		 yydestruct (yystos[*yyssp], yyvsp);
	       }
        }
      else
	{
	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
	  yydestruct (yytoken, &yylval);
	  yychar = YYEMPTY;

	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
#endif

  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 1360 "TableGram.y"



