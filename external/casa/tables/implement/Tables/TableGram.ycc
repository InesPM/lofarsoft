/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse TableGramparse
#define yylex   TableGramlex
#define yyerror TableGramerror
#define yylval  TableGramlval
#define yychar  TableGramchar
#define yydebug TableGramdebug
#define yynerrs TableGramnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     STYLE = 258,
     SELECT = 259,
     UPDATE = 260,
     UPDSET = 261,
     INSERT = 262,
     VALUES = 263,
     DELETE = 264,
     CALC = 265,
     CREATETAB = 266,
     FROM = 267,
     WHERE = 268,
     GROUPBY = 269,
     HAVING = 270,
     ORDERBY = 271,
     NODUPL = 272,
     GIVING = 273,
     INTO = 274,
     SORTASC = 275,
     SORTDESC = 276,
     LIMIT = 277,
     OFFSET = 278,
     DMINFO = 279,
     ALL = 280,
     NAME = 281,
     FLDNAME = 282,
     TABNAME = 283,
     LITERAL = 284,
     STRINGLITERAL = 285,
     REGEX = 286,
     PATTERN = 287,
     AS = 288,
     IN = 289,
     INCONE = 290,
     BETWEEN = 291,
     EXISTS = 292,
     LIKE = 293,
     EQREGEX = 294,
     NEREGEX = 295,
     LPAREN = 296,
     RPAREN = 297,
     COMMA = 298,
     LBRACKET = 299,
     RBRACKET = 300,
     LBRACE = 301,
     RBRACE = 302,
     COLON = 303,
     OPENOPEN = 304,
     OPENCLOSED = 305,
     CLOSEDOPEN = 306,
     CLOSEDCLOSED = 307,
     OPENEMPTY = 308,
     EMPTYOPEN = 309,
     CLOSEDEMPTY = 310,
     EMPTYCLOSED = 311,
     OR = 312,
     AND = 313,
     NE = 314,
     LE = 315,
     LT = 316,
     GE = 317,
     GT = 318,
     EQASS = 319,
     EQ = 320,
     MINUS = 321,
     PLUS = 322,
     MODULO = 323,
     DIVIDE = 324,
     TIMES = 325,
     UNARY = 326,
     NOT = 327,
     POWER = 328
   };
#endif
/* Tokens.  */
#define STYLE 258
#define SELECT 259
#define UPDATE 260
#define UPDSET 261
#define INSERT 262
#define VALUES 263
#define DELETE 264
#define CALC 265
#define CREATETAB 266
#define FROM 267
#define WHERE 268
#define GROUPBY 269
#define HAVING 270
#define ORDERBY 271
#define NODUPL 272
#define GIVING 273
#define INTO 274
#define SORTASC 275
#define SORTDESC 276
#define LIMIT 277
#define OFFSET 278
#define DMINFO 279
#define ALL 280
#define NAME 281
#define FLDNAME 282
#define TABNAME 283
#define LITERAL 284
#define STRINGLITERAL 285
#define REGEX 286
#define PATTERN 287
#define AS 288
#define IN 289
#define INCONE 290
#define BETWEEN 291
#define EXISTS 292
#define LIKE 293
#define EQREGEX 294
#define NEREGEX 295
#define LPAREN 296
#define RPAREN 297
#define COMMA 298
#define LBRACKET 299
#define RBRACKET 300
#define LBRACE 301
#define RBRACE 302
#define COLON 303
#define OPENOPEN 304
#define OPENCLOSED 305
#define CLOSEDOPEN 306
#define CLOSEDCLOSED 307
#define OPENEMPTY 308
#define EMPTYOPEN 309
#define CLOSEDEMPTY 310
#define EMPTYCLOSED 311
#define OR 312
#define AND 313
#define NE 314
#define LE 315
#define LT 316
#define GE 317
#define GT 318
#define EQASS 319
#define EQ 320
#define MINUS 321
#define PLUS 322
#define MODULO 323
#define DIVIDE 324
#define TIMES 325
#define UNARY 326
#define NOT 327
#define POWER 328




/* Copy the first part of user declarations.  */
#line 35 "TableGram.y"

using namespace casa;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 175 "TableGram.y"
{
TaQLConstNode* val;
TaQLNode* node;
TaQLConstNode* nodename;
TaQLMultiNode* nodelist;
TaQLSelectNode* nodeselect;
}
/* Line 187 of yacc.c.  */
#line 262 "TableGram.ycc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 183 "TableGram.y"

namespace casa { //# NAMESPACE CASA - BEGIN
Bool theFromQueryDone;           /* for flex for knowing how to handle a , */
} //# NAMESPACE CASA - END
int TableGramlex (YYSTYPE*);


/* Line 216 of yacc.c.  */
#line 281 "TableGram.ycc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  69
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   884

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  74
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  70
/* YYNRULES -- Number of rules.  */
#define YYNRULES  230
/* YYNRULES -- Number of states.  */
#define YYNSTATES  420

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   328

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     8,    11,    13,    16,    20,    22,
      24,    26,    28,    30,    32,    34,    38,    42,    45,    55,
      65,    67,    69,    72,    75,    78,    87,    94,    98,   100,
     104,   111,   114,   119,   120,   124,   128,   133,   138,   140,
     144,   146,   153,   159,   162,   167,   174,   181,   182,   185,
     186,   189,   193,   195,   196,   199,   200,   203,   207,   211,
     215,   220,   225,   230,   235,   236,   239,   242,   247,   252,
     253,   256,   261,   265,   270,   273,   278,   282,   283,   285,
     289,   291,   295,   300,   304,   306,   310,   315,   317,   321,
     322,   324,   328,   331,   335,   341,   343,   347,   349,   351,
     354,   358,   362,   364,   366,   368,   370,   372,   374,   376,
     378,   380,   381,   384,   386,   390,   392,   396,   398,   402,
     406,   410,   414,   418,   422,   426,   430,   434,   438,   442,
     446,   451,   454,   458,   462,   467,   471,   476,   482,   489,
     493,   498,   500,   504,   508,   512,   516,   520,   523,   526,
     529,   533,   535,   540,   542,   545,   549,   554,   559,   561,
     563,   565,   567,   569,   571,   573,   575,   577,   581,   585,
     587,   589,   590,   594,   596,   598,   600,   602,   604,   610,
     616,   622,   628,   633,   638,   643,   648,   653,   658,   663,
     668,   672,   676,   680,   684,   687,   690,   693,   696,   700,
     703,   705,   708,   710,   712,   714,   718,   724,   727,   732,
     735,   740,   744,   748,   750,   752,   755,   758,   760,   764,
     768,   772,   774,   776,   778,   784,   788,   794,   800,   804,
     806
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
      75,     0,    -1,    79,    -1,    76,    79,    -1,    76,    77,
      -1,    77,    -1,     3,    78,    -1,    78,    43,    26,    -1,
      26,    -1,    81,    -1,    84,    -1,    88,    -1,    93,    -1,
      94,    -1,    95,    -1,    41,    81,    42,    -1,    44,    81,
      45,    -1,     4,    82,    -1,    83,    12,   110,   116,    97,
      99,   100,   101,   102,    -1,    83,   103,    12,   110,   116,
      97,    99,   100,   101,    -1,   104,    -1,    70,    -1,    25,
     105,    -1,    17,   104,    -1,     5,    85,    -1,   110,     6,
      86,    12,   110,   116,   100,   101,    -1,   110,     6,    86,
     116,   100,   101,    -1,    86,    43,    87,    -1,    87,    -1,
      26,    64,   117,    -1,    26,    44,   132,    45,    64,   117,
      -1,     7,    89,    -1,    19,   110,    90,    91,    -1,    -1,
      44,   107,    45,    -1,    41,   107,    42,    -1,     8,    44,
      92,    45,    -1,     8,    41,    92,    42,    -1,    81,    -1,
      92,    43,   117,    -1,   117,    -1,     9,    12,   110,   116,
     100,   101,    -1,    10,    12,   110,    10,   117,    -1,    10,
     117,    -1,    11,   115,   108,    96,    -1,    11,   115,    41,
     108,    42,    96,    -1,    11,   115,    44,   108,    45,    96,
      -1,    -1,    24,   137,    -1,    -1,    14,    98,    -1,    98,
      43,   117,    -1,   117,    -1,    -1,    15,   117,    -1,    -1,
      16,   135,    -1,    16,    20,   135,    -1,    16,    21,   135,
      -1,    16,    17,   135,    -1,    16,    17,    20,   135,    -1,
      16,    17,    21,   135,    -1,    16,    20,    17,   135,    -1,
      16,    21,    17,   135,    -1,    -1,    22,   117,    -1,    23,
     117,    -1,    22,   117,    23,   117,    -1,    23,   117,    22,
     117,    -1,    -1,    18,   115,    -1,    18,   115,    33,    26,
      -1,    18,    33,    26,    -1,    18,    44,   128,    45,    -1,
      19,   115,    -1,    19,   115,    33,    26,    -1,    19,    33,
      26,    -1,    -1,   106,    -1,   104,    43,   106,    -1,    26,
      -1,    26,    33,    26,    -1,    26,    33,    26,    26,    -1,
     105,    43,   106,    -1,   117,    -1,   117,    33,    26,    -1,
     117,    33,    26,    26,    -1,    26,    -1,   107,    43,    26,
      -1,    -1,   109,    -1,   108,    43,   109,    -1,    26,    26,
      -1,    26,    26,   141,    -1,    26,    26,    44,   139,    45,
      -1,   111,    -1,   110,    43,   111,    -1,    26,    -1,   113,
      -1,   112,    26,    -1,   112,    33,    26,    -1,    26,    34,
     112,    -1,   113,    -1,    26,    -1,    80,    -1,   114,    -1,
      28,    -1,    27,    -1,    30,    -1,    26,    -1,   114,    -1,
      -1,    13,   117,    -1,   118,    -1,   117,    57,   118,    -1,
     119,    -1,   118,    58,   119,    -1,   120,    -1,   120,    65,
     120,    -1,   120,    64,   120,    -1,   120,    63,   120,    -1,
     120,    62,   120,    -1,   120,    61,   120,    -1,   120,    60,
     120,    -1,   120,    59,   120,    -1,   120,    39,    31,    -1,
     120,    40,    31,    -1,   120,    39,    32,    -1,   120,    40,
      32,    -1,   120,    38,   120,    -1,   120,    72,    38,   120,
      -1,    37,    80,    -1,    72,    37,    80,    -1,   120,    34,
     120,    -1,   120,    72,    34,   120,    -1,   120,    34,   130,
      -1,   120,    72,    34,   130,    -1,   120,    36,   120,    58,
     120,    -1,   120,    72,    36,   120,    58,   120,    -1,   120,
      35,   120,    -1,   120,    72,    35,   120,    -1,   121,    -1,
     120,    67,   120,    -1,   120,    66,   120,    -1,   120,    70,
     120,    -1,   120,    69,   120,    -1,   120,    68,   120,    -1,
      66,   120,    -1,    67,   120,    -1,    72,   120,    -1,   120,
      73,   120,    -1,   122,    -1,   122,    44,   132,    45,    -1,
     123,    -1,   123,   124,    -1,    41,   117,    42,    -1,    26,
      41,   127,    42,    -1,    25,    41,   127,    42,    -1,    26,
      -1,    27,    -1,   125,    -1,   126,    -1,    26,    -1,    27,
      -1,    30,    -1,    29,    -1,    30,    -1,    44,   128,    45,
      -1,    41,   128,    42,    -1,    80,    -1,   128,    -1,    -1,
     128,    43,   129,    -1,   129,    -1,   117,    -1,   131,    -1,
     131,    -1,   134,    -1,    61,   120,    43,   120,    63,    -1,
      61,   120,    43,   120,    47,    -1,    46,   120,    43,   120,
      63,    -1,    46,   120,    43,   120,    47,    -1,    46,    43,
     120,    63,    -1,    61,    43,   120,    63,    -1,    46,    43,
     120,    47,    -1,    61,    43,   120,    47,    -1,    61,   120,
      43,    47,    -1,    61,   120,    43,    63,    -1,    46,   120,
      43,    47,    -1,    46,   120,    43,    63,    -1,   120,    49,
     120,    -1,   120,    50,   120,    -1,   120,    51,   120,    -1,
     120,    52,   120,    -1,    54,   120,    -1,    56,   120,    -1,
     120,    53,    -1,   120,    55,    -1,   132,    43,   133,    -1,
     132,    43,    -1,    43,    -1,    43,   133,    -1,   133,    -1,
     120,    -1,   134,    -1,   120,    48,   120,    -1,   120,    48,
     120,    48,   120,    -1,   120,    48,    -1,   120,    48,    48,
     120,    -1,    48,   120,    -1,    48,   120,    48,   120,    -1,
      48,    48,   120,    -1,   135,    43,   136,    -1,   136,    -1,
     117,    -1,   117,    20,    -1,   117,    21,    -1,   138,    -1,
     137,    43,   138,    -1,    44,   139,    45,    -1,   139,    43,
     140,    -1,   140,    -1,   141,    -1,   142,    -1,    26,    64,
      44,    64,    45,    -1,    26,    64,   125,    -1,    26,    64,
      44,   143,    45,    -1,    26,    64,    44,   139,    45,    -1,
     143,    43,   125,    -1,   125,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   191,   191,   192,   195,   196,   199,   202,   204,   208,
     210,   212,   214,   216,   218,   222,   226,   232,   237,   243,
     251,   256,   261,   266,   273,   278,   283,   290,   294,   301,
     306,   313,   318,   325,   329,   332,   337,   340,   343,   349,
     353,   361,   368,   373,   380,   385,   390,   397,   401,   406,
     410,   415,   419,   426,   430,   435,   439,   444,   449,   454,
     459,   464,   469,   474,   481,   485,   490,   495,   500,   507,
     511,   516,   521,   526,   533,   538,   543,   550,   554,   559,
     570,   576,   582,   588,   594,   599,   604,   611,   616,   622,
     626,   631,   637,   643,   651,   659,   664,   675,   681,   686,
     692,   697,   704,   707,   713,   718,   723,   727,   731,   737,
     741,   746,   750,   755,   758,   765,   768,   775,   778,   783,
     788,   793,   798,   803,   808,   813,   821,   829,   837,   845,
     853,   861,   867,   873,   878,   885,   890,   896,   903,   911,
     919,   930,   933,   938,   943,   948,   953,   958,   963,   965,
     970,   977,   980,   987,   989,   996,   998,  1003,  1008,  1013,
    1018,  1021,  1026,  1028,  1030,  1034,  1037,  1042,  1046,  1050,
    1055,  1059,  1065,  1069,  1077,  1080,  1085,  1092,  1095,  1100,
    1105,  1110,  1115,  1120,  1125,  1130,  1135,  1140,  1145,  1150,
    1155,  1160,  1165,  1170,  1175,  1180,  1185,  1190,  1197,  1201,
    1205,  1212,  1219,  1227,  1232,  1237,  1242,  1247,  1252,  1257,
    1262,  1267,  1274,  1278,  1285,  1290,  1295,  1302,  1307,  1313,
    1320,  1323,  1331,  1334,  1337,  1345,  1350,  1357,  1364,  1367,
    1373
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "STYLE", "SELECT", "UPDATE", "UPDSET",
  "INSERT", "VALUES", "DELETE", "CALC", "CREATETAB", "FROM", "WHERE",
  "GROUPBY", "HAVING", "ORDERBY", "NODUPL", "GIVING", "INTO", "SORTASC",
  "SORTDESC", "LIMIT", "OFFSET", "DMINFO", "ALL", "NAME", "FLDNAME",
  "TABNAME", "LITERAL", "STRINGLITERAL", "REGEX", "PATTERN", "AS", "IN",
  "INCONE", "BETWEEN", "EXISTS", "LIKE", "EQREGEX", "NEREGEX", "LPAREN",
  "RPAREN", "COMMA", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "COLON",
  "OPENOPEN", "OPENCLOSED", "CLOSEDOPEN", "CLOSEDCLOSED", "OPENEMPTY",
  "EMPTYOPEN", "CLOSEDEMPTY", "EMPTYCLOSED", "OR", "AND", "NE", "LE", "LT",
  "GE", "GT", "EQASS", "EQ", "MINUS", "PLUS", "MODULO", "DIVIDE", "TIMES",
  "UNARY", "NOT", "POWER", "$accept", "topcomm", "stylecoms", "stylecomm",
  "stylelist", "command", "subquery", "selcomm", "selrow", "selcol",
  "updcomm", "updrow", "updlist", "updexpr", "inscomm", "insrow",
  "insclist", "inspart", "insvlist", "delcomm", "calccomm", "cretabcomm",
  "dminfo", "groupby", "exprlist", "having", "order", "limitoff", "given",
  "into", "columns", "acolumns", "colexpr", "nmcolumns", "colspecs",
  "colspec", "tables", "tabalias", "tfnamen", "tfname", "stabname",
  "tabname", "whexpr", "orexpr", "andexpr", "relexpr", "arithexpr",
  "inxexpr", "simexpr", "simbexpr", "unit", "literal", "set", "elemlist",
  "elems", "elem", "singlerange", "range", "subscripts", "subsrange",
  "colonrange", "sortlist", "sortexpr", "reclist", "recelem", "recexpr",
  "recfield", "srecfield", "rrecfield", "recvalues", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    74,    75,    75,    76,    76,    77,    78,    78,    79,
      79,    79,    79,    79,    79,    80,    80,    81,    82,    82,
      83,    83,    83,    83,    84,    85,    85,    86,    86,    87,
      87,    88,    89,    90,    90,    90,    91,    91,    91,    92,
      92,    93,    94,    94,    95,    95,    95,    96,    96,    97,
      97,    98,    98,    99,    99,   100,   100,   100,   100,   100,
     100,   100,   100,   100,   101,   101,   101,   101,   101,   102,
     102,   102,   102,   102,   103,   103,   103,   104,   104,   104,
     105,   105,   105,   105,   106,   106,   106,   107,   107,   108,
     108,   108,   109,   109,   109,   110,   110,   111,   111,   111,
     111,   111,   112,   112,   113,   113,   114,   114,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   119,   119,   119,
     119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
     119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
     119,   120,   120,   120,   120,   120,   120,   120,   120,   120,
     120,   121,   121,   122,   122,   123,   123,   123,   123,   123,
     123,   123,   124,   124,   124,   125,   125,   126,   126,   126,
     127,   127,   128,   128,   129,   129,   130,   131,   131,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   132,   132,
     132,   132,   132,   133,   133,   134,   134,   134,   134,   134,
     134,   134,   135,   135,   136,   136,   136,   137,   137,   138,
     139,   139,   140,   140,   140,   141,   141,   142,   143,   143,
     143
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     2,     2,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     9,     9,
       1,     1,     2,     2,     2,     8,     6,     3,     1,     3,
       6,     2,     4,     0,     3,     3,     4,     4,     1,     3,
       1,     6,     5,     2,     4,     6,     6,     0,     2,     0,
       2,     3,     1,     0,     2,     0,     2,     3,     3,     3,
       4,     4,     4,     4,     0,     2,     2,     4,     4,     0,
       2,     4,     3,     4,     2,     4,     3,     0,     1,     3,
       1,     3,     4,     3,     1,     3,     4,     1,     3,     0,
       1,     3,     2,     3,     5,     1,     3,     1,     1,     2,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     1,     3,     1,     3,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     2,     3,     3,     4,     3,     4,     5,     6,     3,
       4,     1,     3,     3,     3,     3,     3,     2,     2,     2,
       3,     1,     4,     1,     2,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     1,
       1,     0,     3,     1,     1,     1,     1,     1,     5,     5,
       5,     5,     4,     4,     4,     4,     4,     4,     4,     4,
       3,     3,     3,     3,     2,     2,     2,     2,     3,     2,
       1,     2,     1,     1,     1,     3,     5,     2,     4,     2,
       4,     3,     3,     1,     1,     2,     2,     1,     3,     3,
       3,     1,     1,     1,     5,     3,     5,     5,     3,     1,
       0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,     0,    77,     0,     0,     0,     0,     0,     0,     0,
       5,     2,     9,    10,    11,    12,    13,    14,     8,     6,
      77,     0,   158,   159,   165,   166,     0,     0,     0,     0,
       0,    21,     0,   169,    17,     0,    20,    78,    84,   113,
     115,   117,   141,   151,   153,   160,   161,    97,   107,   106,
     108,     0,     0,   104,    24,     0,    95,     0,    98,   105,
       0,    31,     0,     0,     0,    43,   109,   110,    89,     1,
       4,     3,     0,    23,    80,   171,    22,   171,   131,     0,
       0,     0,     0,     0,     0,   174,   117,     0,   173,   175,
     177,     0,   174,     0,     0,   147,   148,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   162,   163,   164,
     154,     0,     0,     0,    99,     0,    33,   111,     0,     0,
      89,    89,    47,    90,     7,     0,     0,   170,     0,     0,
       0,     0,     0,   209,   194,   195,     0,     0,    15,   155,
     207,     0,     0,     0,     0,   196,   197,   168,     0,    16,
     167,   132,   111,     0,    74,     0,    79,    85,   114,   116,
     133,   135,   176,   139,     0,   129,   125,   127,   126,   128,
     124,   123,   122,   121,   120,   119,   118,   143,   142,   146,
     145,   144,     0,     0,     0,     0,   150,   200,   203,     0,
     202,   204,   103,   101,   102,     0,   111,    28,    96,   100,
       0,     0,     0,     0,    55,     0,    92,     0,     0,     0,
       0,    44,    81,   157,    83,   156,     0,     0,   211,     0,
       0,     0,     0,   205,   190,   191,   192,   193,   172,    49,
      76,     0,   111,    86,     0,   134,   136,   140,     0,   130,
     201,   199,   152,     0,     0,     0,     0,    55,    87,     0,
       0,     0,    38,    32,   112,     0,    64,    42,     0,     0,
      93,    47,    47,     0,    48,   217,    91,    82,   184,   182,
     188,   189,     0,   210,   185,   183,   186,   187,     0,   208,
       0,     0,    53,    75,    49,   137,     0,   198,     0,    29,
     111,    27,    64,    35,     0,    34,     0,     0,     0,     0,
       0,   214,    56,   213,     0,     0,    41,     0,     0,     0,
     221,   222,   223,    45,    46,     0,     0,   181,   180,   179,
     178,   206,    50,    52,     0,    55,    53,   138,     0,    55,
      26,    88,     0,    40,     0,     0,     0,    59,     0,    57,
       0,    58,   215,   216,     0,    65,    66,   230,   225,     0,
       0,    94,   219,   218,     0,    54,    64,    55,     0,    64,
      37,     0,    36,    60,    61,    62,    63,   212,     0,     0,
     229,     0,   230,   220,    51,    69,    64,    30,    25,    39,
      67,    68,     0,   226,     0,     0,     0,    18,    19,   228,
     224,   227,     0,     0,    70,    72,     0,     0,    73,    71
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     8,     9,    10,    19,    11,    33,    12,    34,    35,
      13,    54,   216,   217,    14,    61,   222,   273,   352,    15,
      16,    17,   231,   302,   342,   345,   276,   326,   407,   101,
      36,    76,    37,   269,   142,   143,    55,    56,    57,    58,
      59,    68,   224,   321,    39,    40,    41,    42,    43,    44,
     130,    45,    46,   146,   147,    88,   181,    89,   209,   210,
      90,   322,   323,   284,   285,   329,   330,   331,   332,   391
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -308
static const yytype_int16 yypact[] =
{
     831,    14,   364,   388,    46,   119,   153,   251,   135,   831,
    -308,  -308,  -308,  -308,  -308,  -308,  -308,  -308,  -308,   117,
     162,     3,   123,  -308,  -308,  -308,   154,   228,   228,   678,
     678,  -308,   571,  -308,  -308,    42,   133,  -308,    15,   126,
    -308,   743,  -308,   149,   200,  -308,  -308,    78,  -308,  -308,
    -308,   231,   231,  -308,  -308,     8,  -308,    76,   114,  -308,
     388,  -308,   388,   388,   163,   194,  -308,  -308,   110,  -308,
    -308,  -308,   237,   133,   223,   308,   224,   308,  -308,   591,
     598,   678,   678,   625,   238,    50,   703,    56,  -308,  -308,
    -308,   240,   194,   172,   678,   233,   233,   154,   233,   388,
     260,   285,   162,   283,   162,   162,   482,   678,   678,   678,
     210,   286,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   312,   678,   515,  -308,  -308,  -308,
    -308,   475,   295,   388,  -308,   301,   112,    10,    28,   305,
     318,   318,     9,  -308,  -308,   325,   311,   320,   162,   313,
     678,    75,   678,   235,   718,   718,   678,   170,  -308,  -308,
     646,   678,   678,   678,   678,  -308,  -308,  -308,   308,  -308,
    -308,  -308,    10,   344,   328,   388,  -308,   347,   126,  -308,
     777,  -308,  -308,   718,   798,   718,  -308,  -308,  -308,  -308,
     718,   718,   718,   718,   718,   718,   718,   104,   104,   233,
     233,   233,   482,   678,   678,   678,   233,   654,   329,   173,
    -308,  -308,  -308,  -308,  -308,   -17,    33,  -308,  -308,  -308,
     352,   352,    66,   162,   376,   162,    23,   217,   188,   359,
     318,  -308,   378,  -308,  -308,  -308,   420,   539,   718,   678,
     662,   547,   678,   785,   718,   718,   718,   718,  -308,   392,
    -308,   381,    10,  -308,   678,   777,  -308,   718,   811,   718,
    -308,   654,  -308,   515,   162,   388,   295,   376,  -308,   249,
     202,   161,  -308,  -308,   194,   299,   335,   194,   345,   384,
    -308,   393,   393,   384,   369,  -308,  -308,  -308,  -308,  -308,
    -308,  -308,   727,   718,  -308,  -308,  -308,  -308,   751,   718,
     678,   162,   404,  -308,   392,   718,   678,  -308,   207,   194,
      10,  -308,   335,  -308,   398,  -308,   162,   162,   455,   396,
     428,    36,   385,  -308,   162,   162,  -308,   156,   363,   221,
    -308,  -308,  -308,  -308,  -308,   230,   359,  -308,  -308,  -308,
    -308,   718,   395,   194,   162,   376,   404,   718,   371,   376,
    -308,  -308,   317,   194,   253,   162,   162,   385,   162,   385,
     162,   385,  -308,  -308,   162,    -7,     2,   338,  -308,   178,
     384,  -308,  -308,  -308,   162,   194,   335,   376,   162,   335,
    -308,   162,  -308,   385,   385,   385,   385,  -308,   162,   162,
    -308,   267,   132,  -308,   194,   421,   335,   194,  -308,   194,
     194,   194,   338,  -308,   402,   287,   416,  -308,  -308,  -308,
    -308,  -308,   415,   308,   417,  -308,   296,   422,  -308,  -308
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -308,  -308,  -308,   442,  -308,   443,     6,   -21,  -308,  -308,
    -308,  -308,  -308,   190,  -308,  -308,  -308,  -308,   142,  -308,
    -308,  -308,   101,   157,  -308,   118,  -239,  -299,  -308,  -308,
     446,  -308,   -85,   250,   244,   243,   -41,   337,   343,   346,
      -6,   -95,  -161,    -2,   374,   386,     7,  -308,  -308,  -308,
    -308,  -307,  -308,   427,   -25,   330,   277,   -94,   234,  -197,
    -111,  -277,   146,  -308,   177,  -275,   136,   288,  -308,  -308
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -104
static const yytype_int16 yytable[] =
{
      38,    67,    87,    93,    65,   174,    84,    91,   335,    53,
     260,   249,   182,   350,   132,   211,   388,   176,    38,   136,
     368,   137,   138,   223,   389,    85,    92,   263,   312,    74,
      84,    91,    78,   229,    86,    86,    95,    96,   225,    98,
      18,   357,   359,   361,    75,   265,   223,   264,   103,   278,
     104,   133,   230,   133,    99,   267,   362,   363,   172,   104,
     390,   100,   368,   234,   307,    60,    53,   279,    53,    53,
       2,   133,   104,    92,   271,    92,   266,   395,   383,   384,
     398,   385,    86,   386,    86,   390,   151,   153,   154,   155,
     157,   304,   159,   104,    67,   409,   211,   408,   167,   168,
      38,    98,   134,   171,  -103,    53,   376,   104,   182,   135,
     379,  -103,   131,   180,   183,   184,   185,   405,   237,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    62,   206,   208,   252,    69,   139,    53,   396,    53,
    -102,   119,   120,   121,   122,   123,    38,  -102,   125,   349,
     211,   140,   211,   220,   141,   133,   221,   236,   328,   238,
      72,    24,    25,   240,    77,    63,    92,   243,   244,   245,
     246,   247,   121,   122,   123,    86,   102,   125,    64,    22,
      23,    53,    24,    25,   105,    24,    25,    64,    22,    23,
      26,    24,    25,   126,    27,    51,   404,    28,    52,    26,
     367,   272,   316,    27,    75,   317,    28,    24,    25,   255,
     257,   258,   259,   241,   208,   168,   261,   170,   262,    29,
      30,   274,   392,   277,   310,    32,   127,   128,    29,    30,
     129,   230,     2,   282,    32,     2,   119,   120,   121,   122,
     123,   186,   187,   125,   292,   314,   293,   315,   298,   299,
     261,   104,   348,    64,    22,    23,   145,    24,    25,   281,
     230,   305,   309,   144,   370,    26,   371,   148,   208,    27,
     208,    53,    28,   370,    79,   372,    80,    66,    48,    49,
     158,    50,    81,   239,    82,   169,    66,    48,    49,    83,
      50,   313,   314,   173,    29,    30,   381,   175,   382,   343,
      32,   119,   120,   121,   122,   123,   125,   341,   125,   177,
     402,   414,   403,   347,   353,   353,   318,   188,   189,   319,
     320,   215,   365,   366,    64,    22,    23,   219,    24,    25,
     370,   226,   411,    64,    22,    23,    26,    24,    25,   168,
      27,   418,   375,    28,   139,    26,   202,   203,   204,    27,
     205,   232,    28,   233,    79,   235,    80,   324,   325,   380,
     381,   251,    81,   168,    82,    29,    30,    24,    25,    83,
     250,    32,   394,   253,    29,    30,   397,   160,   268,   399,
      32,    20,   333,   334,   227,   228,   400,   401,   416,    21,
      22,    23,   275,    24,    25,   119,   120,   121,   122,   123,
      67,    26,   125,   283,   287,    27,   301,   303,    28,   327,
     328,    92,   336,   358,    47,    48,    49,   229,    50,   344,
      86,    64,    22,    23,   351,    24,    25,   369,   364,    51,
      29,    30,    52,    26,    31,   378,    32,    27,   374,   406,
      28,   415,    66,    48,    49,   360,    50,   410,   419,   412,
     417,    70,    71,    64,    22,    23,   311,    24,    25,   354,
     413,   346,    29,    30,   377,    26,    73,   288,    32,    27,
     218,   270,    28,   286,   213,   355,   356,   214,   178,   256,
      64,    22,    23,   289,    24,    25,   119,   120,   121,   122,
     123,   179,    26,   125,    29,    30,    27,   308,   248,    28,
      32,   212,    48,    49,   149,    50,   393,    64,    22,    23,
     387,    24,    25,   373,   280,     0,    51,     0,     0,    52,
       0,    29,    30,    27,     0,     0,    28,    32,    79,     0,
      80,     0,     0,     0,     0,     0,    81,     0,    82,     0,
      64,    22,    23,    83,    24,    25,     0,     0,    29,    30,
       0,     0,     0,     0,    94,     0,    27,     0,   207,    28,
       0,     0,     0,    80,    64,    22,    23,     0,    24,    25,
       0,     0,    64,    22,    23,     0,    24,    25,     0,     0,
      27,    29,    30,    28,     0,     0,   290,    94,    27,     0,
       0,    28,     0,     0,   296,     0,    64,    22,    23,     0,
      24,    25,   291,     0,     0,    29,    30,     0,    97,     0,
     297,    94,    27,    29,    30,    28,    64,    22,    23,    94,
      24,    25,     0,    64,    22,    23,     0,    24,    25,     0,
       0,     0,    27,     0,   150,    28,     0,    29,    30,    27,
       0,     0,    28,    94,     0,     0,   152,     0,     0,     0,
      64,    22,    23,     0,    24,    25,     0,    29,    30,     0,
       0,     0,     0,    94,    29,    30,    27,     0,   156,    28,
      94,    64,    22,    23,     0,    24,    25,     0,     0,    64,
      22,    23,     0,    24,    25,     0,     0,    27,     0,     0,
      28,    29,    30,     0,   242,    27,     0,    94,    28,     0,
       0,     0,    80,    64,    22,    23,     0,    24,    25,   294,
       0,     0,    29,    30,     0,     0,     0,     0,    94,    27,
      29,    30,    28,     0,     0,   295,    94,     0,   119,   120,
     121,   122,   123,     0,     0,   125,     0,   106,   107,   108,
       0,   109,   110,   111,    29,    30,     0,     0,     0,     0,
      94,   160,   161,   162,   163,   164,   165,     0,   166,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   337,   124,   125,   106,   107,   108,
       0,   109,   110,   111,   119,   120,   121,   122,   123,     0,
     338,   125,     0,   119,   120,   121,   122,   123,   339,     0,
     125,     0,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   340,   124,   125,   119,   120,   121,
     122,   123,     0,     0,   125,   160,   161,   162,   163,   164,
     165,     0,   166,   300,     1,     2,     3,     0,     4,     0,
       5,     6,     7,   119,   120,   121,   122,   123,     0,     0,
     125,   119,   120,   121,   122,   123,   254,     0,   125,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   306,
       0,   125,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,     0,     0,   125
};

static const yytype_int16 yycheck[] =
{
       2,     7,    27,    28,     6,   100,    27,    28,   283,     3,
     207,   172,   106,   312,     6,   126,    23,   102,    20,    60,
     327,    62,    63,    13,    22,    27,    28,    44,   267,    26,
      51,    52,    26,    24,    27,    28,    29,    30,    10,    32,
      26,   318,   319,   320,    41,    12,    13,    64,    33,    26,
      57,    43,    43,    43,    12,   216,    20,    21,    99,    57,
     367,    19,   369,   148,   261,    19,    60,    44,    62,    63,
       4,    43,    57,    75,     8,    77,    43,   376,   355,   356,
     379,   358,    75,   360,    77,   392,    79,    80,    81,    82,
      83,   252,    42,    57,   100,   402,   207,   396,    42,    43,
     102,    94,    26,    97,    26,    99,   345,    57,   202,    33,
     349,    33,    34,   106,   107,   108,   109,   392,    43,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,    12,   125,   126,   175,     0,    26,   131,   377,   133,
      26,    66,    67,    68,    69,    70,   148,    33,    73,   310,
     261,    41,   263,    41,    44,    43,    44,   150,    26,   152,
      43,    29,    30,   156,    41,    12,   168,   160,   161,   162,
     163,   164,    68,    69,    70,   168,    43,    73,    25,    26,
      27,   175,    29,    30,    58,    29,    30,    25,    26,    27,
      37,    29,    30,    44,    41,    41,    64,    44,    44,    37,
      44,   222,    41,    41,    41,    44,    44,    29,    30,   202,
     203,   204,   205,    43,   207,    43,    43,    45,    45,    66,
      67,   223,    44,   225,   265,    72,    26,    27,    66,    67,
      30,    43,     4,    45,    72,     4,    66,    67,    68,    69,
      70,    31,    32,    73,   237,    43,   239,    45,   241,   242,
      43,    57,    45,    25,    26,    27,    33,    29,    30,    42,
      43,   254,   264,    26,    43,    37,    45,    43,   261,    41,
     263,   265,    44,    43,    46,    45,    48,    26,    27,    28,
      42,    30,    54,    48,    56,    45,    26,    27,    28,    61,
      30,    42,    43,    33,    66,    67,    43,    12,    45,   301,
      72,    66,    67,    68,    69,    70,    73,   300,    73,    26,
      43,   406,    45,   306,   316,   317,    17,    31,    32,    20,
      21,    26,   324,   325,    25,    26,    27,    26,    29,    30,
      43,    26,    45,    25,    26,    27,    37,    29,    30,    43,
      41,    45,   344,    44,    26,    37,    34,    35,    36,    41,
      38,    26,    44,    42,    46,    42,    48,    22,    23,    42,
      43,    33,    54,    43,    56,    66,    67,    29,    30,    61,
      26,    72,   374,    26,    66,    67,   378,    48,    26,   381,
      72,    17,   281,   282,   140,   141,   388,   389,   413,    25,
      26,    27,    16,    29,    30,    66,    67,    68,    69,    70,
     406,    37,    73,    44,    26,    41,    14,    26,    44,    64,
      26,   413,    43,    17,    26,    27,    28,    24,    30,    15,
     413,    25,    26,    27,    26,    29,    30,    64,    43,    41,
      66,    67,    44,    37,    70,    64,    72,    41,    43,    18,
      44,    26,    26,    27,    28,    17,    30,    45,    26,    33,
      33,     9,     9,    25,    26,    27,   266,    29,    30,   317,
      44,   304,    66,    67,   346,    37,    20,    47,    72,    41,
     133,   221,    44,   230,   131,    20,    21,   131,   104,   202,
      25,    26,    27,    63,    29,    30,    66,    67,    68,    69,
      70,   105,    37,    73,    66,    67,    41,   263,   168,    44,
      72,    26,    27,    28,    77,    30,   370,    25,    26,    27,
     364,    29,    30,   336,   226,    -1,    41,    -1,    -1,    44,
      -1,    66,    67,    41,    -1,    -1,    44,    72,    46,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    -1,
      25,    26,    27,    61,    29,    30,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    72,    -1,    41,    -1,    43,    44,
      -1,    -1,    -1,    48,    25,    26,    27,    -1,    29,    30,
      -1,    -1,    25,    26,    27,    -1,    29,    30,    -1,    -1,
      41,    66,    67,    44,    -1,    -1,    47,    72,    41,    -1,
      -1,    44,    -1,    -1,    47,    -1,    25,    26,    27,    -1,
      29,    30,    63,    -1,    -1,    66,    67,    -1,    37,    -1,
      63,    72,    41,    66,    67,    44,    25,    26,    27,    72,
      29,    30,    -1,    25,    26,    27,    -1,    29,    30,    -1,
      -1,    -1,    41,    -1,    43,    44,    -1,    66,    67,    41,
      -1,    -1,    44,    72,    -1,    -1,    48,    -1,    -1,    -1,
      25,    26,    27,    -1,    29,    30,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    66,    67,    41,    -1,    43,    44,
      72,    25,    26,    27,    -1,    29,    30,    -1,    -1,    25,
      26,    27,    -1,    29,    30,    -1,    -1,    41,    -1,    -1,
      44,    66,    67,    -1,    48,    41,    -1,    72,    44,    -1,
      -1,    -1,    48,    25,    26,    27,    -1,    29,    30,    47,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    72,    41,
      66,    67,    44,    -1,    -1,    63,    72,    -1,    66,    67,
      68,    69,    70,    -1,    -1,    73,    -1,    34,    35,    36,
      -1,    38,    39,    40,    66,    67,    -1,    -1,    -1,    -1,
      72,    48,    49,    50,    51,    52,    53,    -1,    55,    -1,
      -1,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    47,    72,    73,    34,    35,    36,
      -1,    38,    39,    40,    66,    67,    68,    69,    70,    -1,
      63,    73,    -1,    66,    67,    68,    69,    70,    47,    -1,
      73,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    63,    72,    73,    66,    67,    68,
      69,    70,    -1,    -1,    73,    48,    49,    50,    51,    52,
      53,    -1,    55,    48,     3,     4,     5,    -1,     7,    -1,
       9,    10,    11,    66,    67,    68,    69,    70,    -1,    -1,
      73,    66,    67,    68,    69,    70,    58,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,    58,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    -1,    -1,    73
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     3,     4,     5,     7,     9,    10,    11,    75,    76,
      77,    79,    81,    84,    88,    93,    94,    95,    26,    78,
      17,    25,    26,    27,    29,    30,    37,    41,    44,    66,
      67,    70,    72,    80,    82,    83,   104,   106,   117,   118,
     119,   120,   121,   122,   123,   125,   126,    26,    27,    28,
      30,    41,    44,    80,    85,   110,   111,   112,   113,   114,
      19,    89,    12,    12,    25,   117,    26,   114,   115,     0,
      77,    79,    43,   104,    26,    41,   105,    41,    80,    46,
      48,    54,    56,    61,    81,   117,   120,   128,   129,   131,
     134,    81,   117,   128,    72,   120,   120,    37,   120,    12,
      19,   103,    43,    33,    57,    58,    34,    35,    36,    38,
      39,    40,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    72,    73,    44,    26,    27,    30,
     124,    34,     6,    43,    26,    33,   110,   110,   110,    26,
      41,    44,   108,   109,    26,    33,   127,   128,    43,   127,
      43,   120,    48,   120,   120,   120,    43,   120,    42,    42,
      48,    49,    50,    51,    52,    53,    55,    42,    43,    45,
      45,    80,   110,    33,   115,    12,   106,    26,   118,   119,
     120,   130,   131,   120,   120,   120,    31,    32,    31,    32,
     120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
     120,   120,    34,    35,    36,    38,   120,    43,   120,   132,
     133,   134,    26,   112,   113,    26,    86,    87,   111,    26,
      41,    44,    90,    13,   116,    10,    26,   108,   108,    24,
      43,    96,    26,    42,   106,    42,   120,    43,   120,    48,
     120,    43,    48,   120,   120,   120,   120,   120,   129,   116,
      26,    33,   110,    26,    58,   120,   130,   120,   120,   120,
     133,    43,    45,    44,    64,    12,    43,   116,    26,   107,
     107,     8,    81,    91,   117,    16,   100,   117,    26,    44,
     141,    42,    45,    44,   137,   138,   109,    26,    47,    63,
      47,    63,   120,   120,    47,    63,    47,    63,   120,   120,
      48,    14,    97,    26,   116,   120,    58,   133,   132,   117,
     110,    87,   100,    42,    43,    45,    41,    44,    17,    20,
      21,   117,   135,   136,    22,    23,   101,    64,    26,   139,
     140,   141,   142,    96,    96,   139,    43,    47,    63,    47,
      63,   120,    98,   117,    15,    99,    97,   120,    45,   116,
     101,    26,    92,   117,    92,    20,    21,   135,    17,   135,
      17,   135,    20,    21,    43,   117,   117,    44,   125,    64,
      43,    45,    45,   138,    43,   117,   100,    99,    64,   100,
      42,    43,    45,   135,   135,   135,   135,   136,    23,    22,
     125,   143,    44,   140,   117,   101,   100,   117,   101,   117,
     117,   117,    43,    45,    64,   139,    18,   102,   101,   125,
      45,    45,    33,    44,   115,    26,   128,    33,    45,    26
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 7:
#line 203 "TableGram.y"
    { TaQLNode::theirStyle.set ((yyvsp[(3) - (3)].val)->getString()); ;}
    break;

  case 8:
#line 205 "TableGram.y"
    { TaQLNode::theirStyle.set ((yyvsp[(1) - (1)].val)->getString()); ;}
    break;

  case 9:
#line 209 "TableGram.y"
    { TaQLNode::theirNode = *(yyvsp[(1) - (1)].nodeselect); ;}
    break;

  case 10:
#line 211 "TableGram.y"
    { TaQLNode::theirNode = *(yyvsp[(1) - (1)].node); ;}
    break;

  case 11:
#line 213 "TableGram.y"
    { TaQLNode::theirNode = *(yyvsp[(1) - (1)].node); ;}
    break;

  case 12:
#line 215 "TableGram.y"
    { TaQLNode::theirNode = *(yyvsp[(1) - (1)].node); ;}
    break;

  case 13:
#line 217 "TableGram.y"
    { TaQLNode::theirNode = *(yyvsp[(1) - (1)].node); ;}
    break;

  case 14:
#line 219 "TableGram.y"
    { TaQLNode::theirNode = *(yyvsp[(1) - (1)].node); ;}
    break;

  case 15:
#line 222 "TableGram.y"
    {
               (yyval.nodeselect) = (yyvsp[(2) - (3)].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   ;}
    break;

  case 16:
#line 226 "TableGram.y"
    {
               (yyval.nodeselect) = (yyvsp[(2) - (3)].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   ;}
    break;

  case 17:
#line 232 "TableGram.y"
    {
               (yyval.nodeselect) = (yyvsp[(2) - (2)].nodeselect);
           ;}
    break;

  case 18:
#line 237 "TableGram.y"
    {
               (yyval.nodeselect) = new TaQLSelectNode(
                    new TaQLSelectNodeRep (*(yyvsp[(1) - (9)].node), *(yyvsp[(3) - (9)].nodelist), 0, *(yyvsp[(4) - (9)].node), *(yyvsp[(5) - (9)].node), *(yyvsp[(6) - (9)].node),
					   *(yyvsp[(7) - (9)].node), *(yyvsp[(8) - (9)].node), *(yyvsp[(9) - (9)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           ;}
    break;

  case 19:
#line 243 "TableGram.y"
    {
               (yyval.nodeselect) = new TaQLSelectNode(
		    new TaQLSelectNodeRep (*(yyvsp[(1) - (9)].node), *(yyvsp[(4) - (9)].nodelist), 0, *(yyvsp[(5) - (9)].node), *(yyvsp[(6) - (9)].node), *(yyvsp[(7) - (9)].node),
					   *(yyvsp[(8) - (9)].node), *(yyvsp[(9) - (9)].node), *(yyvsp[(2) - (9)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           ;}
    break;

  case 20:
#line 251 "TableGram.y"
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *(yyvsp[(1) - (1)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 21:
#line 256 "TableGram.y"
    {          /* SELECT * FROM ... */
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 22:
#line 261 "TableGram.y"
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *(yyvsp[(2) - (2)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 23:
#line 266 "TableGram.y"
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (True, *(yyvsp[(2) - (2)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 24:
#line 273 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(2) - (2)].node);
           ;}
    break;

  case 25:
#line 278 "TableGram.y"
    {
               (yyval.node) = new TaQLNode(
                    new TaQLUpdateNodeRep (*(yyvsp[(1) - (8)].nodelist), *(yyvsp[(3) - (8)].nodelist), *(yyvsp[(5) - (8)].nodelist), *(yyvsp[(6) - (8)].node), *(yyvsp[(7) - (8)].node), *(yyvsp[(8) - (8)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 26:
#line 283 "TableGram.y"
    {
               (yyval.node) = new TaQLNode(
		    new TaQLUpdateNodeRep (*(yyvsp[(1) - (6)].nodelist), *(yyvsp[(3) - (6)].nodelist), 0, *(yyvsp[(4) - (6)].node), *(yyvsp[(5) - (6)].node), *(yyvsp[(6) - (6)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 27:
#line 290 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
           ;}
    break;

  case 28:
#line 294 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
           ;}
    break;

  case 29:
#line 301 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[(1) - (3)].val)->getString(), 0, *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 30:
#line 306 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[(1) - (6)].val)->getString(), *(yyvsp[(3) - (6)].nodelist), *(yyvsp[(6) - (6)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 31:
#line 313 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(2) - (2)].node);
           ;}
    break;

  case 32:
#line 318 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[(2) - (4)].nodelist), *(yyvsp[(3) - (4)].nodelist), *(yyvsp[(4) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 33:
#line 325 "TableGram.y"
    {         /* no column-list */   
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           ;}
    break;

  case 34:
#line 329 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(2) - (3)].nodelist);
           ;}
    break;

  case 35:
#line 332 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(2) - (3)].nodelist);
           ;}
    break;

  case 36:
#line 337 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(3) - (4)].nodelist);
           ;}
    break;

  case 37:
#line 340 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(3) - (4)].nodelist);
           ;}
    break;

  case 38:
#line 343 "TableGram.y"
    {
	       (yyvsp[(1) - (1)].nodeselect)->setNoExecute();
               (yyval.node) = (yyvsp[(1) - (1)].nodeselect);
	   ;}
    break;

  case 39:
#line 349 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
           ;}
    break;

  case 40:
#line 353 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("VALUES [", "]");
	       (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
           ;}
    break;

  case 41:
#line 361 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLDeleteNodeRep (*(yyvsp[(3) - (6)].nodelist), *(yyvsp[(4) - (6)].node), *(yyvsp[(5) - (6)].node), *(yyvsp[(6) - (6)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 42:
#line 368 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCalcNodeRep (*(yyvsp[(3) - (5)].nodelist), *(yyvsp[(5) - (5)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 43:
#line 373 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCalcNodeRep (0, *(yyvsp[(2) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 44:
#line 380 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCreTabNodeRep ((yyvsp[(2) - (4)].nodename)->getString(), *(yyvsp[(3) - (4)].nodelist), *(yyvsp[(4) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 45:
#line 385 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCreTabNodeRep ((yyvsp[(2) - (6)].nodename)->getString(), *(yyvsp[(4) - (6)].nodelist), *(yyvsp[(6) - (6)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 46:
#line 390 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCreTabNodeRep ((yyvsp[(2) - (6)].nodename)->getString(), *(yyvsp[(4) - (6)].nodelist), *(yyvsp[(6) - (6)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 47:
#line 397 "TableGram.y"
    {      /* no datamans */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           ;}
    break;

  case 48:
#line 401 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(2) - (2)].nodelist);
           ;}
    break;

  case 49:
#line 406 "TableGram.y"
    {          /* no groupby */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 50:
#line 410 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(2) - (2)].nodelist);
	   ;}
    break;

  case 51:
#line 415 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
           ;}
    break;

  case 52:
#line 419 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
           ;}
    break;

  case 53:
#line 426 "TableGram.y"
    {          /* no having */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 54:
#line 430 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(2) - (2)].node);
	   ;}
    break;

  case 55:
#line 435 "TableGram.y"
    {          /* no sort */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 56:
#line 439 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *(yyvsp[(2) - (2)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 57:
#line 444 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *(yyvsp[(3) - (3)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 58:
#line 449 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Descending, *(yyvsp[(3) - (3)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 59:
#line 454 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[(3) - (3)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 60:
#line 459 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[(4) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 61:
#line 464 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *(yyvsp[(4) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 62:
#line 469 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[(4) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 63:
#line 474 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *(yyvsp[(4) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 64:
#line 481 "TableGram.y"
    {         /* no limit,offset */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 65:
#line 485 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[(2) - (2)].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 66:
#line 490 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (0, *(yyvsp[(2) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 67:
#line 495 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[(2) - (4)].node), *(yyvsp[(4) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 68:
#line 500 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[(4) - (4)].node), *(yyvsp[(2) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 69:
#line 507 "TableGram.y"
    {          /* no result */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 70:
#line 511 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[(2) - (2)].nodename)->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 71:
#line 516 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[(2) - (4)].nodename)->getString(), (yyvsp[(4) - (4)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 72:
#line 521 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ("", (yyvsp[(3) - (3)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 73:
#line 526 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep (*(yyvsp[(3) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 74:
#line 533 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[(2) - (2)].nodename)->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 75:
#line 538 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[(2) - (4)].nodename)->getString(), (yyvsp[(4) - (4)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 76:
#line 543 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ("", (yyvsp[(3) - (3)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 77:
#line 550 "TableGram.y"
    {          /* no column names given (thus take all) */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           ;}
    break;

  case 78:
#line 554 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 79:
#line 559 "TableGram.y"
    {
	       (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 80:
#line 570 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               TaQLNode p (new TaQLKeyColNodeRep ((yyvsp[(1) - (1)].val)->getString()));
               (yyval.nodelist)->add (new TaQLColNodeRep (p, "", ""));
	   ;}
    break;

  case 81:
#line 576 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               TaQLNode p (new TaQLKeyColNodeRep ((yyvsp[(1) - (3)].val)->getString()));
               (yyval.nodelist)->add (new TaQLColNodeRep (p, (yyvsp[(3) - (3)].val)->getString(), ""));
	   ;}
    break;

  case 82:
#line 582 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               TaQLNode p (new TaQLKeyColNodeRep ((yyvsp[(1) - (4)].val)->getString()));
               (yyval.nodelist)->add (new TaQLColNodeRep (p, (yyvsp[(3) - (4)].val)->getString(), (yyvsp[(4) - (4)].val)->getString()));
	   ;}
    break;

  case 83:
#line 588 "TableGram.y"
    {
	       (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 84:
#line 594 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLColNodeRep (*(yyvsp[(1) - (1)].node), "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 85:
#line 599 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLColNodeRep (*(yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].val)->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 86:
#line 604 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLColNodeRep (*(yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].val)->getString(), (yyvsp[(4) - (4)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 87:
#line 611 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[(1) - (1)].val)->getString()));
	   ;}
    break;

  case 88:
#line 616 "TableGram.y"
    {
	       (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[(3) - (3)].val)->getString()));
	   ;}
    break;

  case 89:
#line 622 "TableGram.y"
    {          /* no column specifications given */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           ;}
    break;

  case 90:
#line 626 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 91:
#line 631 "TableGram.y"
    {
	       (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 92:
#line 637 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
		    new TaQLColSpecNodeRep((yyvsp[(1) - (2)].val)->getString(), (yyvsp[(2) - (2)].val)->getString(),
		                           TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 93:
#line 643 "TableGram.y"
    {	
               TaQLMultiNode re(False);
	       re.add (*(yyvsp[(3) - (3)].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[(1) - (3)].val)->getString(), (yyvsp[(2) - (3)].val)->getString(),
		                           re));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 94:
#line 651 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[(1) - (5)].val)->getString(), (yyvsp[(2) - (5)].val)->getString(),
		                           *(yyvsp[(4) - (5)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 95:
#line 659 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 96:
#line 664 "TableGram.y"
    {
	       (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 97:
#line 675 "TableGram.y"
    {                          /* table name is also alias */
	       (yyvsp[(1) - (1)].val)->setIsTableName();
	       (yyval.node) = new TaQLNode(
                    new TaQLTableNodeRep(*(yyvsp[(1) - (1)].val), (yyvsp[(1) - (1)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 98:
#line 681 "TableGram.y"
    {                        /* no alias */
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[(1) - (1)].node), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 99:
#line 686 "TableGram.y"
    {
	       (yyvsp[(2) - (2)].val)->setIsTableName();
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 100:
#line 692 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 101:
#line 697 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 102:
#line 704 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 103:
#line 707 "TableGram.y"
    {
	       (yyvsp[(1) - (1)].val)->setIsTableName();
               (yyval.node) = (yyvsp[(1) - (1)].val);
           ;}
    break;

  case 104:
#line 713 "TableGram.y"
    {
	       theFromQueryDone = True;
	       (yyvsp[(1) - (1)].nodeselect)->setFromExecute();
               (yyval.node) = (yyvsp[(1) - (1)].nodeselect);
           ;}
    break;

  case 105:
#line 718 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(1) - (1)].nodename);
           ;}
    break;

  case 106:
#line 723 "TableGram.y"
    {
	       (yyvsp[(1) - (1)].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[(1) - (1)].val);
           ;}
    break;

  case 107:
#line 727 "TableGram.y"
    {
	       (yyvsp[(1) - (1)].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[(1) - (1)].val);
           ;}
    break;

  case 108:
#line 731 "TableGram.y"
    {
	       (yyvsp[(1) - (1)].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[(1) - (1)].val);
           ;}
    break;

  case 109:
#line 737 "TableGram.y"
    {
	       (yyvsp[(1) - (1)].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[(1) - (1)].val);
           ;}
    break;

  case 110:
#line 741 "TableGram.y"
    {
               (yyval.nodename) = (yyvsp[(1) - (1)].nodename);
           ;}
    break;

  case 111:
#line 746 "TableGram.y"
    {                   /* no selection */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 112:
#line 750 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(2) - (2)].node);
	   ;}
    break;

  case 113:
#line 755 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 114:
#line 758 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_OR, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 115:
#line 765 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 116:
#line 768 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_AND, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 117:
#line 775 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 118:
#line 778 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 119:
#line 783 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 120:
#line 788 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GT, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 121:
#line 793 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GE, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 122:
#line 798 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LT, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 123:
#line 803 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LE, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 124:
#line 808 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 125:
#line 813 "TableGram.y"
    {
	       TaQLMultiNode re(False);
               re.add (*(yyvsp[(3) - (3)].val));
               TaQLNode ref (new TaQLFuncNodeRep("REGEX", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[(1) - (3)].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 126:
#line 821 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[(3) - (3)].val));
               TaQLNode ref (new TaQLFuncNodeRep("REGEX", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[(1) - (3)].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 127:
#line 829 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[(3) - (3)].val));
               TaQLNode ref (new TaQLFuncNodeRep("PATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[(1) - (3)].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 128:
#line 837 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[(3) - (3)].val));
               TaQLNode ref (new TaQLFuncNodeRep("PATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[(1) - (3)].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 129:
#line 845 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[(3) - (3)].node));
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[(1) - (3)].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 130:
#line 853 "TableGram.y"
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[(4) - (4)].node));
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[(1) - (4)].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 131:
#line 861 "TableGram.y"
    {
	       (yyvsp[(2) - (2)].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_EXISTS, *(yyvsp[(2) - (2)].nodeselect)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	    ;}
    break;

  case 132:
#line 867 "TableGram.y"
    {
	       (yyvsp[(3) - (3)].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOTEXISTS, *(yyvsp[(3) - (3)].nodeselect)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 133:
#line 873 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 134:
#line 878 "TableGram.y"
    {
	       TaQLNode p(
                    new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[(1) - (4)].node), *(yyvsp[(4) - (4)].node)));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 135:
#line 885 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 136:
#line 890 "TableGram.y"
    {
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[(1) - (4)].node), *(yyvsp[(4) - (4)].nodelist)));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 137:
#line 896 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *(yyvsp[(3) - (5)].node), *(yyvsp[(5) - (5)].node), True));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[(1) - (5)].node), pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 138:
#line 903 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *(yyvsp[(4) - (6)].node), *(yyvsp[(6) - (6)].node), True));
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[(1) - (6)].node), pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 139:
#line 911 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (*(yyvsp[(1) - (3)].node));
	       pr.add (*(yyvsp[(3) - (3)].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("anyCone", pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 140:
#line 919 "TableGram.y"
    {
	       TaQLMultiNode pr(False);
	       pr.add (*(yyvsp[(1) - (4)].node));
	       pr.add (*(yyvsp[(4) - (4)].node));
               TaQLNode p (new TaQLFuncNodeRep ("anyCone", pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 141:
#line 930 "TableGram.y"
    {
	       (yyval.node)= (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 142:
#line 933 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_PLUS, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 143:
#line 938 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MINUS, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 144:
#line 943 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_TIMES, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 145:
#line 948 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_DIVIDE, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 146:
#line 953 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MODULO, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 147:
#line 958 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_MINUS, *(yyvsp[(2) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 148:
#line 964 "TableGram.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 149:
#line 965 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, *(yyvsp[(2) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 150:
#line 970 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_POWER, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 151:
#line 977 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 152:
#line 980 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_INDEX, *(yyvsp[(1) - (4)].node), *(yyvsp[(3) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 153:
#line 988 "TableGram.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 154:
#line 989 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUnitNodeRep ((yyvsp[(2) - (2)].nodename)->getString(), *(yyvsp[(1) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 155:
#line 997 "TableGram.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 156:
#line 998 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ((yyvsp[(1) - (4)].val)->getString(), *(yyvsp[(3) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 157:
#line 1003 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("ALL", *(yyvsp[(3) - (4)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 158:
#line 1008 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLKeyColNodeRep ((yyvsp[(1) - (1)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 159:
#line 1013 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLKeyColNodeRep ((yyvsp[(1) - (1)].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 160:
#line 1018 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(1) - (1)].val);
	   ;}
    break;

  case 161:
#line 1021 "TableGram.y"
    {
	       (yyval.node) = (yyvsp[(1) - (1)].node);
	   ;}
    break;

  case 162:
#line 1027 "TableGram.y"
    { (yyval.nodename) = (yyvsp[(1) - (1)].val); ;}
    break;

  case 163:
#line 1029 "TableGram.y"
    { (yyval.nodename) = (yyvsp[(1) - (1)].val); ;}
    break;

  case 164:
#line 1031 "TableGram.y"
    { (yyval.nodename) = (yyvsp[(1) - (1)].val); ;}
    break;

  case 165:
#line 1034 "TableGram.y"
    {
	       (yyval.val) = (yyvsp[(1) - (1)].val);
	   ;}
    break;

  case 166:
#line 1037 "TableGram.y"
    {
	       (yyval.val) = (yyvsp[(1) - (1)].val);
	   ;}
    break;

  case 167:
#line 1042 "TableGram.y"
    {
               (yyvsp[(2) - (3)].nodelist)->setIsSetOrArray();
               (yyval.node) = (yyvsp[(2) - (3)].nodelist);
           ;}
    break;

  case 168:
#line 1046 "TableGram.y"
    {
               (yyvsp[(2) - (3)].nodelist)->setIsSetOrArray();
               (yyval.node) = (yyvsp[(2) - (3)].nodelist);
           ;}
    break;

  case 169:
#line 1050 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].nodeselect);
           ;}
    break;

  case 170:
#line 1055 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (1)].nodelist);
	       (yyval.nodelist)->setPPFix("", "");
           ;}
    break;

  case 171:
#line 1059 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);       /* no elements */
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           ;}
    break;

  case 172:
#line 1065 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 173:
#line 1069 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 174:
#line 1077 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
	   ;}
    break;

  case 175:
#line 1080 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 176:
#line 1085 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(True);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
           ;}
    break;

  case 177:
#line 1092 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 178:
#line 1095 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(2) - (5)].node), *(yyvsp[(4) - (5)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 179:
#line 1100 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(2) - (5)].node), *(yyvsp[(4) - (5)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 180:
#line 1105 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(2) - (5)].node), *(yyvsp[(4) - (5)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 181:
#line 1110 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(2) - (5)].node), *(yyvsp[(4) - (5)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 182:
#line 1115 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[(3) - (4)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
          ;}
    break;

  case 183:
#line 1120 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[(3) - (4)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
          ;}
    break;

  case 184:
#line 1125 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[(3) - (4)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 185:
#line 1130 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[(3) - (4)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 186:
#line 1135 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(2) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 187:
#line 1140 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(2) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 188:
#line 1145 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(2) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 189:
#line 1150 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(2) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 190:
#line 1155 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 191:
#line 1160 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 192:
#line 1165 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 193:
#line 1170 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 194:
#line 1175 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[(2) - (2)].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 195:
#line 1180 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[(2) - (2)].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 196:
#line 1185 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[(1) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 197:
#line 1190 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[(1) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 198:
#line 1197 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 199:
#line 1201 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (2)].nodelist);
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	   ;}
    break;

  case 200:
#line 1205 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	   ;}
    break;

  case 201:
#line 1212 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	       (yyval.nodelist)->add (*(yyvsp[(2) - (2)].node));
	   ;}
    break;

  case 202:
#line 1219 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 203:
#line 1227 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[(1) - (1)].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 204:
#line 1232 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
	   ;}
    break;

  case 205:
#line 1237 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[(1) - (3)].node), *(yyvsp[(3) - (3)].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 206:
#line 1242 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[(1) - (5)].node), *(yyvsp[(3) - (5)].node), *(yyvsp[(5) - (5)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 207:
#line 1247 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[(1) - (2)].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 208:
#line 1252 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[(1) - (4)].node), 0, *(yyvsp[(4) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 209:
#line 1257 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[(2) - (2)].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 210:
#line 1262 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[(2) - (4)].node), *(yyvsp[(4) - (4)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 211:
#line 1267 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, 0, *(yyvsp[(3) - (3)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            ;}
    break;

  case 212:
#line 1274 "TableGram.y"
    {
               (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 213:
#line 1278 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 214:
#line 1285 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::None, *(yyvsp[(1) - (1)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 215:
#line 1290 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Ascending, *(yyvsp[(1) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 216:
#line 1295 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Descending, *(yyvsp[(1) - (2)].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 217:
#line 1302 "TableGram.y"
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 218:
#line 1307 "TableGram.y"
    {
	       (yyval.nodelist) = (yyvsp[(1) - (3)].nodelist);
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 219:
#line 1313 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ("", *(yyvsp[(2) - (3)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   ;}
    break;

  case 220:
#line 1320 "TableGram.y"
    {
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].node));
	   ;}
    break;

  case 221:
#line 1323 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].node));
	   ;}
    break;

  case 222:
#line 1331 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 223:
#line 1334 "TableGram.y"
    {
               (yyval.node) = (yyvsp[(1) - (1)].node);
           ;}
    break;

  case 224:
#line 1337 "TableGram.y"
    {
	       /* Like in glish [=] is the syntax for an empty 'record' */
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[(1) - (5)].val)->getString(), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 225:
#line 1345 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[(1) - (3)].val)->getString(), *(yyvsp[(3) - (3)].val)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 226:
#line 1350 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[(1) - (5)].val)->getString(), *(yyvsp[(4) - (5)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 227:
#line 1357 "TableGram.y"
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[(1) - (5)].val)->getString(), *(yyvsp[(4) - (5)].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           ;}
    break;

  case 228:
#line 1364 "TableGram.y"
    {
               (yyval.nodelist)->add (*(yyvsp[(3) - (3)].val));
	   ;}
    break;

  case 229:
#line 1367 "TableGram.y"
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
               (yyval.nodelist)->add (*(yyvsp[(1) - (1)].val));
	   ;}
    break;

  case 230:
#line 1373 "TableGram.y"
    {      /* empty vector */
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
           ;}
    break;


/* Line 1267 of yacc.c.  */
#line 3895 "TableGram.ycc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1379 "TableGram.y"


